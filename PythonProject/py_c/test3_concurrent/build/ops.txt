def f(x):
    x, r0, r1 :: object
L0:
    r0 = PyNumber_Multiply(x, x)
    if is_error(r0) goto L2 (error at f:2) else goto L1
L1:
    return r0
L2:
    r1 = <error> :: object
    return r1

def simulate(x, p):
    x :: int
    p :: float
    r0 :: dict
    r1, r2 :: object
    r3 :: bit
    r4 :: str
    r5 :: object
    r6 :: str
    r7 :: dict
    r8 :: str
    r9 :: object
    r10 :: int32
    r11 :: bit
    s, r :: int
    r12 :: native_int
    r13 :: bit
    r14 :: native_int
    r15, r16, r17 :: bit
    r18 :: object
    r19 :: str
    r20, r21 :: object
    r22 :: float
    r23, r24 :: bit
    r25 :: object
    r26, r27, r28 :: int
L0:
    r0 = mod.globals :: static
    r1 = random :: module
    r2 = load_address _Py_NoneStruct
    r3 = r1 != r2
    if r3 goto L3 else goto L1 :: bool
L1:
    r4 = 'random'
    r5 = PyImport_Import(r4)
    if is_error(r5) goto L18 (error at simulate:6) else goto L2
L2:
    random = r5 :: module
    dec_ref r5
L3:
    r6 = 'random'
    r7 = PyImport_GetModuleDict()
    r8 = 'random'
    r9 = CPyDict_GetItem(r7, r8)
    if is_error(r9) goto L18 (error at simulate:6) else goto L4
L4:
    r10 = CPyDict_SetItem(r0, r6, r9)
    dec_ref r9
    r11 = r10 >= 0 :: signed
    if not r11 goto L18 (error at simulate:6) else goto L5 :: bool
L5:
    s = 0
    r = 0
L6:
    r12 = s & 1
    r13 = r12 != 0
    if r13 goto L8 else goto L7 :: bool
L7:
    r14 = x & 1
    r15 = r14 != 0
    if r15 goto L8 else goto L9 :: bool
L8:
    r16 = CPyTagged_IsLt_(s, x)
    if r16 goto L10 else goto L19 :: bool
L9:
    r17 = s < x :: signed
    if r17 goto L10 else goto L19 :: bool
L10:
    r18 = random :: module
    r19 = 'random'
    r20 = CPyObject_GetAttr(r18, r19)
    if is_error(r20) goto L20 (error at simulate:18) else goto L11
L11:
    r21 = _PyObject_Vectorcall(r20, 0, 0, 0)
    dec_ref r20
    if is_error(r21) goto L20 (error at simulate:18) else goto L12
L12:
    r22 = unbox(float, r21)
    dec_ref r21
    r23 = r22 == -113.0
    if r23 goto L14 else goto L13 :: bool
L13:
    r24 = r22 < p
    if r24 goto L15 else goto L16 :: bool
L14:
    r25 = PyErr_Occurred()
    if not is_error(r25) goto L20 (error at simulate:18) else goto L13
L15:
    r26 = CPyTagged_Add(s, 2)
    dec_ref s :: int
    s = r26
L16:
    r27 = CPyTagged_Add(r, 2)
    dec_ref r :: int
    r = r27
    goto L6
L17:
    return r
L18:
    r28 = <error> :: int
    return r28
L19:
    dec_ref s :: int
    goto L17
L20:
    dec_ref s :: int
    dec_ref r :: int
    goto L18

def run_simulation(nums):
    nums :: list
    r0 :: dict
    r1 :: str
    r2 :: object
    r3 :: list
    r4 :: object
    r5 :: tuple
    r6 :: dict
    r7 :: object
    r8, r9 :: int
L0:
    r0 = mod.globals :: static
    r1 = 'simulate'
    r2 = CPyDict_GetItem(r0, r1)
    if is_error(r2) goto L8 (error at run_simulation:28) else goto L1
L1:
    r3 = PyList_New(0)
    if is_error(r3) goto L9 (error at run_simulation:28) else goto L2
L2:
    r4 = CPyList_Extend(r3, nums)
    if is_error(r4) goto L10 (error at run_simulation:28) else goto L11
L3:
    r5 = PyList_AsTuple(r3)
    dec_ref r3
    if is_error(r5) goto L9 (error at run_simulation:28) else goto L4
L4:
    r6 = PyDict_New()
    if is_error(r6) goto L12 (error at run_simulation:28) else goto L5
L5:
    r7 = PyObject_Call(r2, r5, r6)
    dec_ref r2
    dec_ref r5
    dec_ref r6
    if is_error(r7) goto L8 (error at run_simulation:28) else goto L6
L6:
    r8 = unbox(int, r7)
    dec_ref r7
    if is_error(r8) goto L8 (error at run_simulation:28) else goto L7
L7:
    return r8
L8:
    r9 = <error> :: int
    return r9
L9:
    dec_ref r2
    goto L8
L10:
    dec_ref r2
    dec_ref r3
    goto L8
L11:
    dec_ref r4
    goto L3
L12:
    dec_ref r2
    dec_ref r5
    goto L8

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4 :: object
    r5 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L4 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    return 1
L4:
    r5 = <error> :: None
    return r5
