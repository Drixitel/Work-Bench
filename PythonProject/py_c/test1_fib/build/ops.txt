def fib_vanilla(n):
    n, r0, r1 :: object
    r2 :: int32
    r3 :: bit
    r4 :: bool
    r5, r6, r7, r8, r9, r10, r11, r12 :: object
L0:
    r0 = object 1
    r1 = PyObject_RichCompare(n, r0, 1)
    if is_error(r1) goto L10 (error at fib_vanilla:13) else goto L1
L1:
    r2 = PyObject_IsTrue(r1)
    dec_ref r1
    r3 = r2 >= 0 :: signed
    if not r3 goto L10 (error at fib_vanilla:13) else goto L2 :: bool
L2:
    r4 = truncate r2: int32 to builtins.bool
    if r4 goto L3 else goto L4 :: bool
L3:
    inc_ref n
    return n
L4:
    r5 = object 2
    r6 = PyNumber_Subtract(n, r5)
    if is_error(r6) goto L10 (error at fib_vanilla:16) else goto L5
L5:
    r7 = fib_vanilla(r6)
    dec_ref r6
    if is_error(r7) goto L10 (error at fib_vanilla:16) else goto L6
L6:
    r8 = object 1
    r9 = PyNumber_Subtract(n, r8)
    if is_error(r9) goto L11 (error at fib_vanilla:16) else goto L7
L7:
    r10 = fib_vanilla(r9)
    dec_ref r9
    if is_error(r10) goto L11 (error at fib_vanilla:16) else goto L8
L8:
    r11 = PyNumber_Add(r7, r10)
    dec_ref r7
    dec_ref r10
    if is_error(r11) goto L10 (error at fib_vanilla:16) else goto L9
L9:
    return r11
L10:
    r12 = <error> :: object
    return r12
L11:
    dec_ref r7
    goto L10

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4 :: object
    r5 :: object_ptr
    r6 :: object_ptr[1]
    r7 :: c_ptr
    r8 :: native_int[1]
    r9 :: c_ptr
    r10 :: object
    r11 :: dict
    r12, r13 :: str
    r14 :: bit
    r15 :: object
    r16 :: str
    r17, r18 :: object
    r19 :: float
    r20 :: bit
    r21 :: dict
    r22 :: str
    r23 :: object
    r24 :: int32
    r25 :: bit
    r26, r27, r28, r29 :: object
    r30 :: str
    r31, r32 :: object
    r33 :: float
    r34 :: bit
    r35 :: dict
    r36 :: str
    r37, r38 :: object
    r39 :: float
    r40 :: bit
    r41 :: float
    r42 :: object
    r43 :: str
    r44, r45, r46 :: object
    r47 :: object[1]
    r48 :: object_ptr
    r49 :: object
    r50 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L20 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = load_address time :: module
    r6 = [r5]
    r7 = load_address r6
    r8 = [1]
    r9 = load_address r8
    r10 = (('time', 'time', 'time'),)
    r11 = fib_normal_withC.globals :: static
    r12 = 'fib_normal_withC.py'
    r13 = '<module>'
    r14 = CPyImport_ImportMany(r10, r7, r11, r12, r13, r9)
    if not r14 goto L20 else goto L4 :: bool
L4:
    r15 = time :: module
    r16 = 'perf_counter'
    r17 = CPyObject_GetAttr(r15, r16)
    if is_error(r17) goto L20 (error at <module>:24) else goto L5
L5:
    r18 = _PyObject_Vectorcall(r17, 0, 0, 0)
    dec_ref r17
    if is_error(r18) goto L20 (error at <module>:24) else goto L6
L6:
    r19 = unbox(float, r18)
    dec_ref r18
    r20 = r19 == -113.0
    if r20 goto L8 else goto L7 :: bool
L7:
    r21 = fib_normal_withC.globals :: static
    r22 = 't0'
    r23 = box(float, r19)
    r24 = CPyDict_SetItem(r21, r22, r23)
    dec_ref r23
    r25 = r24 >= 0 :: signed
    if not r25 goto L20 (error at <module>:24) else goto L9 :: bool
L8:
    r26 = PyErr_Occurred()
    if not is_error(r26) goto L20 (error at <module>:24) else goto L7
L9:
    r27 = object 32
    r28 = fib_vanilla(r27)
    if is_error(r28) goto L20 (error at <module>:25) else goto L21
L10:
    r29 = time :: module
    r30 = 'perf_counter'
    r31 = CPyObject_GetAttr(r29, r30)
    if is_error(r31) goto L20 (error at <module>:29) else goto L11
L11:
    r32 = _PyObject_Vectorcall(r31, 0, 0, 0)
    dec_ref r31
    if is_error(r32) goto L20 (error at <module>:29) else goto L12
L12:
    r33 = unbox(float, r32)
    dec_ref r32
    r34 = r33 == -113.0
    if r34 goto L14 else goto L13 :: bool
L13:
    r35 = fib_normal_withC.globals :: static
    r36 = 't0'
    r37 = CPyDict_GetItem(r35, r36)
    if is_error(r37) goto L20 (error at <module>:29) else goto L15
L14:
    r38 = PyErr_Occurred()
    if not is_error(r38) goto L20 (error at <module>:29) else goto L13
L15:
    r39 = unbox(float, r37)
    dec_ref r37
    r40 = r39 == -113.0
    if r40 goto L17 else goto L16 :: bool
L16:
    r41 = r33 - r39
    r42 = builtins :: module
    r43 = 'print'
    r44 = CPyObject_GetAttr(r42, r43)
    if is_error(r44) goto L20 (error at <module>:29) else goto L18
L17:
    r45 = PyErr_Occurred()
    if not is_error(r45) goto L20 (error at <module>:29) else goto L16
L18:
    r46 = box(float, r41)
    r47 = [r46]
    r48 = load_address r47
    r49 = _PyObject_Vectorcall(r44, r48, 1, 0)
    dec_ref r44
    if is_error(r49) goto L22 (error at <module>:29) else goto L23
L19:
    dec_ref r46
    return 1
L20:
    r50 = <error> :: None
    return r50
L21:
    dec_ref r28
    goto L10
L22:
    dec_ref r46
    goto L20
L23:
    dec_ref r49
    goto L19
