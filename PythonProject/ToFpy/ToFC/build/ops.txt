def Simulation.__init__(self):
    self :: modTof.Simulation
    r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29 :: object
    r30 :: list
    r31, r32, r33, r34 :: ptr
    r35, r36, r37, r38, r39, r40, r41 :: object
    r42 :: list
    r43, r44, r45, r46 :: ptr
    r47, r48, r49, r50, r51, r52, r53, r54 :: object
    r55 :: list
    r56, r57, r58, r59 :: ptr
    r60, r61, r62, r63, r64, r65, r66, r67 :: object
    r68 :: list
    r69, r70, r71, r72 :: ptr
    r73 :: object
    r74 :: str
    r75, r76 :: object
    r77 :: object[1]
    r78 :: object_ptr
    r79, r80 :: object
    r81 :: str
    r82 :: object
    r83 :: object[1]
    r84 :: object_ptr
    r85, r86, r87, r88, r89, r90 :: object
    r91 :: str
    r92, r93 :: object
    r94 :: object[1]
    r95 :: object_ptr
    r96, r97 :: object
    r98 :: str
    r99 :: object
    r100 :: object[1]
    r101 :: object_ptr
    r102, r103, r104, r105, r106, r107, r108 :: object
    r109 :: str
    r110 :: object
    r111 :: object[1]
    r112 :: object_ptr
    r113, r114 :: object
    r115 :: str
    r116 :: object
    r117 :: object[1]
    r118 :: object_ptr
    r119, r120, r121, r122, r123, r124, r125 :: object
    r126 :: str
    r127 :: object
    r128 :: object[1]
    r129 :: object_ptr
    r130, r131 :: object
    r132 :: str
    r133 :: object
    r134 :: object[1]
    r135 :: object_ptr
    r136, r137, r138, r139, r140, r141, r142, r143, r144, r145 :: object
    r146 :: str
    r147, r148, r149 :: object
    r150 :: object[3]
    r151 :: object_ptr
    r152, r153, r154, r155, r156, r157, r158, r159, r160, r161, r162, r163, r164, r165, r166, r167, r168, r169, r170, r171, r172, r173, r174, r175, r176 :: object
    r177 :: str
    r178 :: object
    r179 :: str
    r180 :: object
    r181 :: object[1]
    r182 :: object_ptr
    r183 :: object
    r184 :: str
    r185 :: object
    r186 :: str
    r187 :: object
    r188 :: object[1]
    r189 :: object_ptr
    r190 :: object
    r191 :: str
    r192 :: object
    r193 :: str
    r194 :: object
    r195 :: object[1]
    r196 :: object_ptr
    r197 :: object
    r198 :: str
    r199 :: object
    r200 :: str
    r201 :: object
    r202 :: str
    r203 :: object
    r204 :: object[3]
    r205 :: object_ptr
    r206 :: object
    r207 :: str
    r208, r209 :: object
    r210 :: str
    r211 :: object
    r212 :: object[2]
    r213 :: object_ptr
    r214 :: object
    r215 :: str
    r216, r217 :: object
    r218 :: str
    r219 :: object
    r220 :: object[2]
    r221 :: object_ptr
    r222 :: object
    r223 :: str
    r224 :: object
    r225 :: str
    r226 :: object
    r227 :: str
    r228 :: object
    r229 :: object[3]
    r230 :: object_ptr
    r231 :: object
    r232 :: str
    r233 :: object
    r234 :: str
    r235 :: object
    r236 :: str
    r237 :: object
    r238 :: object[3]
    r239 :: object_ptr
    r240 :: object
    r241 :: str
    r242, r243 :: object
    r244 :: str
    r245 :: object
    r246 :: object[2]
    r247 :: object_ptr
    r248 :: object
    r249 :: str
    r250 :: object
    r251 :: str
    r252 :: object
    r253 :: str
    r254 :: object
    r255 :: object[3]
    r256 :: object_ptr
    r257 :: object
    r258 :: str
    r259 :: object
    r260 :: str
    r261 :: object
    r262 :: object[1]
    r263 :: object_ptr
    r264 :: object
    r265 :: str
    r266 :: object
    r267 :: str
    r268 :: object
    r269 :: str
    r270 :: object
    r271 :: object[3]
    r272 :: object_ptr
    r273 :: object
    r274 :: None
L0:
    r0 = box(float, 0.018974177215189875)
    self.c = r0
    r1 = box(float, 1.60217663e-19)
    self.q = r1
    r2 = box(float, 1.000293)
    self.n_1 = r2
    r3 = box(float, 1.58)
    self.n_2 = r3
    r4 = object 0
    inc_ref r4
    self.T3z = r4
    r5 = box(float, 33.782)
    self.T1z = r5
    r6 = box(float, -28.07297)
    self.T4z = r6
    r7 = object 13
    inc_ref r7
    self.T1_radius = r7
    r8 = object 18
    inc_ref r8
    self.T4_radius = r8
    r9 = box(float, 0.5)
    self.T1_width = r9
    r10 = object 1
    inc_ref r10
    self.T4_width = r10
    r11 = self.T1z
    r12 = self.T1_width
    r13 = PyNumber_Add(r11, r12)
    dec_ref r11
    dec_ref r12
    if is_error(r13) goto L71 (error at __init__:46) else goto L1
L1:
    self.T1top = r13
    r14 = self.T4z
    r15 = self.T4_width
    r16 = PyNumber_Add(r14, r15)
    dec_ref r14
    dec_ref r15
    if is_error(r16) goto L71 (error at __init__:47) else goto L2
L2:
    self.T4top = r16
    r17 = self.T1_width
    r18 = object 4
    r19 = PyNumber_Multiply(r17, r18)
    dec_ref r17
    if is_error(r19) goto L71 (error at __init__:48) else goto L3
L3:
    self.T1_corner_radius = r19
    r20 = self.T4_width
    r21 = object 4
    r22 = PyNumber_Multiply(r20, r21)
    dec_ref r20
    if is_error(r22) goto L71 (error at __init__:49) else goto L4
L4:
    self.T4_corner_radius = r22
    r23 = self.T1_radius
    r24 = self.T1_corner_radius
    r25 = PyNumber_Subtract(r23, r24)
    dec_ref r23
    dec_ref r24
    if is_error(r25) goto L71 (error at __init__:50) else goto L5
L5:
    r26 = self.T1_corner_radius
    r27 = self.T1_radius
    r28 = PyNumber_Subtract(r26, r27)
    dec_ref r26
    dec_ref r27
    if is_error(r28) goto L72 (error at __init__:50) else goto L6
L6:
    r29 = self.T1_radius
    r30 = PyList_New(3)
    if is_error(r30) goto L73 (error at __init__:50) else goto L7
L7:
    r31 = get_element_ptr r30 ob_item :: PyListObject
    r32 = load_mem r31 :: ptr*
    set_mem r32, r25 :: builtins.object*
    r33 = r32 + 8
    set_mem r33, r28 :: builtins.object*
    r34 = r32 + 16
    set_mem r34, r29 :: builtins.object*
    self.T1_corner_center = r30
    r35 = self.T4_corner_radius
    r36 = self.T4_radius
    r37 = PyNumber_Subtract(r35, r36)
    dec_ref r35
    dec_ref r36
    if is_error(r37) goto L71 (error at __init__:51) else goto L8
L8:
    r38 = self.T4_radius
    r39 = self.T4_corner_radius
    r40 = PyNumber_Subtract(r38, r39)
    dec_ref r38
    dec_ref r39
    if is_error(r40) goto L74 (error at __init__:51) else goto L9
L9:
    r41 = self.T4_radius
    r42 = PyList_New(3)
    if is_error(r42) goto L75 (error at __init__:51) else goto L10
L10:
    r43 = get_element_ptr r42 ob_item :: PyListObject
    r44 = load_mem r43 :: ptr*
    set_mem r44, r37 :: builtins.object*
    r45 = r44 + 8
    set_mem r45, r40 :: builtins.object*
    r46 = r44 + 16
    set_mem r46, r41 :: builtins.object*
    self.T4_corner_center = r42
    r47 = self.T1_radius
    r48 = box(float, 2.0)
    r49 = PyNumber_Subtract(r47, r48)
    dec_ref r47
    dec_ref r48
    if is_error(r49) goto L71 (error at __init__:52) else goto L11
L11:
    r50 = self.T1_radius
    r51 = PyNumber_Negative(r50)
    dec_ref r50
    if is_error(r51) goto L76 (error at __init__:52) else goto L12
L12:
    r52 = box(float, 2.0)
    r53 = PyNumber_Add(r51, r52)
    dec_ref r51
    dec_ref r52
    if is_error(r53) goto L76 (error at __init__:52) else goto L13
L13:
    r54 = self.T1z
    r55 = PyList_New(3)
    if is_error(r55) goto L77 (error at __init__:52) else goto L14
L14:
    r56 = get_element_ptr r55 ob_item :: PyListObject
    r57 = load_mem r56 :: ptr*
    set_mem r57, r49 :: builtins.object*
    r58 = r57 + 8
    set_mem r58, r53 :: builtins.object*
    r59 = r57 + 16
    set_mem r59, r54 :: builtins.object*
    self.PMT1_center = r55
    r60 = self.T4_radius
    r61 = PyNumber_Negative(r60)
    dec_ref r60
    if is_error(r61) goto L71 (error at __init__:53) else goto L15
L15:
    r62 = box(float, 2.0)
    r63 = PyNumber_Add(r61, r62)
    dec_ref r61
    dec_ref r62
    if is_error(r63) goto L71 (error at __init__:53) else goto L16
L16:
    r64 = self.T4_radius
    r65 = box(float, 2.0)
    r66 = PyNumber_Subtract(r64, r65)
    dec_ref r64
    dec_ref r65
    if is_error(r66) goto L78 (error at __init__:53) else goto L17
L17:
    r67 = self.T4z
    r68 = PyList_New(3)
    if is_error(r68) goto L79 (error at __init__:53) else goto L18
L18:
    r69 = get_element_ptr r68 ob_item :: PyListObject
    r70 = load_mem r69 :: ptr*
    set_mem r70, r63 :: builtins.object*
    r71 = r70 + 8
    set_mem r71, r66 :: builtins.object*
    r72 = r70 + 16
    set_mem r72, r67 :: builtins.object*
    self.PMT4_center = r68
    r73 = numpy :: module
    r74 = 'radians'
    r75 = CPyObject_GetAttr(r73, r74)
    if is_error(r75) goto L71 (error at __init__:54) else goto L19
L19:
    r76 = object 110
    r77 = [r76]
    r78 = load_address r77
    r79 = _PyObject_Vectorcall(r75, r78, 1, 0)
    dec_ref r75
    if is_error(r79) goto L71 (error at __init__:54) else goto L20
L20:
    r80 = numpy :: module
    r81 = 'cos'
    r82 = CPyObject_GetAttr(r80, r81)
    if is_error(r82) goto L80 (error at __init__:54) else goto L21
L21:
    r83 = [r79]
    r84 = load_address r83
    r85 = _PyObject_Vectorcall(r82, r84, 1, 0)
    dec_ref r82
    if is_error(r85) goto L80 (error at __init__:54) else goto L22
L22:
    dec_ref r79
    r86 = box(float, 9.5)
    r87 = PyNumber_Multiply(r86, r85)
    dec_ref r86
    dec_ref r85
    if is_error(r87) goto L71 (error at __init__:54) else goto L23
L23:
    r88 = box(float, 2.54)
    r89 = PyNumber_Multiply(r87, r88)
    dec_ref r87
    dec_ref r88
    if is_error(r89) goto L71 (error at __init__:54) else goto L24
L24:
    self.xPMT4 = r89
    r90 = numpy :: module
    r91 = 'radians'
    r92 = CPyObject_GetAttr(r90, r91)
    if is_error(r92) goto L71 (error at __init__:55) else goto L25
L25:
    r93 = object 110
    r94 = [r93]
    r95 = load_address r94
    r96 = _PyObject_Vectorcall(r92, r95, 1, 0)
    dec_ref r92
    if is_error(r96) goto L71 (error at __init__:55) else goto L26
L26:
    r97 = numpy :: module
    r98 = 'sin'
    r99 = CPyObject_GetAttr(r97, r98)
    if is_error(r99) goto L81 (error at __init__:55) else goto L27
L27:
    r100 = [r96]
    r101 = load_address r100
    r102 = _PyObject_Vectorcall(r99, r101, 1, 0)
    dec_ref r99
    if is_error(r102) goto L81 (error at __init__:55) else goto L28
L28:
    dec_ref r96
    r103 = box(float, 9.5)
    r104 = PyNumber_Multiply(r103, r102)
    dec_ref r103
    dec_ref r102
    if is_error(r104) goto L71 (error at __init__:55) else goto L29
L29:
    r105 = box(float, 2.54)
    r106 = PyNumber_Multiply(r104, r105)
    dec_ref r104
    dec_ref r105
    if is_error(r106) goto L71 (error at __init__:55) else goto L30
L30:
    self.yPMT4 = r106
    r107 = object -45
    r108 = numpy :: module
    r109 = 'radians'
    r110 = CPyObject_GetAttr(r108, r109)
    if is_error(r110) goto L71 (error at __init__:56) else goto L31
L31:
    r111 = [r107]
    r112 = load_address r111
    r113 = _PyObject_Vectorcall(r110, r112, 1, 0)
    dec_ref r110
    if is_error(r113) goto L71 (error at __init__:56) else goto L32
L32:
    r114 = numpy :: module
    r115 = 'cos'
    r116 = CPyObject_GetAttr(r114, r115)
    if is_error(r116) goto L82 (error at __init__:56) else goto L33
L33:
    r117 = [r113]
    r118 = load_address r117
    r119 = _PyObject_Vectorcall(r116, r118, 1, 0)
    dec_ref r116
    if is_error(r119) goto L82 (error at __init__:56) else goto L34
L34:
    dec_ref r113
    r120 = box(float, 8.0)
    r121 = PyNumber_Multiply(r120, r119)
    dec_ref r120
    dec_ref r119
    if is_error(r121) goto L71 (error at __init__:56) else goto L35
L35:
    r122 = box(float, 2.54)
    r123 = PyNumber_Multiply(r121, r122)
    dec_ref r121
    dec_ref r122
    if is_error(r123) goto L71 (error at __init__:56) else goto L36
L36:
    self.xPMT1 = r123
    r124 = object -45
    r125 = numpy :: module
    r126 = 'radians'
    r127 = CPyObject_GetAttr(r125, r126)
    if is_error(r127) goto L71 (error at __init__:57) else goto L37
L37:
    r128 = [r124]
    r129 = load_address r128
    r130 = _PyObject_Vectorcall(r127, r129, 1, 0)
    dec_ref r127
    if is_error(r130) goto L71 (error at __init__:57) else goto L38
L38:
    r131 = numpy :: module
    r132 = 'sin'
    r133 = CPyObject_GetAttr(r131, r132)
    if is_error(r133) goto L83 (error at __init__:57) else goto L39
L39:
    r134 = [r130]
    r135 = load_address r134
    r136 = _PyObject_Vectorcall(r133, r135, 1, 0)
    dec_ref r133
    if is_error(r136) goto L83 (error at __init__:57) else goto L40
L40:
    dec_ref r130
    r137 = box(float, 8.0)
    r138 = PyNumber_Multiply(r137, r136)
    dec_ref r137
    dec_ref r136
    if is_error(r138) goto L71 (error at __init__:57) else goto L41
L41:
    r139 = box(float, 2.54)
    r140 = PyNumber_Multiply(r138, r139)
    dec_ref r138
    dec_ref r139
    if is_error(r140) goto L71 (error at __init__:57) else goto L42
L42:
    self.yPMT1 = r140
    r141 = box(float, 2.3)
    self.PMT1_radius = r141
    r142 = box(float, 2.3)
    self.PMT4_radius = r142
    r143 = object 8
    inc_ref r143
    self.n_dynodes = r143
    r144 = self.n_dynodes
    r145 = numpy :: module
    r146 = 'linspace'
    r147 = CPyObject_GetAttr(r145, r146)
    if is_error(r147) goto L84 (error at __init__:62) else goto L43
L43:
    r148 = object 150
    r149 = object 850
    r150 = [r148, r149, r144]
    r151 = load_address r150
    r152 = _PyObject_Vectorcall(r147, r151, 3, 0)
    dec_ref r147
    if is_error(r152) goto L84 (error at __init__:62) else goto L44
L44:
    dec_ref r144
    self.V = r152
    r153 = object 20
    inc_ref r153
    self.E_per_electron = r153
    r154 = object 1
    inc_ref r154
    self.QE = r154
    r155 = object 400
    inc_ref r155
    self.sigma_smoothing = r155
    r156 = object 0
    inc_ref r156
    self.t_initial = r156
    r157 = object 40
    inc_ref r157
    self.particle_init_angle_range = r157
    r158 = self.T1_radius
    self.particle_gen_area = r158
    r159 = self.T1z
    r160 = self.T1_width
    r161 = PyNumber_Add(r159, r160)
    dec_ref r159
    dec_ref r160
    if is_error(r161) goto L71 (error at __init__:70) else goto L45
L45:
    r162 = object 2
    r163 = PyNumber_Add(r161, r162)
    dec_ref r161
    if is_error(r163) goto L71 (error at __init__:70) else goto L46
L46:
    self.particle_gen_z = r163
    r164 = box(float, 0.00024)
    self.mean_free_path_scints = r164
    r165 = object 10
    inc_ref r165
    self.photons_produced_per_MeV = r165
    r166 = box(float, 0.8)
    self.pr_of_scintillation = r166
    r167 = object 40
    inc_ref r167
    self.max_simulated_reflections = r167
    r168 = object 0
    inc_ref r168
    self.pmt_electron_travel_time = r168
    r169 = object 1
    inc_ref r169
    self.artificial_gain = r169
    r170 = box(float, 0.08)
    self.max_pmt_current_output = r170
    r171 = box(float, 0.1)
    self.pr_absorption = r171
    r172 = box(float, 100000.0)
    self.seperation_time = r172
    r173 = object 100
    inc_ref r173
    self.output_bin_width = r173
    r174 = object 1
    inc_ref r174
    self.num_particles = r174
    r175 = box(float, 1.5)
    self.CMOS_thresh = r175
    r176 = box(float, 0.9)
    self.reemission_angle_factor = r176
    r177 = '######################################################'
    r178 = builtins :: module
    r179 = 'print'
    r180 = CPyObject_GetAttr(r178, r179)
    if is_error(r180) goto L71 (error at __init__:86) else goto L47
L47:
    r181 = [r177]
    r182 = load_address r181
    r183 = _PyObject_Vectorcall(r180, r182, 1, 0)
    dec_ref r180
    if is_error(r183) goto L71 (error at __init__:86) else goto L85
L48:
    r184 = 'Generated Apparatus Simulation with following defaults'
    r185 = builtins :: module
    r186 = 'print'
    r187 = CPyObject_GetAttr(r185, r186)
    if is_error(r187) goto L71 (error at __init__:87) else goto L49
L49:
    r188 = [r184]
    r189 = load_address r188
    r190 = _PyObject_Vectorcall(r187, r189, 1, 0)
    dec_ref r187
    if is_error(r190) goto L71 (error at __init__:87) else goto L86
L50:
    r191 = '######################################################'
    r192 = builtins :: module
    r193 = 'print'
    r194 = CPyObject_GetAttr(r192, r193)
    if is_error(r194) goto L71 (error at __init__:88) else goto L51
L51:
    r195 = [r191]
    r196 = load_address r195
    r197 = _PyObject_Vectorcall(r194, r196, 1, 0)
    dec_ref r194
    if is_error(r197) goto L71 (error at __init__:88) else goto L87
L52:
    r198 = 'PARTICLE: Mean Free Path ='
    r199 = self.mean_free_path_scints
    r200 = 'cm'
    r201 = builtins :: module
    r202 = 'print'
    r203 = CPyObject_GetAttr(r201, r202)
    if is_error(r203) goto L88 (error at __init__:89) else goto L53
L53:
    r204 = [r198, r199, r200]
    r205 = load_address r204
    r206 = _PyObject_Vectorcall(r203, r205, 3, 0)
    dec_ref r203
    if is_error(r206) goto L88 (error at __init__:89) else goto L89
L54:
    dec_ref r199
    r207 = 'PARTICLE: Time Seperation between sequential Particles if simulation more than 1 ='
    r208 = self.seperation_time
    r209 = builtins :: module
    r210 = 'print'
    r211 = CPyObject_GetAttr(r209, r210)
    if is_error(r211) goto L90 (error at __init__:90) else goto L55
L55:
    r212 = [r207, r208]
    r213 = load_address r212
    r214 = _PyObject_Vectorcall(r211, r213, 2, 0)
    dec_ref r211
    if is_error(r214) goto L90 (error at __init__:90) else goto L91
L56:
    dec_ref r208
    r215 = 'SCINT:    Probability of Scintillaton ='
    r216 = self.pr_of_scintillation
    r217 = builtins :: module
    r218 = 'print'
    r219 = CPyObject_GetAttr(r217, r218)
    if is_error(r219) goto L92 (error at __init__:91) else goto L57
L57:
    r220 = [r215, r216]
    r221 = load_address r220
    r222 = _PyObject_Vectorcall(r219, r221, 2, 0)
    dec_ref r219
    if is_error(r222) goto L92 (error at __init__:91) else goto L93
L58:
    dec_ref r216
    r223 = 'PMT:      Quantum Efficiency is set to'
    r224 = self.QE
    r225 = 'by default to keep more pulses'
    r226 = builtins :: module
    r227 = 'print'
    r228 = CPyObject_GetAttr(r226, r227)
    if is_error(r228) goto L94 (error at __init__:92) else goto L59
L59:
    r229 = [r223, r224, r225]
    r230 = load_address r229
    r231 = _PyObject_Vectorcall(r228, r230, 3, 0)
    dec_ref r228
    if is_error(r231) goto L94 (error at __init__:92) else goto L95
L60:
    dec_ref r224
    r232 = 'PMT:      Energy per Photoelectron is set to'
    r233 = self.E_per_electron
    r234 = 'by best estimation'
    r235 = builtins :: module
    r236 = 'print'
    r237 = CPyObject_GetAttr(r235, r236)
    if is_error(r237) goto L96 (error at __init__:93) else goto L61
L61:
    r238 = [r232, r233, r234]
    r239 = load_address r238
    r240 = _PyObject_Vectorcall(r237, r239, 3, 0)
    dec_ref r237
    if is_error(r240) goto L96 (error at __init__:93) else goto L97
L62:
    dec_ref r233
    r241 = 'PMT:      Artificial Gain on Output Current ='
    r242 = self.artificial_gain
    r243 = builtins :: module
    r244 = 'print'
    r245 = CPyObject_GetAttr(r243, r244)
    if is_error(r245) goto L98 (error at __init__:94) else goto L63
L63:
    r246 = [r241, r242]
    r247 = load_address r246
    r248 = _PyObject_Vectorcall(r245, r247, 2, 0)
    dec_ref r245
    if is_error(r248) goto L98 (error at __init__:94) else goto L99
L64:
    dec_ref r242
    r249 = 'OUTPUT:   Binning Width for PWL output file ='
    r250 = self.output_bin_width
    r251 = 'ps'
    r252 = builtins :: module
    r253 = 'print'
    r254 = CPyObject_GetAttr(r252, r253)
    if is_error(r254) goto L100 (error at __init__:95) else goto L65
L65:
    r255 = [r249, r250, r251]
    r256 = load_address r255
    r257 = _PyObject_Vectorcall(r254, r256, 3, 0)
    dec_ref r254
    if is_error(r257) goto L100 (error at __init__:95) else goto L101
L66:
    dec_ref r250
    r258 = '\nRun with .run() function given optional arguments below'
    r259 = builtins :: module
    r260 = 'print'
    r261 = CPyObject_GetAttr(r259, r260)
    if is_error(r261) goto L71 (error at __init__:96) else goto L67
L67:
    r262 = [r258]
    r263 = load_address r262
    r264 = _PyObject_Vectorcall(r261, r263, 1, 0)
    dec_ref r261
    if is_error(r264) goto L71 (error at __init__:96) else goto L102
L68:
    r265 = "integer n particles, 'delta_t' ="
    r266 = self.seperation_time
    r267 = 'ps particle time seperation'
    r268 = builtins :: module
    r269 = 'print'
    r270 = CPyObject_GetAttr(r268, r269)
    if is_error(r270) goto L103 (error at __init__:97) else goto L69
L69:
    r271 = [r265, r266, r267]
    r272 = load_address r271
    r273 = _PyObject_Vectorcall(r270, r272, 3, 0)
    dec_ref r270
    if is_error(r273) goto L103 (error at __init__:97) else goto L104
L70:
    dec_ref r266
    return 1
L71:
    r274 = <error> :: None
    return r274
L72:
    dec_ref r25
    goto L71
L73:
    dec_ref r25
    dec_ref r28
    dec_ref r29
    goto L71
L74:
    dec_ref r37
    goto L71
L75:
    dec_ref r37
    dec_ref r40
    dec_ref r41
    goto L71
L76:
    dec_ref r49
    goto L71
L77:
    dec_ref r49
    dec_ref r53
    dec_ref r54
    goto L71
L78:
    dec_ref r63
    goto L71
L79:
    dec_ref r63
    dec_ref r66
    dec_ref r67
    goto L71
L80:
    dec_ref r79
    goto L71
L81:
    dec_ref r96
    goto L71
L82:
    dec_ref r113
    goto L71
L83:
    dec_ref r130
    goto L71
L84:
    dec_ref r144
    goto L71
L85:
    dec_ref r183
    goto L48
L86:
    dec_ref r190
    goto L50
L87:
    dec_ref r197
    goto L52
L88:
    dec_ref r199
    goto L71
L89:
    dec_ref r206
    goto L54
L90:
    dec_ref r208
    goto L71
L91:
    dec_ref r214
    goto L56
L92:
    dec_ref r216
    goto L71
L93:
    dec_ref r222
    goto L58
L94:
    dec_ref r224
    goto L71
L95:
    dec_ref r231
    goto L60
L96:
    dec_ref r233
    goto L71
L97:
    dec_ref r240
    goto L62
L98:
    dec_ref r242
    goto L71
L99:
    dec_ref r248
    goto L64
L100:
    dec_ref r250
    goto L71
L101:
    dec_ref r257
    goto L66
L102:
    dec_ref r264
    goto L68
L103:
    dec_ref r266
    goto L71
L104:
    dec_ref r273
    goto L70

def Simulation.round_to_sig(self, x):
    self :: modTof.Simulation
    x, r0 :: object
    r1 :: str
    r2 :: object
    r3 :: object[1]
    r4 :: object_ptr
    r5, r6 :: object
    r7 :: str
    r8 :: object
    r9 :: object[1]
    r10 :: object_ptr
    r11, r12 :: object
    r13 :: str
    r14 :: object
    r15 :: object[1]
    r16 :: object_ptr
    r17, r18 :: object
    r19 :: object[1]
    r20 :: object_ptr
    r21, r22, r23 :: object
L0:
    r0 = numpy :: module
    r1 = 'abs'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L9 (error at round_to_sig:105) else goto L1
L1:
    r3 = [x]
    r4 = load_address r3
    r5 = _PyObject_Vectorcall(r2, r4, 1, 0)
    dec_ref r2
    if is_error(r5) goto L9 (error at round_to_sig:105) else goto L2
L2:
    r6 = numpy :: module
    r7 = 'log10'
    r8 = CPyObject_GetAttr(r6, r7)
    if is_error(r8) goto L10 (error at round_to_sig:105) else goto L3
L3:
    r9 = [r5]
    r10 = load_address r9
    r11 = _PyObject_Vectorcall(r8, r10, 1, 0)
    dec_ref r8
    if is_error(r11) goto L10 (error at round_to_sig:105) else goto L4
L4:
    dec_ref r5
    r12 = numpy :: module
    r13 = 'floor'
    r14 = CPyObject_GetAttr(r12, r13)
    if is_error(r14) goto L11 (error at round_to_sig:105) else goto L5
L5:
    r15 = [r11]
    r16 = load_address r15
    r17 = _PyObject_Vectorcall(r14, r16, 1, 0)
    dec_ref r14
    if is_error(r17) goto L11 (error at round_to_sig:105) else goto L6
L6:
    dec_ref r11
    r18 = load_address PyLong_Type
    r19 = [r17]
    r20 = load_address r19
    r21 = _PyObject_Vectorcall(r18, r20, 1, 0)
    if is_error(r21) goto L12 (error at round_to_sig:105) else goto L7
L7:
    dec_ref r17
    r22 = PyNumber_Negative(r21)
    dec_ref r21
    if is_error(r22) goto L9 (error at round_to_sig:105) else goto L8
L8:
    return r22
L9:
    r23 = <error> :: object
    return r23
L10:
    dec_ref r5
    goto L9
L11:
    dec_ref r11
    goto L9
L12:
    dec_ref r17
    goto L9

def Simulation.normalize(self, x):
    self :: modTof.Simulation
    x, r0 :: object
    r1 :: str
    r2 :: object
    r3 :: str
    r4 :: object
    r5 :: object[1]
    r6 :: object_ptr
    r7, r8, r9 :: object
L0:
    r0 = numpy :: module
    r1 = 'linalg'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L5 (error at normalize:109) else goto L1
L1:
    r3 = 'norm'
    r4 = CPyObject_GetAttr(r2, r3)
    dec_ref r2
    if is_error(r4) goto L5 (error at normalize:109) else goto L2
L2:
    r5 = [x]
    r6 = load_address r5
    r7 = _PyObject_Vectorcall(r4, r6, 1, 0)
    dec_ref r4
    if is_error(r7) goto L5 (error at normalize:109) else goto L3
L3:
    r8 = PyNumber_InPlaceTrueDivide(x, r7)
    dec_ref r7
    if is_error(r8) goto L5 (error at normalize:109) else goto L4
L4:
    x = r8
    return x
L5:
    r9 = <error> :: object
    return r9

def Simulation.lg_condition(self, corner_pt, scint_corner, scint_num):
    self :: modTof.Simulation
    corner_pt, scint_corner, scint_num, r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19, r20, ret, r21, r22 :: object
    r23 :: i32
    r24 :: bit
    r25 :: bool
    r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40, r41, r42, r43, r44, r45, r46, r47 :: object
L0:
    r0 = object 0
    r1 = PyObject_GetItem(corner_pt, r0)
    if is_error(r1) goto L31 (error at lg_condition:114) else goto L1
L1:
    r2 = object 0
    r3 = PyObject_RichCompare(r1, r2, 4)
    dec_ref r1
    if is_error(r3) goto L31 (error at lg_condition:114) else goto L2
L2:
    r4 = object 0
    r5 = PyObject_GetItem(corner_pt, r4)
    if is_error(r5) goto L32 (error at lg_condition:114) else goto L3
L3:
    r6 = object 0
    r7 = PyObject_GetItem(scint_corner, r6)
    if is_error(r7) goto L33 (error at lg_condition:114) else goto L4
L4:
    r8 = PyObject_RichCompare(r5, r7, 0)
    dec_ref r5
    dec_ref r7
    if is_error(r8) goto L32 (error at lg_condition:114) else goto L5
L5:
    r9 = PyNumber_And(r3, r8)
    dec_ref r3
    dec_ref r8
    if is_error(r9) goto L31 (error at lg_condition:114) else goto L6
L6:
    r10 = object 1
    r11 = PyObject_GetItem(corner_pt, r10)
    if is_error(r11) goto L34 (error at lg_condition:114) else goto L7
L7:
    r12 = object 0
    r13 = PyObject_RichCompare(r11, r12, 0)
    dec_ref r11
    if is_error(r13) goto L34 (error at lg_condition:114) else goto L8
L8:
    r14 = PyNumber_And(r9, r13)
    dec_ref r9
    dec_ref r13
    if is_error(r14) goto L31 (error at lg_condition:114) else goto L9
L9:
    r15 = object 1
    r16 = PyObject_GetItem(corner_pt, r15)
    if is_error(r16) goto L35 (error at lg_condition:114) else goto L10
L10:
    r17 = object 1
    r18 = PyObject_GetItem(scint_corner, r17)
    if is_error(r18) goto L36 (error at lg_condition:114) else goto L11
L11:
    r19 = PyObject_RichCompare(r16, r18, 4)
    dec_ref r16
    dec_ref r18
    if is_error(r19) goto L35 (error at lg_condition:114) else goto L12
L12:
    r20 = PyNumber_And(r14, r19)
    dec_ref r14
    dec_ref r19
    if is_error(r20) goto L31 (error at lg_condition:114) else goto L13
L13:
    ret = r20
    r21 = object 4
    r22 = PyObject_RichCompare(scint_num, r21, 2)
    if is_error(r22) goto L37 (error at lg_condition:115) else goto L14
L14:
    r23 = PyObject_IsTrue(r22)
    dec_ref r22
    r24 = r23 >= 0 :: signed
    if not r24 goto L37 (error at lg_condition:115) else goto L15 :: bool
L15:
    r25 = truncate r23: i32 to builtins.bool
    if r25 goto L38 else goto L30 :: bool
L16:
    r26 = object 0
    r27 = PyObject_GetItem(corner_pt, r26)
    if is_error(r27) goto L31 (error at lg_condition:116) else goto L17
L17:
    r28 = object 0
    r29 = PyObject_RichCompare(r27, r28, 4)
    dec_ref r27
    if is_error(r29) goto L31 (error at lg_condition:116) else goto L18
L18:
    r30 = object 0
    r31 = PyObject_GetItem(corner_pt, r30)
    if is_error(r31) goto L39 (error at lg_condition:116) else goto L19
L19:
    r32 = object 0
    r33 = PyObject_GetItem(scint_corner, r32)
    if is_error(r33) goto L40 (error at lg_condition:116) else goto L20
L20:
    r34 = PyObject_RichCompare(r31, r33, 0)
    dec_ref r31
    dec_ref r33
    if is_error(r34) goto L39 (error at lg_condition:116) else goto L21
L21:
    r35 = PyNumber_And(r29, r34)
    dec_ref r29
    dec_ref r34
    if is_error(r35) goto L31 (error at lg_condition:116) else goto L22
L22:
    r36 = object 1
    r37 = PyObject_GetItem(corner_pt, r36)
    if is_error(r37) goto L41 (error at lg_condition:116) else goto L23
L23:
    r38 = object 0
    r39 = PyObject_RichCompare(r37, r38, 0)
    dec_ref r37
    if is_error(r39) goto L41 (error at lg_condition:116) else goto L24
L24:
    r40 = PyNumber_And(r35, r39)
    dec_ref r35
    dec_ref r39
    if is_error(r40) goto L31 (error at lg_condition:116) else goto L25
L25:
    r41 = object 1
    r42 = PyObject_GetItem(corner_pt, r41)
    if is_error(r42) goto L42 (error at lg_condition:116) else goto L26
L26:
    r43 = object 1
    r44 = PyObject_GetItem(scint_corner, r43)
    if is_error(r44) goto L43 (error at lg_condition:116) else goto L27
L27:
    r45 = PyObject_RichCompare(r42, r44, 4)
    dec_ref r42
    dec_ref r44
    if is_error(r45) goto L42 (error at lg_condition:116) else goto L28
L28:
    r46 = PyNumber_And(r40, r45)
    dec_ref r40
    dec_ref r45
    if is_error(r46) goto L31 (error at lg_condition:116) else goto L29
L29:
    ret = r46
L30:
    return ret
L31:
    r47 = <error> :: object
    return r47
L32:
    dec_ref r3
    goto L31
L33:
    dec_ref r3
    dec_ref r5
    goto L31
L34:
    dec_ref r9
    goto L31
L35:
    dec_ref r14
    goto L31
L36:
    dec_ref r14
    dec_ref r16
    goto L31
L37:
    dec_ref ret
    goto L31
L38:
    dec_ref ret
    goto L16
L39:
    dec_ref r29
    goto L31
L40:
    dec_ref r29
    dec_ref r31
    goto L31
L41:
    dec_ref r35
    goto L31
L42:
    dec_ref r40
    goto L31
L43:
    dec_ref r40
    dec_ref r42
    goto L31

def Simulation.scint_condition(self, corner_pt, scint_radius, scint_num):
    self :: modTof.Simulation
    corner_pt, scint_radius, scint_num, r0, r1, r2, r3, r4, r5, r6, r7 :: object
    r8 :: str
    r9 :: object
    r10 :: object[1]
    r11 :: object_ptr
    r12, r13 :: object
    r14 :: str
    r15 :: object
    r16 :: object[1]
    r17 :: object_ptr
    r18, r19, r20, ret, r21, r22 :: object
    r23 :: i32
    r24 :: bit
    r25 :: bool
    r26, r27, r28, r29, r30, r31, r32, r33 :: object
    r34 :: str
    r35 :: object
    r36 :: object[1]
    r37 :: object_ptr
    r38, r39 :: object
    r40 :: str
    r41 :: object
    r42 :: object[1]
    r43 :: object_ptr
    r44, r45, r46, r47 :: object
L0:
    r0 = load_address _Py_NoneStruct
    r1 = object 0
    r2 = object 2
    r3 = PySlice_New(r1, r2, r0)
    if is_error(r3) goto L21 (error at scint_condition:121) else goto L1
L1:
    r4 = PyObject_GetItem(corner_pt, r3)
    dec_ref r3
    if is_error(r4) goto L21 (error at scint_condition:121) else goto L2
L2:
    r5 = object 2
    r6 = CPyNumber_Power(r4, r5)
    dec_ref r4
    if is_error(r6) goto L21 (error at scint_condition:121) else goto L3
L3:
    r7 = numpy :: module
    r8 = 'sum'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L22 (error at scint_condition:121) else goto L4
L4:
    r10 = [r6]
    r11 = load_address r10
    r12 = _PyObject_Vectorcall(r9, r11, 1, 0)
    dec_ref r9
    if is_error(r12) goto L22 (error at scint_condition:121) else goto L5
L5:
    dec_ref r6
    r13 = numpy :: module
    r14 = 'sqrt'
    r15 = CPyObject_GetAttr(r13, r14)
    if is_error(r15) goto L23 (error at scint_condition:121) else goto L6
L6:
    r16 = [r12]
    r17 = load_address r16
    r18 = _PyObject_Vectorcall(r15, r17, 1, 0)
    dec_ref r15
    if is_error(r18) goto L23 (error at scint_condition:121) else goto L7
L7:
    dec_ref r12
    r19 = self.T1_radius
    r20 = PyObject_RichCompare(r18, r19, 0)
    dec_ref r18
    dec_ref r19
    if is_error(r20) goto L21 (error at scint_condition:121) else goto L8
L8:
    ret = r20
    r21 = object 4
    r22 = PyObject_RichCompare(scint_num, r21, 2)
    if is_error(r22) goto L24 (error at scint_condition:122) else goto L9
L9:
    r23 = PyObject_IsTrue(r22)
    dec_ref r22
    r24 = r23 >= 0 :: signed
    if not r24 goto L24 (error at scint_condition:122) else goto L10 :: bool
L10:
    r25 = truncate r23: i32 to builtins.bool
    if r25 goto L25 else goto L20 :: bool
L11:
    r26 = load_address _Py_NoneStruct
    r27 = object 0
    r28 = object 2
    r29 = PySlice_New(r27, r28, r26)
    if is_error(r29) goto L21 (error at scint_condition:123) else goto L12
L12:
    r30 = PyObject_GetItem(corner_pt, r29)
    dec_ref r29
    if is_error(r30) goto L21 (error at scint_condition:123) else goto L13
L13:
    r31 = object 2
    r32 = CPyNumber_Power(r30, r31)
    dec_ref r30
    if is_error(r32) goto L21 (error at scint_condition:123) else goto L14
L14:
    r33 = numpy :: module
    r34 = 'sum'
    r35 = CPyObject_GetAttr(r33, r34)
    if is_error(r35) goto L26 (error at scint_condition:123) else goto L15
L15:
    r36 = [r32]
    r37 = load_address r36
    r38 = _PyObject_Vectorcall(r35, r37, 1, 0)
    dec_ref r35
    if is_error(r38) goto L26 (error at scint_condition:123) else goto L16
L16:
    dec_ref r32
    r39 = numpy :: module
    r40 = 'sqrt'
    r41 = CPyObject_GetAttr(r39, r40)
    if is_error(r41) goto L27 (error at scint_condition:123) else goto L17
L17:
    r42 = [r38]
    r43 = load_address r42
    r44 = _PyObject_Vectorcall(r41, r43, 1, 0)
    dec_ref r41
    if is_error(r44) goto L27 (error at scint_condition:123) else goto L18
L18:
    dec_ref r38
    r45 = self.T4_radius
    r46 = PyObject_RichCompare(r44, r45, 0)
    dec_ref r44
    dec_ref r45
    if is_error(r46) goto L21 (error at scint_condition:123) else goto L19
L19:
    ret = r46
L20:
    return ret
L21:
    r47 = <error> :: object
    return r47
L22:
    dec_ref r6
    goto L21
L23:
    dec_ref r12
    goto L21
L24:
    dec_ref ret
    goto L21
L25:
    dec_ref ret
    goto L11
L26:
    dec_ref r32
    goto L21
L27:
    dec_ref r38
    goto L21

def Simulation.distance_circle(self, u, o, center, radius, quadrant):
    self :: modTof.Simulation
    u, o, center, radius, quadrant, r0, r1 :: object
    r2 :: str
    r3 :: object
    r4 :: object[2]
    r5 :: object_ptr
    r6, r7, r8, cond :: object
    r9 :: i32
    r10 :: bit
    r11 :: bool
    r12, r13, r14, D, r15 :: object
    r16 :: str
    r17 :: object
    r18 :: object[1]
    r19 :: object_ptr
    r20, r21 :: object
    r22 :: str
    r23 :: object
    r24 :: object[1]
    r25 :: object_ptr
    r26, r27, bigDelta, r28 :: object
    r29 :: str
    r30 :: object
    r31 :: str
    r32 :: object
    r33 :: object[1]
    r34 :: object_ptr
    r35, r36, r37, magDsq, r38 :: object
    r39 :: str
    r40 :: object
    r41 :: str
    r42 :: object
    r43 :: object[1]
    r44 :: object_ptr
    r45, r46, r47, magDeltasq, r48 :: object
    r49 :: str
    r50 :: object
    r51 :: object[2]
    r52 :: object_ptr
    r53, DdotDelta, r54, r55, r56, r57, r58, r59, r60, r61, r62 :: object
    r63 :: i32
    r64 :: bit
    r65 :: bool
    r66, r67, r68, r69, r70, r71, r72, r73, r74 :: object
    r75 :: str
    r76 :: object
    r77 :: object[1]
    r78 :: object_ptr
    r79, r80, sqrt_term, r81, r82, b_term, r83, rootA, r84, rootB, r85 :: object
    r86, r87 :: bit
    r88 :: object
    r89 :: str
    r90 :: object
    r91 :: object[1]
    r92 :: object_ptr
    r93, r94 :: object
    r95 :: str
    r96 :: object
    r97 :: object[1]
    r98 :: object_ptr
    r99, r100 :: object
    r101 :: i32
    r102 :: bit
    r103 :: bool
    r104 :: object
    r105 :: str
    r106 :: object
    r107 :: object[1]
    r108 :: object_ptr
    r109, r110, r111 :: object
    r112 :: str
    r113 :: object
    r114 :: object[1]
    r115 :: object_ptr
    r116, r117, r118, r119 :: object
    r120 :: i32
    r121 :: bit
    r122 :: bool
    r123 :: object
    r124 :: str
    r125 :: object
    r126 :: object[1]
    r127 :: object_ptr
    r128, r129, r130 :: object
    r131 :: str
    r132 :: object
    r133 :: object[1]
    r134 :: object_ptr
    r135, r136 :: object
L0:
    if is_error(quadrant) goto L1 else goto L73
L1:
    r0 = box(bool, 0)
    inc_ref r0
    quadrant = r0
L2:
    r1 = numpy :: module
    r2 = 'dot'
    r3 = CPyObject_GetAttr(r1, r2)
    if is_error(r3) goto L74 (error at distance_circle:131) else goto L3
L3:
    r4 = [u, o]
    r5 = load_address r4
    r6 = _PyObject_Vectorcall(r3, r5, 2, 0)
    dec_ref r3
    if is_error(r6) goto L74 (error at distance_circle:131) else goto L4
L4:
    r7 = object 0
    r8 = PyObject_RichCompare(r6, r7, 0)
    dec_ref r6
    if is_error(r8) goto L74 (error at distance_circle:131) else goto L5
L5:
    cond = r8
    r9 = PyObject_IsTrue(cond)
    r10 = r9 >= 0 :: signed
    if not r10 goto L75 (error at distance_circle:131) else goto L6 :: bool
L6:
    r11 = truncate r9: i32 to builtins.bool
    if r11 goto L7 else goto L9 :: bool
L7:
    r12 = object -1
    r13 = PyNumber_Multiply(u, r12)
    if is_error(r13) goto L75 (error at distance_circle:132) else goto L8
L8:
    r14 = r13
    goto L10
L9:
    inc_ref u
    r14 = u
L10:
    D = r14
    r15 = numpy :: module
    r16 = 'array'
    r17 = CPyObject_GetAttr(r15, r16)
    if is_error(r17) goto L76 (error at distance_circle:133) else goto L11
L11:
    r18 = [o]
    r19 = load_address r18
    r20 = _PyObject_Vectorcall(r17, r19, 1, 0)
    dec_ref r17
    if is_error(r20) goto L76 (error at distance_circle:133) else goto L12
L12:
    r21 = numpy :: module
    r22 = 'array'
    r23 = CPyObject_GetAttr(r21, r22)
    if is_error(r23) goto L77 (error at distance_circle:133) else goto L13
L13:
    r24 = [center]
    r25 = load_address r24
    r26 = _PyObject_Vectorcall(r23, r25, 1, 0)
    dec_ref r23
    if is_error(r26) goto L77 (error at distance_circle:133) else goto L14
L14:
    r27 = PyNumber_Subtract(r20, r26)
    dec_ref r20
    dec_ref r26
    if is_error(r27) goto L76 (error at distance_circle:133) else goto L15
L15:
    bigDelta = r27
    r28 = numpy :: module
    r29 = 'linalg'
    r30 = CPyObject_GetAttr(r28, r29)
    if is_error(r30) goto L78 (error at distance_circle:134) else goto L16
L16:
    r31 = 'norm'
    r32 = CPyObject_GetAttr(r30, r31)
    dec_ref r30
    if is_error(r32) goto L78 (error at distance_circle:134) else goto L17
L17:
    r33 = [D]
    r34 = load_address r33
    r35 = _PyObject_Vectorcall(r32, r34, 1, 0)
    dec_ref r32
    if is_error(r35) goto L78 (error at distance_circle:134) else goto L18
L18:
    r36 = object 2
    r37 = CPyNumber_Power(r35, r36)
    dec_ref r35
    if is_error(r37) goto L78 (error at distance_circle:134) else goto L19
L19:
    magDsq = r37
    r38 = numpy :: module
    r39 = 'linalg'
    r40 = CPyObject_GetAttr(r38, r39)
    if is_error(r40) goto L79 (error at distance_circle:135) else goto L20
L20:
    r41 = 'norm'
    r42 = CPyObject_GetAttr(r40, r41)
    dec_ref r40
    if is_error(r42) goto L79 (error at distance_circle:135) else goto L21
L21:
    r43 = [bigDelta]
    r44 = load_address r43
    r45 = _PyObject_Vectorcall(r42, r44, 1, 0)
    dec_ref r42
    if is_error(r45) goto L79 (error at distance_circle:135) else goto L22
L22:
    r46 = object 2
    r47 = CPyNumber_Power(r45, r46)
    dec_ref r45
    if is_error(r47) goto L79 (error at distance_circle:135) else goto L23
L23:
    magDeltasq = r47
    r48 = numpy :: module
    r49 = 'dot'
    r50 = CPyObject_GetAttr(r48, r49)
    if is_error(r50) goto L80 (error at distance_circle:136) else goto L24
L24:
    r51 = [D, bigDelta]
    r52 = load_address r51
    r53 = _PyObject_Vectorcall(r50, r52, 2, 0)
    dec_ref r50
    if is_error(r53) goto L80 (error at distance_circle:136) else goto L25
L25:
    dec_ref D
    dec_ref bigDelta
    DdotDelta = r53
    r54 = object 2
    r55 = CPyNumber_Power(DdotDelta, r54)
    if is_error(r55) goto L81 (error at distance_circle:137) else goto L26
L26:
    r56 = object 2
    r57 = CPyNumber_Power(radius, r56)
    if is_error(r57) goto L82 (error at distance_circle:137) else goto L27
L27:
    r58 = PyNumber_Subtract(magDeltasq, r57)
    dec_ref r57
    if is_error(r58) goto L82 (error at distance_circle:137) else goto L28
L28:
    r59 = PyNumber_Multiply(magDsq, r58)
    dec_ref r58
    if is_error(r59) goto L82 (error at distance_circle:137) else goto L29
L29:
    r60 = PyNumber_Subtract(r55, r59)
    dec_ref r55
    dec_ref r59
    if is_error(r60) goto L81 (error at distance_circle:137) else goto L30
L30:
    r61 = object 0
    r62 = PyObject_RichCompare(r60, r61, 0)
    dec_ref r60
    if is_error(r62) goto L81 (error at distance_circle:137) else goto L31
L31:
    r63 = PyObject_IsTrue(r62)
    dec_ref r62
    r64 = r63 >= 0 :: signed
    if not r64 goto L81 (error at distance_circle:137) else goto L32 :: bool
L32:
    r65 = truncate r63: i32 to builtins.bool
    if r65 goto L83 else goto L34 :: bool
L33:
    r66 = object 100
    inc_ref r66
    return r66
L34:
    r67 = object 2
    r68 = CPyNumber_Power(DdotDelta, r67)
    if is_error(r68) goto L81 (error at distance_circle:139) else goto L35
L35:
    r69 = object 2
    r70 = CPyNumber_Power(radius, r69)
    if is_error(r70) goto L84 (error at distance_circle:139) else goto L36
L36:
    r71 = PyNumber_Subtract(magDeltasq, r70)
    dec_ref magDeltasq
    dec_ref r70
    if is_error(r71) goto L85 (error at distance_circle:139) else goto L37
L37:
    r72 = PyNumber_Multiply(magDsq, r71)
    dec_ref r71
    if is_error(r72) goto L85 (error at distance_circle:139) else goto L38
L38:
    r73 = PyNumber_Subtract(r68, r72)
    dec_ref r68
    dec_ref r72
    if is_error(r73) goto L86 (error at distance_circle:139) else goto L39
L39:
    r74 = numpy :: module
    r75 = 'sqrt'
    r76 = CPyObject_GetAttr(r74, r75)
    if is_error(r76) goto L87 (error at distance_circle:139) else goto L40
L40:
    r77 = [r73]
    r78 = load_address r77
    r79 = _PyObject_Vectorcall(r76, r78, 1, 0)
    dec_ref r76
    if is_error(r79) goto L87 (error at distance_circle:139) else goto L41
L41:
    dec_ref r73
    r80 = PyNumber_TrueDivide(r79, magDsq)
    dec_ref r79
    if is_error(r80) goto L86 (error at distance_circle:139) else goto L42
L42:
    sqrt_term = r80
    r81 = PyNumber_Negative(DdotDelta)
    dec_ref DdotDelta
    if is_error(r81) goto L88 (error at distance_circle:140) else goto L43
L43:
    r82 = PyNumber_TrueDivide(r81, magDsq)
    dec_ref r81
    dec_ref magDsq
    if is_error(r82) goto L89 (error at distance_circle:140) else goto L44
L44:
    b_term = r82
    r83 = PyNumber_Subtract(b_term, sqrt_term)
    if is_error(r83) goto L90 (error at distance_circle:141) else goto L45
L45:
    rootA = r83
    r84 = PyNumber_Add(b_term, sqrt_term)
    dec_ref b_term
    dec_ref sqrt_term
    if is_error(r84) goto L91 (error at distance_circle:142) else goto L46
L46:
    rootB = r84
    r85 = box(bool, 0)
    r86 = quadrant == r85
    dec_ref quadrant
    r87 = r86 ^ 1
    if r87 goto L92 else goto L61 :: bool
L47:
    r88 = numpy :: module
    r89 = 'abs'
    r90 = CPyObject_GetAttr(r88, r89)
    if is_error(r90) goto L93 (error at distance_circle:144) else goto L48
L48:
    r91 = [rootA]
    r92 = load_address r91
    r93 = _PyObject_Vectorcall(r90, r92, 1, 0)
    dec_ref r90
    if is_error(r93) goto L93 (error at distance_circle:144) else goto L49
L49:
    r94 = numpy :: module
    r95 = 'abs'
    r96 = CPyObject_GetAttr(r94, r95)
    if is_error(r96) goto L94 (error at distance_circle:144) else goto L50
L50:
    r97 = [rootB]
    r98 = load_address r97
    r99 = _PyObject_Vectorcall(r96, r98, 1, 0)
    dec_ref r96
    if is_error(r99) goto L94 (error at distance_circle:144) else goto L51
L51:
    r100 = PyObject_RichCompare(r93, r99, 4)
    dec_ref r93
    dec_ref r99
    if is_error(r100) goto L93 (error at distance_circle:144) else goto L52
L52:
    r101 = PyObject_IsTrue(r100)
    dec_ref r100
    r102 = r101 >= 0 :: signed
    if not r102 goto L93 (error at distance_circle:144) else goto L53 :: bool
L53:
    r103 = truncate r101: i32 to builtins.bool
    if r103 goto L95 else goto L96 :: bool
L54:
    r104 = numpy :: module
    r105 = 'abs'
    r106 = CPyObject_GetAttr(r104, r105)
    if is_error(r106) goto L97 (error at distance_circle:144) else goto L55
L55:
    r107 = [rootA]
    r108 = load_address r107
    r109 = _PyObject_Vectorcall(r106, r108, 1, 0)
    dec_ref r106
    if is_error(r109) goto L97 (error at distance_circle:144) else goto L56
L56:
    dec_ref rootA
    r110 = r109
    goto L60
L57:
    r111 = numpy :: module
    r112 = 'abs'
    r113 = CPyObject_GetAttr(r111, r112)
    if is_error(r113) goto L98 (error at distance_circle:144) else goto L58
L58:
    r114 = [rootB]
    r115 = load_address r114
    r116 = _PyObject_Vectorcall(r113, r115, 1, 0)
    dec_ref r113
    if is_error(r116) goto L98 (error at distance_circle:144) else goto L59
L59:
    dec_ref rootB
    r110 = r116
L60:
    return r110
L61:
    r117 = object 0
    r118 = PyObject_RichCompare(rootA, r117, 0)
    if is_error(r118) goto L99 (error at distance_circle:145) else goto L62
L62:
    r119 = PyNumber_And(r118, cond)
    dec_ref r118
    dec_ref cond
    if is_error(r119) goto L93 (error at distance_circle:145) else goto L63
L63:
    r120 = PyObject_IsTrue(r119)
    dec_ref r119
    r121 = r120 >= 0 :: signed
    if not r121 goto L93 (error at distance_circle:145) else goto L64 :: bool
L64:
    r122 = truncate r120: i32 to builtins.bool
    if r122 goto L100 else goto L101 :: bool
L65:
    r123 = numpy :: module
    r124 = 'abs'
    r125 = CPyObject_GetAttr(r123, r124)
    if is_error(r125) goto L97 (error at distance_circle:145) else goto L66
L66:
    r126 = [rootA]
    r127 = load_address r126
    r128 = _PyObject_Vectorcall(r125, r127, 1, 0)
    dec_ref r125
    if is_error(r128) goto L97 (error at distance_circle:145) else goto L67
L67:
    dec_ref rootA
    r129 = r128
    goto L71
L68:
    r130 = numpy :: module
    r131 = 'abs'
    r132 = CPyObject_GetAttr(r130, r131)
    if is_error(r132) goto L98 (error at distance_circle:145) else goto L69
L69:
    r133 = [rootB]
    r134 = load_address r133
    r135 = _PyObject_Vectorcall(r132, r134, 1, 0)
    dec_ref r132
    if is_error(r135) goto L98 (error at distance_circle:145) else goto L70
L70:
    dec_ref rootB
    r129 = r135
L71:
    return r129
L72:
    r136 = <error> :: object
    return r136
L73:
    inc_ref quadrant
    goto L2
L74:
    dec_ref quadrant
    goto L72
L75:
    dec_ref quadrant
    dec_ref cond
    goto L72
L76:
    dec_ref quadrant
    dec_ref cond
    dec_ref D
    goto L72
L77:
    dec_ref quadrant
    dec_ref cond
    dec_ref D
    dec_ref r20
    goto L72
L78:
    dec_ref quadrant
    dec_ref cond
    dec_ref D
    dec_ref bigDelta
    goto L72
L79:
    dec_ref quadrant
    dec_ref cond
    dec_ref D
    dec_ref bigDelta
    dec_ref magDsq
    goto L72
L80:
    dec_ref quadrant
    dec_ref cond
    dec_ref D
    dec_ref bigDelta
    dec_ref magDsq
    dec_ref magDeltasq
    goto L72
L81:
    dec_ref quadrant
    dec_ref cond
    dec_ref magDsq
    dec_ref magDeltasq
    dec_ref DdotDelta
    goto L72
L82:
    dec_ref quadrant
    dec_ref cond
    dec_ref magDsq
    dec_ref magDeltasq
    dec_ref DdotDelta
    dec_ref r55
    goto L72
L83:
    dec_ref quadrant
    dec_ref cond
    dec_ref magDsq
    dec_ref magDeltasq
    dec_ref DdotDelta
    goto L33
L84:
    dec_ref quadrant
    dec_ref cond
    dec_ref magDsq
    dec_ref magDeltasq
    dec_ref DdotDelta
    dec_ref r68
    goto L72
L85:
    dec_ref quadrant
    dec_ref cond
    dec_ref magDsq
    dec_ref DdotDelta
    dec_ref r68
    goto L72
L86:
    dec_ref quadrant
    dec_ref cond
    dec_ref magDsq
    dec_ref DdotDelta
    goto L72
L87:
    dec_ref quadrant
    dec_ref cond
    dec_ref magDsq
    dec_ref DdotDelta
    dec_ref r73
    goto L72
L88:
    dec_ref quadrant
    dec_ref cond
    dec_ref magDsq
    dec_ref sqrt_term
    goto L72
L89:
    dec_ref quadrant
    dec_ref cond
    dec_ref sqrt_term
    goto L72
L90:
    dec_ref quadrant
    dec_ref cond
    dec_ref sqrt_term
    dec_ref b_term
    goto L72
L91:
    dec_ref quadrant
    dec_ref cond
    dec_ref rootA
    goto L72
L92:
    dec_ref cond
    goto L47
L93:
    dec_ref rootA
    dec_ref rootB
    goto L72
L94:
    dec_ref rootA
    dec_ref rootB
    dec_ref r93
    goto L72
L95:
    dec_ref rootB
    goto L54
L96:
    dec_ref rootA
    goto L57
L97:
    dec_ref rootA
    goto L72
L98:
    dec_ref rootB
    goto L72
L99:
    dec_ref cond
    dec_ref rootA
    dec_ref rootB
    goto L72
L100:
    dec_ref rootB
    goto L65
L101:
    dec_ref rootA
    goto L68

def Simulation.distance_plane(self, u, o, plane, dim):
    self :: modTof.Simulation
    u, o, plane, dim, r0, r1 :: object
    r2 :: i32
    r3 :: bit
    r4 :: bool
    r5, r6, r7 :: object
    r8 :: i32
    r9 :: bit
    r10 :: bool
    r11, r12, r13, r14, r15, d_plane, r16, r17, r18, r19, r20 :: object
    r21 :: str
    r22 :: object
    r23 :: object[1]
    r24 :: object_ptr
    r25, r26 :: object
L0:
    r0 = object 2
    r1 = PyObject_RichCompare(dim, r0, 2)
    if is_error(r1) goto L20 (error at distance_plane:149) else goto L1
L1:
    r2 = PyObject_IsTrue(r1)
    dec_ref r1
    r3 = r2 >= 0 :: signed
    if not r3 goto L20 (error at distance_plane:149) else goto L2 :: bool
L2:
    r4 = truncate r2: i32 to builtins.bool
    if r4 goto L3 else goto L12 :: bool
L3:
    r5 = PyObject_GetItem(u, dim)
    if is_error(r5) goto L20 (error at distance_plane:150) else goto L4
L4:
    r6 = object 0
    r7 = PyObject_RichCompare(r5, r6, 0)
    dec_ref r5
    if is_error(r7) goto L20 (error at distance_plane:150) else goto L5
L5:
    r8 = PyObject_IsTrue(r7)
    dec_ref r7
    r9 = r8 >= 0 :: signed
    if not r9 goto L20 (error at distance_plane:150) else goto L6 :: bool
L6:
    r10 = truncate r8: i32 to builtins.bool
    if r10 goto L7 else goto L9 :: bool
L7:
    r11 = object 0
    r12 = PyObject_GetItem(plane, r11)
    if is_error(r12) goto L20 (error at distance_plane:150) else goto L8
L8:
    r13 = r12
    goto L11
L9:
    r14 = object 1
    r15 = PyObject_GetItem(plane, r14)
    if is_error(r15) goto L20 (error at distance_plane:150) else goto L10
L10:
    r13 = r15
L11:
    d_plane = r13
    goto L13
L12:
    inc_ref plane
    d_plane = plane
L13:
    r16 = PyObject_GetItem(o, dim)
    if is_error(r16) goto L21 (error at distance_plane:153) else goto L14
L14:
    r17 = PyNumber_Subtract(d_plane, r16)
    dec_ref d_plane
    dec_ref r16
    if is_error(r17) goto L20 (error at distance_plane:153) else goto L15
L15:
    r18 = PyObject_GetItem(u, dim)
    if is_error(r18) goto L22 (error at distance_plane:153) else goto L16
L16:
    r19 = PyNumber_TrueDivide(r17, r18)
    dec_ref r17
    dec_ref r18
    if is_error(r19) goto L20 (error at distance_plane:153) else goto L17
L17:
    r20 = numpy :: module
    r21 = 'abs'
    r22 = CPyObject_GetAttr(r20, r21)
    if is_error(r22) goto L23 (error at distance_plane:153) else goto L18
L18:
    r23 = [r19]
    r24 = load_address r23
    r25 = _PyObject_Vectorcall(r22, r24, 1, 0)
    dec_ref r22
    if is_error(r25) goto L23 (error at distance_plane:153) else goto L19
L19:
    dec_ref r19
    return r25
L20:
    r26 = <error> :: object
    return r26
L21:
    dec_ref d_plane
    goto L20
L22:
    dec_ref r17
    goto L20
L23:
    dec_ref r19
    goto L20

def Simulation.distance_solver(self, u, o, center, radius, plane_z, corner_center, corner_radius, pmt_center, pmt_radius):
    self :: modTof.Simulation
    u, o, center, radius, plane_z, corner_center, corner_radius, pmt_center, pmt_radius, r0, r1, dcircle, r2, r3, dplane_z, r4 :: object
    r5 :: i32
    r6 :: bit
    r7 :: bool
    r8, dist, r9, r10, temp_o, r11, PMT_cond, r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25, r26, r27, r28, r29, r30, r31, r32, r33, r34, r35, r36, r37, r38, r39, r40 :: object
    r41 :: i32
    r42 :: bit
    r43 :: bool
    r44, r45, dplanex, r46, r47, r48, dplaney, r49, r50, dplanez, r51, r52, dcorner :: object
    r53 :: list
    r54, r55, r56, r57, r58 :: ptr
    r59 :: object
    r60 :: str
    r61 :: object
    r62 :: object[1]
    r63 :: object_ptr
    r64, light_guide_dist, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84, r85, r86, r87, r88, r89, r90, r91, r92 :: object
    r93 :: i32
    r94 :: bit
    r95 :: bool
    r96 :: object
    r97 :: tuple[object, object]
    r98, r99, r100, r101, r102, r103, r104, r105, r106, r107, r108, r109, r110, r111, r112, r113, r114, r115, r116, r117, r118, r119, r120, r121, r122, r123, r124, r125, r126, r127 :: object
    r128 :: i32
    r129 :: bit
    r130 :: bool
    r131, r132, r133, r134, r135, r136, r137, r138, r139 :: object
    r140 :: list
    r141, r142, r143, r144, r145 :: ptr
    r146 :: object
    r147 :: str
    r148 :: object
    r149 :: object[1]
    r150 :: object_ptr
    r151, r152, r153, r154, r155, r156, r157, r158, r159, r160, r161, r162, r163, r164, r165, r166, r167, r168, r169, r170, r171, r172, r173, r174, r175, r176, r177, r178, r179 :: object
    r180 :: i32
    r181 :: bit
    r182 :: bool
    r183 :: object
    r184 :: tuple[object, object]
    r185 :: object
    r186 :: tuple[object, object]
    r187, r188 :: object
L0:
    r0 = <error> :: object
    r1 = self.distance_circle(u, o, center, radius, r0)
    if is_error(r1) goto L108 (error at distance_solver:158) else goto L1
L1:
    dcircle = r1
    r2 = object 2
    r3 = self.distance_plane(u, o, plane_z, r2)
    if is_error(r3) goto L109 (error at distance_solver:159) else goto L2
L2:
    dplane_z = r3
    r4 = PyObject_RichCompare(dcircle, dplane_z, 4)
    if is_error(r4) goto L110 (error at distance_solver:160) else goto L3
L3:
    r5 = PyObject_IsTrue(r4)
    dec_ref r4
    r6 = r5 >= 0 :: signed
    if not r6 goto L110 (error at distance_solver:160) else goto L4 :: bool
L4:
    r7 = truncate r5: i32 to builtins.bool
    if r7 goto L111 else goto L112 :: bool
L5:
    r8 = dplane_z
    goto L7
L6:
    r8 = dcircle
L7:
    dist = r8
    r9 = PyNumber_Multiply(dist, u)
    if is_error(r9) goto L113 (error at distance_solver:161) else goto L8
L8:
    r10 = PyNumber_Add(o, r9)
    dec_ref r9
    if is_error(r10) goto L113 (error at distance_solver:161) else goto L9
L9:
    temp_o = r10
    r11 = box(bool, 0)
    inc_ref r11
    PMT_cond = r11
    r12 = object 0
    r13 = PyObject_GetItem(pmt_center, r12)
    if is_error(r13) goto L114 (error at distance_solver:163) else goto L10
L10:
    r14 = object 0
    r15 = PyObject_RichCompare(r13, r14, 4)
    dec_ref r13
    if is_error(r15) goto L114 (error at distance_solver:163) else goto L11
L11:
    r16 = object 0
    r17 = PyObject_GetItem(temp_o, r16)
    if is_error(r17) goto L115 (error at distance_solver:163) else goto L12
L12:
    r18 = object 0
    r19 = PyObject_RichCompare(r17, r18, 4)
    dec_ref r17
    if is_error(r19) goto L115 (error at distance_solver:163) else goto L13
L13:
    r20 = PyNumber_And(r15, r19)
    dec_ref r15
    dec_ref r19
    if is_error(r20) goto L114 (error at distance_solver:163) else goto L14
L14:
    r21 = object 1
    r22 = PyObject_GetItem(temp_o, r21)
    if is_error(r22) goto L116 (error at distance_solver:163) else goto L15
L15:
    r23 = object 0
    r24 = PyObject_RichCompare(r22, r23, 0)
    dec_ref r22
    if is_error(r24) goto L116 (error at distance_solver:163) else goto L16
L16:
    r25 = PyNumber_And(r20, r24)
    dec_ref r20
    dec_ref r24
    if is_error(r25) goto L114 (error at distance_solver:163) else goto L17
L17:
    r26 = object 0
    r27 = PyObject_GetItem(temp_o, r26)
    if is_error(r27) goto L117 (error at distance_solver:163) else goto L18
L18:
    r28 = object 2
    r29 = CPyNumber_Power(r27, r28)
    dec_ref r27
    if is_error(r29) goto L117 (error at distance_solver:163) else goto L19
L19:
    r30 = object 1
    r31 = PyObject_GetItem(temp_o, r30)
    if is_error(r31) goto L118 (error at distance_solver:163) else goto L20
L20:
    r32 = object 2
    r33 = CPyNumber_Power(r31, r32)
    dec_ref r31
    if is_error(r33) goto L118 (error at distance_solver:163) else goto L21
L21:
    r34 = PyNumber_Add(r29, r33)
    dec_ref r29
    dec_ref r33
    if is_error(r34) goto L117 (error at distance_solver:163) else goto L22
L22:
    r35 = object 2
    r36 = CPyNumber_Power(radius, r35)
    if is_error(r36) goto L119 (error at distance_solver:163) else goto L23
L23:
    r37 = object 1
    r38 = PyNumber_Subtract(r36, r37)
    dec_ref r36
    if is_error(r38) goto L119 (error at distance_solver:163) else goto L24
L24:
    r39 = PyObject_RichCompare(r34, r38, 5)
    dec_ref r34
    dec_ref r38
    if is_error(r39) goto L117 (error at distance_solver:163) else goto L25
L25:
    r40 = PyNumber_And(r25, r39)
    dec_ref r25
    dec_ref r39
    if is_error(r40) goto L114 (error at distance_solver:163) else goto L26
L26:
    r41 = PyObject_IsTrue(r40)
    dec_ref r40
    r42 = r41 >= 0 :: signed
    if not r42 goto L114 (error at distance_solver:163) else goto L27 :: bool
L27:
    r43 = truncate r41: i32 to builtins.bool
    if r43 goto L120 else goto L58 :: bool
L28:
    r44 = object 0
    r45 = self.distance_plane(u, o, radius, r44)
    if is_error(r45) goto L121 (error at distance_solver:164) else goto L29
L29:
    dplanex = r45
    r46 = PyNumber_Negative(radius)
    if is_error(r46) goto L122 (error at distance_solver:165) else goto L30
L30:
    r47 = object 1
    r48 = self.distance_plane(u, o, r46, r47)
    dec_ref r46
    if is_error(r48) goto L122 (error at distance_solver:165) else goto L31
L31:
    dplaney = r48
    r49 = object 2
    r50 = self.distance_plane(u, o, plane_z, r49)
    if is_error(r50) goto L123 (error at distance_solver:166) else goto L32
L32:
    dplanez = r50
    r51 = box(bool, 1)
    r52 = self.distance_circle(u, o, corner_center, corner_radius, r51)
    if is_error(r52) goto L124 (error at distance_solver:167) else goto L33
L33:
    dcorner = r52
    r53 = PyList_New(4)
    if is_error(r53) goto L125 (error at distance_solver:168) else goto L34
L34:
    r54 = get_element_ptr r53 ob_item :: PyListObject
    r55 = load_mem r54 :: ptr*
    set_mem r55, dplanex :: builtins.object*
    r56 = r55 + 8
    set_mem r56, dplaney :: builtins.object*
    r57 = r55 + 16
    set_mem r57, dplanez :: builtins.object*
    r58 = r55 + 24
    set_mem r58, dcorner :: builtins.object*
    r59 = numpy :: module
    r60 = 'min'
    r61 = CPyObject_GetAttr(r59, r60)
    if is_error(r61) goto L126 (error at distance_solver:168) else goto L35
L35:
    r62 = [r53]
    r63 = load_address r62
    r64 = _PyObject_Vectorcall(r61, r63, 1, 0)
    dec_ref r61
    if is_error(r64) goto L126 (error at distance_solver:168) else goto L36
L36:
    dec_ref r53
    light_guide_dist = r64
    r65 = PyNumber_Multiply(light_guide_dist, u)
    if is_error(r65) goto L127 (error at distance_solver:169) else goto L37
L37:
    r66 = PyNumber_Add(o, r65)
    dec_ref r65
    if is_error(r66) goto L127 (error at distance_solver:169) else goto L38
L38:
    temp_o = r66
    r67 = object 2
    r68 = PyObject_GetItem(temp_o, r67)
    if is_error(r68) goto L128 (error at distance_solver:171) else goto L39
L39:
    r69 = object 0
    r70 = PyObject_GetItem(plane_z, r69)
    if is_error(r70) goto L129 (error at distance_solver:171) else goto L40
L40:
    r71 = box(float, 0.01)
    r72 = PyNumber_Add(r70, r71)
    dec_ref r70
    dec_ref r71
    if is_error(r72) goto L129 (error at distance_solver:171) else goto L41
L41:
    r73 = PyObject_RichCompare(r68, r72, 0)
    dec_ref r68
    dec_ref r72
    if is_error(r73) goto L128 (error at distance_solver:171) else goto L42
L42:
    r74 = object 0
    r75 = PyObject_GetItem(temp_o, r74)
    if is_error(r75) goto L130 (error at distance_solver:171) else goto L43
L43:
    r76 = object 0
    r77 = PyObject_GetItem(pmt_center, r76)
    if is_error(r77) goto L131 (error at distance_solver:171) else goto L44
L44:
    r78 = PyNumber_Subtract(r75, r77)
    dec_ref r75
    dec_ref r77
    if is_error(r78) goto L130 (error at distance_solver:171) else goto L45
L45:
    r79 = object 2
    r80 = CPyNumber_Power(r78, r79)
    dec_ref r78
    if is_error(r80) goto L130 (error at distance_solver:171) else goto L46
L46:
    r81 = object 1
    r82 = PyObject_GetItem(temp_o, r81)
    dec_ref temp_o
    if is_error(r82) goto L132 (error at distance_solver:171) else goto L47
L47:
    r83 = object 1
    r84 = PyObject_GetItem(pmt_center, r83)
    if is_error(r84) goto L133 (error at distance_solver:171) else goto L48
L48:
    r85 = PyNumber_Subtract(r82, r84)
    dec_ref r82
    dec_ref r84
    if is_error(r85) goto L132 (error at distance_solver:171) else goto L49
L49:
    r86 = object 2
    r87 = CPyNumber_Power(r85, r86)
    dec_ref r85
    if is_error(r87) goto L132 (error at distance_solver:171) else goto L50
L50:
    r88 = PyNumber_Add(r80, r87)
    dec_ref r80
    dec_ref r87
    if is_error(r88) goto L134 (error at distance_solver:171) else goto L51
L51:
    r89 = object 2
    r90 = CPyNumber_Power(pmt_radius, r89)
    if is_error(r90) goto L135 (error at distance_solver:171) else goto L52
L52:
    r91 = PyObject_RichCompare(r88, r90, 1)
    dec_ref r88
    dec_ref r90
    if is_error(r91) goto L134 (error at distance_solver:171) else goto L53
L53:
    r92 = PyNumber_And(r73, r91)
    dec_ref r73
    dec_ref r91
    if is_error(r92) goto L127 (error at distance_solver:171) else goto L54
L54:
    r93 = PyObject_IsTrue(r92)
    dec_ref r92
    r94 = r93 >= 0 :: signed
    if not r94 goto L127 (error at distance_solver:171) else goto L55 :: bool
L55:
    r95 = truncate r93: i32 to builtins.bool
    if r95 goto L136 else goto L57 :: bool
L56:
    r96 = box(bool, 1)
    inc_ref r96
    PMT_cond = r96
L57:
    r97 = (light_guide_dist, PMT_cond)
    dec_ref light_guide_dist
    dec_ref PMT_cond
    r98 = box(tuple[object, object], r97)
    return r98
L58:
    r99 = object 0
    r100 = PyObject_GetItem(pmt_center, r99)
    if is_error(r100) goto L114 (error at distance_solver:174) else goto L59
L59:
    r101 = object 0
    r102 = PyObject_RichCompare(r100, r101, 0)
    dec_ref r100
    if is_error(r102) goto L114 (error at distance_solver:174) else goto L60
L60:
    r103 = object 0
    r104 = PyObject_GetItem(temp_o, r103)
    if is_error(r104) goto L137 (error at distance_solver:174) else goto L61
L61:
    r105 = object 0
    r106 = PyObject_RichCompare(r104, r105, 0)
    dec_ref r104
    if is_error(r106) goto L137 (error at distance_solver:174) else goto L62
L62:
    r107 = PyNumber_And(r102, r106)
    dec_ref r102
    dec_ref r106
    if is_error(r107) goto L114 (error at distance_solver:174) else goto L63
L63:
    r108 = object 1
    r109 = PyObject_GetItem(temp_o, r108)
    if is_error(r109) goto L138 (error at distance_solver:174) else goto L64
L64:
    r110 = object 0
    r111 = PyObject_RichCompare(r109, r110, 4)
    dec_ref r109
    if is_error(r111) goto L138 (error at distance_solver:174) else goto L65
L65:
    r112 = PyNumber_And(r107, r111)
    dec_ref r107
    dec_ref r111
    if is_error(r112) goto L114 (error at distance_solver:174) else goto L66
L66:
    r113 = object 0
    r114 = PyObject_GetItem(temp_o, r113)
    if is_error(r114) goto L139 (error at distance_solver:174) else goto L67
L67:
    r115 = object 2
    r116 = CPyNumber_Power(r114, r115)
    dec_ref r114
    if is_error(r116) goto L139 (error at distance_solver:174) else goto L68
L68:
    r117 = object 1
    r118 = PyObject_GetItem(temp_o, r117)
    dec_ref temp_o
    if is_error(r118) goto L140 (error at distance_solver:174) else goto L69
L69:
    r119 = object 2
    r120 = CPyNumber_Power(r118, r119)
    dec_ref r118
    if is_error(r120) goto L140 (error at distance_solver:174) else goto L70
L70:
    r121 = PyNumber_Add(r116, r120)
    dec_ref r116
    dec_ref r120
    if is_error(r121) goto L141 (error at distance_solver:174) else goto L71
L71:
    r122 = object 2
    r123 = CPyNumber_Power(radius, r122)
    if is_error(r123) goto L142 (error at distance_solver:174) else goto L72
L72:
    r124 = object 1
    r125 = PyNumber_Subtract(r123, r124)
    dec_ref r123
    if is_error(r125) goto L142 (error at distance_solver:174) else goto L73
L73:
    r126 = PyObject_RichCompare(r121, r125, 5)
    dec_ref r121
    dec_ref r125
    if is_error(r126) goto L141 (error at distance_solver:174) else goto L74
L74:
    r127 = PyNumber_And(r112, r126)
    dec_ref r112
    dec_ref r126
    if is_error(r127) goto L143 (error at distance_solver:174) else goto L75
L75:
    r128 = PyObject_IsTrue(r127)
    dec_ref r127
    r129 = r128 >= 0 :: signed
    if not r129 goto L143 (error at distance_solver:174) else goto L76 :: bool
L76:
    r130 = truncate r128: i32 to builtins.bool
    if r130 goto L144 else goto L107 :: bool
L77:
    r131 = PyNumber_Negative(radius)
    if is_error(r131) goto L121 (error at distance_solver:175) else goto L78
L78:
    r132 = object 0
    r133 = self.distance_plane(u, o, r131, r132)
    dec_ref r131
    if is_error(r133) goto L121 (error at distance_solver:175) else goto L79
L79:
    dplanex = r133
    r134 = object 1
    r135 = self.distance_plane(u, o, radius, r134)
    if is_error(r135) goto L122 (error at distance_solver:176) else goto L80
L80:
    dplaney = r135
    r136 = object 2
    r137 = self.distance_plane(u, o, plane_z, r136)
    if is_error(r137) goto L123 (error at distance_solver:177) else goto L81
L81:
    dplanez = r137
    r138 = box(bool, 1)
    r139 = self.distance_circle(u, o, corner_center, corner_radius, r138)
    if is_error(r139) goto L124 (error at distance_solver:178) else goto L82
L82:
    dcorner = r139
    r140 = PyList_New(4)
    if is_error(r140) goto L125 (error at distance_solver:179) else goto L83
L83:
    r141 = get_element_ptr r140 ob_item :: PyListObject
    r142 = load_mem r141 :: ptr*
    set_mem r142, dplanex :: builtins.object*
    r143 = r142 + 8
    set_mem r143, dplaney :: builtins.object*
    r144 = r142 + 16
    set_mem r144, dplanez :: builtins.object*
    r145 = r142 + 24
    set_mem r145, dcorner :: builtins.object*
    r146 = numpy :: module
    r147 = 'min'
    r148 = CPyObject_GetAttr(r146, r147)
    if is_error(r148) goto L145 (error at distance_solver:179) else goto L84
L84:
    r149 = [r140]
    r150 = load_address r149
    r151 = _PyObject_Vectorcall(r148, r150, 1, 0)
    dec_ref r148
    if is_error(r151) goto L145 (error at distance_solver:179) else goto L85
L85:
    dec_ref r140
    light_guide_dist = r151
    r152 = PyNumber_Multiply(light_guide_dist, u)
    if is_error(r152) goto L127 (error at distance_solver:180) else goto L86
L86:
    r153 = PyNumber_Add(o, r152)
    dec_ref r152
    if is_error(r153) goto L127 (error at distance_solver:180) else goto L87
L87:
    temp_o = r153
    r154 = object 2
    r155 = PyObject_GetItem(temp_o, r154)
    if is_error(r155) goto L128 (error at distance_solver:182) else goto L88
L88:
    r156 = object 0
    r157 = PyObject_GetItem(plane_z, r156)
    if is_error(r157) goto L146 (error at distance_solver:182) else goto L89
L89:
    r158 = box(float, 0.01)
    r159 = PyNumber_Add(r157, r158)
    dec_ref r157
    dec_ref r158
    if is_error(r159) goto L146 (error at distance_solver:182) else goto L90
L90:
    r160 = PyObject_RichCompare(r155, r159, 0)
    dec_ref r155
    dec_ref r159
    if is_error(r160) goto L128 (error at distance_solver:182) else goto L91
L91:
    r161 = object 0
    r162 = PyObject_GetItem(temp_o, r161)
    if is_error(r162) goto L147 (error at distance_solver:182) else goto L92
L92:
    r163 = object 0
    r164 = PyObject_GetItem(pmt_center, r163)
    if is_error(r164) goto L148 (error at distance_solver:182) else goto L93
L93:
    r165 = PyNumber_Subtract(r162, r164)
    dec_ref r162
    dec_ref r164
    if is_error(r165) goto L147 (error at distance_solver:182) else goto L94
L94:
    r166 = object 2
    r167 = CPyNumber_Power(r165, r166)
    dec_ref r165
    if is_error(r167) goto L147 (error at distance_solver:182) else goto L95
L95:
    r168 = object 1
    r169 = PyObject_GetItem(temp_o, r168)
    dec_ref temp_o
    if is_error(r169) goto L149 (error at distance_solver:182) else goto L96
L96:
    r170 = object 1
    r171 = PyObject_GetItem(pmt_center, r170)
    if is_error(r171) goto L150 (error at distance_solver:182) else goto L97
L97:
    r172 = PyNumber_Subtract(r169, r171)
    dec_ref r169
    dec_ref r171
    if is_error(r172) goto L149 (error at distance_solver:182) else goto L98
L98:
    r173 = object 2
    r174 = CPyNumber_Power(r172, r173)
    dec_ref r172
    if is_error(r174) goto L149 (error at distance_solver:182) else goto L99
L99:
    r175 = PyNumber_Add(r167, r174)
    dec_ref r167
    dec_ref r174
    if is_error(r175) goto L151 (error at distance_solver:182) else goto L100
L100:
    r176 = object 2
    r177 = CPyNumber_Power(pmt_radius, r176)
    if is_error(r177) goto L152 (error at distance_solver:182) else goto L101
L101:
    r178 = PyObject_RichCompare(r175, r177, 1)
    dec_ref r175
    dec_ref r177
    if is_error(r178) goto L151 (error at distance_solver:182) else goto L102
L102:
    r179 = PyNumber_And(r160, r178)
    dec_ref r160
    dec_ref r178
    if is_error(r179) goto L127 (error at distance_solver:182) else goto L103
L103:
    r180 = PyObject_IsTrue(r179)
    dec_ref r179
    r181 = r180 >= 0 :: signed
    if not r181 goto L127 (error at distance_solver:182) else goto L104 :: bool
L104:
    r182 = truncate r180: i32 to builtins.bool
    if r182 goto L153 else goto L106 :: bool
L105:
    r183 = box(bool, 1)
    inc_ref r183
    PMT_cond = r183
L106:
    r184 = (light_guide_dist, PMT_cond)
    dec_ref light_guide_dist
    dec_ref PMT_cond
    r185 = box(tuple[object, object], r184)
    return r185
L107:
    r186 = (dist, PMT_cond)
    dec_ref dist
    dec_ref PMT_cond
    r187 = box(tuple[object, object], r186)
    return r187
L108:
    r188 = <error> :: object
    return r188
L109:
    dec_ref dcircle
    goto L108
L110:
    dec_ref dcircle
    dec_ref dplane_z
    goto L108
L111:
    dec_ref dcircle
    goto L5
L112:
    dec_ref dplane_z
    goto L6
L113:
    dec_ref dist
    goto L108
L114:
    dec_ref dist
    dec_ref temp_o
    dec_ref PMT_cond
    goto L108
L115:
    dec_ref dist
    dec_ref temp_o
    dec_ref PMT_cond
    dec_ref r15
    goto L108
L116:
    dec_ref dist
    dec_ref temp_o
    dec_ref PMT_cond
    dec_ref r20
    goto L108
L117:
    dec_ref dist
    dec_ref temp_o
    dec_ref PMT_cond
    dec_ref r25
    goto L108
L118:
    dec_ref dist
    dec_ref temp_o
    dec_ref PMT_cond
    dec_ref r25
    dec_ref r29
    goto L108
L119:
    dec_ref dist
    dec_ref temp_o
    dec_ref PMT_cond
    dec_ref r25
    dec_ref r34
    goto L108
L120:
    dec_ref dist
    dec_ref temp_o
    goto L28
L121:
    dec_ref PMT_cond
    goto L108
L122:
    dec_ref PMT_cond
    dec_ref dplanex
    goto L108
L123:
    dec_ref PMT_cond
    dec_ref dplanex
    dec_ref dplaney
    goto L108
L124:
    dec_ref PMT_cond
    dec_ref dplanex
    dec_ref dplaney
    dec_ref dplanez
    goto L108
L125:
    dec_ref PMT_cond
    dec_ref dplanex
    dec_ref dplaney
    dec_ref dplanez
    dec_ref dcorner
    goto L108
L126:
    dec_ref PMT_cond
    dec_ref r53
    goto L108
L127:
    dec_ref PMT_cond
    dec_ref light_guide_dist
    goto L108
L128:
    dec_ref temp_o
    dec_ref PMT_cond
    dec_ref light_guide_dist
    goto L108
L129:
    dec_ref temp_o
    dec_ref PMT_cond
    dec_ref light_guide_dist
    dec_ref r68
    goto L108
L130:
    dec_ref temp_o
    dec_ref PMT_cond
    dec_ref light_guide_dist
    dec_ref r73
    goto L108
L131:
    dec_ref temp_o
    dec_ref PMT_cond
    dec_ref light_guide_dist
    dec_ref r73
    dec_ref r75
    goto L108
L132:
    dec_ref PMT_cond
    dec_ref light_guide_dist
    dec_ref r73
    dec_ref r80
    goto L108
L133:
    dec_ref PMT_cond
    dec_ref light_guide_dist
    dec_ref r73
    dec_ref r80
    dec_ref r82
    goto L108
L134:
    dec_ref PMT_cond
    dec_ref light_guide_dist
    dec_ref r73
    goto L108
L135:
    dec_ref PMT_cond
    dec_ref light_guide_dist
    dec_ref r73
    dec_ref r88
    goto L108
L136:
    dec_ref PMT_cond
    goto L56
L137:
    dec_ref dist
    dec_ref temp_o
    dec_ref PMT_cond
    dec_ref r102
    goto L108
L138:
    dec_ref dist
    dec_ref temp_o
    dec_ref PMT_cond
    dec_ref r107
    goto L108
L139:
    dec_ref dist
    dec_ref temp_o
    dec_ref PMT_cond
    dec_ref r112
    goto L108
L140:
    dec_ref dist
    dec_ref PMT_cond
    dec_ref r112
    dec_ref r116
    goto L108
L141:
    dec_ref dist
    dec_ref PMT_cond
    dec_ref r112
    goto L108
L142:
    dec_ref dist
    dec_ref PMT_cond
    dec_ref r112
    dec_ref r121
    goto L108
L143:
    dec_ref dist
    dec_ref PMT_cond
    goto L108
L144:
    dec_ref dist
    goto L77
L145:
    dec_ref PMT_cond
    dec_ref r140
    goto L108
L146:
    dec_ref temp_o
    dec_ref PMT_cond
    dec_ref light_guide_dist
    dec_ref r155
    goto L108
L147:
    dec_ref temp_o
    dec_ref PMT_cond
    dec_ref light_guide_dist
    dec_ref r160
    goto L108
L148:
    dec_ref temp_o
    dec_ref PMT_cond
    dec_ref light_guide_dist
    dec_ref r160
    dec_ref r162
    goto L108
L149:
    dec_ref PMT_cond
    dec_ref light_guide_dist
    dec_ref r160
    dec_ref r167
    goto L108
L150:
    dec_ref PMT_cond
    dec_ref light_guide_dist
    dec_ref r160
    dec_ref r167
    dec_ref r169
    goto L108
L151:
    dec_ref PMT_cond
    dec_ref light_guide_dist
    dec_ref r160
    goto L108
L152:
    dec_ref PMT_cond
    dec_ref light_guide_dist
    dec_ref r160
    dec_ref r175
    goto L108
L153:
    dec_ref PMT_cond
    goto L105

def Simulation.photon_interaction(self, u, n):
    self :: modTof.Simulation
    u, n, r0 :: object
    r1 :: str
    r2 :: object
    r3 :: object[2]
    r4 :: object_ptr
    r5, r6, r7, r8, r9, u_r, r10 :: object
    r11 :: str
    r12 :: object
    r13 :: object[2]
    r14 :: object_ptr
    r15, r16, r17 :: object
    r18 :: i32
    r19 :: bit
    r20 :: bool
    r21, r22, r23, v, r24 :: object
    r25 :: str
    r26 :: object
    r27 :: object[2]
    r28 :: object_ptr
    r29, r30 :: object
    r31 :: str
    r32 :: object
    r33 :: str
    r34 :: object
    r35 :: object[1]
    r36 :: object_ptr
    r37, r38 :: object
    r39 :: str
    r40 :: object
    r41 :: str
    r42 :: object
    r43 :: object[1]
    r44 :: object_ptr
    r45, r46 :: object
    r47 :: str
    r48 :: object
    r49 :: str
    r50 :: object
    r51 :: object[1]
    r52 :: object_ptr
    r53, r54, r55, r56 :: object
    r57 :: str
    r58 :: object
    r59 :: object[1]
    r60 :: object_ptr
    r61, theta, r62, r63, r64, r65 :: object
    r66 :: str
    r67 :: object
    r68 :: object[1]
    r69 :: object_ptr
    r70, r71, r72, r73, inside_sqrt, r74, r75, r76 :: object
    r77 :: str
    r78 :: object
    r79 :: object[1]
    r80 :: object_ptr
    r81, sqrt_term, r82, r83 :: object
    r84 :: str
    r85 :: object
    r86 :: object[1]
    r87 :: object_ptr
    r88, r89, r90, r91, r92, r93, r94 :: object
    r95 :: str
    r96 :: object
    r97 :: object[1]
    r98 :: object_ptr
    r99, r100, r101, r102, r103, r104, r105 :: object
    r106 :: str
    r107 :: object
    r108 :: object[1]
    r109 :: object_ptr
    r110, r111, r112, Rs, r113, r114, r115, r116 :: object
    r117 :: str
    r118 :: object
    r119 :: object[1]
    r120 :: object_ptr
    r121, r122, r123, r124, r125, r126, r127 :: object
    r128 :: str
    r129 :: object
    r130 :: object[1]
    r131 :: object_ptr
    r132, r133, r134, r135, r136 :: object
    r137 :: str
    r138 :: object
    r139 :: object[1]
    r140 :: object_ptr
    r141, r142, r143, Rp, r144 :: object
    r145 :: str
    r146 :: object
    r147 :: str
    r148, r149, r150, r151, r152, r153 :: object
    r154 :: i32
    r155 :: bit
    r156 :: bool
    r157, r158 :: object
    r159 :: tuple[object, object]
    r160, r161 :: object
    r162 :: str
    r163 :: object
    r164 :: str
    r165, r166, r167, r168 :: object
    r169 :: i32
    r170 :: bit
    r171 :: bool
    r172, r173 :: object
    r174 :: tuple[object, object]
    r175, r176 :: object
    r177 :: str
    r178 :: object
    r179 :: float
    r180 :: bit
    r181 :: float
    r182, r183, r184, r185, r186 :: object
    r187 :: str
    r188 :: object
    r189 :: float
    r190 :: bit
    r191 :: float
    r192, r193 :: object
    r194 :: str
    r195, r196 :: object
    r197 :: object[2]
    r198 :: object_ptr
    r199, theta_new, r200 :: object
    r201 :: str
    r202 :: object
    r203 :: float
    r204 :: bit
    r205 :: float
    r206, r207 :: object
    r208 :: str
    r209, r210 :: object
    r211 :: float
    r212 :: bit
    r213 :: object
    r214 :: str
    r215, r216, r217 :: object
    r218 :: object[2]
    r219 :: object_ptr
    r220, phi_new, r221 :: object
    r222 :: str
    r223 :: object
    r224 :: object[1]
    r225 :: object_ptr
    r226, r227 :: object
    r228 :: str
    r229 :: object
    r230 :: object[1]
    r231 :: object_ptr
    r232, r233, r234 :: object
    r235 :: str
    r236 :: object
    r237 :: object[1]
    r238 :: object_ptr
    r239, r240 :: object
    r241 :: str
    r242 :: object
    r243 :: object[1]
    r244 :: object_ptr
    r245, r246, r247 :: object
    r248 :: str
    r249 :: object
    r250 :: object[1]
    r251 :: object_ptr
    r252 :: object
    r253 :: list
    r254, r255, r256, r257 :: ptr
    r258 :: object
    r259 :: str
    r260 :: object
    r261 :: object[1]
    r262 :: object_ptr
    r263, r264, new_u, r265, r266, r267, r268, r269 :: object
    r270 :: tuple[object, object]
    r271, r272 :: object
L0:
    r0 = numpy :: module
    r1 = 'dot'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L119 (error at photon_interaction:199) else goto L1
L1:
    r3 = [u, n]
    r4 = load_address r3
    r5 = _PyObject_Vectorcall(r2, r4, 2, 0)
    dec_ref r2
    if is_error(r5) goto L119 (error at photon_interaction:199) else goto L2
L2:
    r6 = object 2
    r7 = PyNumber_Multiply(r6, r5)
    dec_ref r5
    if is_error(r7) goto L119 (error at photon_interaction:199) else goto L3
L3:
    r8 = PyNumber_Multiply(r7, n)
    dec_ref r7
    if is_error(r8) goto L119 (error at photon_interaction:199) else goto L4
L4:
    r9 = PyNumber_Subtract(u, r8)
    dec_ref r8
    if is_error(r9) goto L119 (error at photon_interaction:199) else goto L5
L5:
    u_r = r9
    r10 = numpy :: module
    r11 = 'dot'
    r12 = CPyObject_GetAttr(r10, r11)
    if is_error(r12) goto L120 (error at photon_interaction:200) else goto L6
L6:
    r13 = [u, n]
    r14 = load_address r13
    r15 = _PyObject_Vectorcall(r12, r14, 2, 0)
    dec_ref r12
    if is_error(r15) goto L120 (error at photon_interaction:200) else goto L7
L7:
    r16 = object 0
    r17 = PyObject_RichCompare(r15, r16, 0)
    dec_ref r15
    if is_error(r17) goto L120 (error at photon_interaction:200) else goto L8
L8:
    r18 = PyObject_IsTrue(r17)
    dec_ref r17
    r19 = r18 >= 0 :: signed
    if not r19 goto L120 (error at photon_interaction:200) else goto L9 :: bool
L9:
    r20 = truncate r18: i32 to builtins.bool
    if r20 goto L10 else goto L12 :: bool
L10:
    r21 = object -1
    r22 = PyNumber_Multiply(u, r21)
    if is_error(r22) goto L120 (error at photon_interaction:200) else goto L11
L11:
    r23 = r22
    goto L13
L12:
    inc_ref u
    r23 = u
L13:
    v = r23
    r24 = numpy :: module
    r25 = 'cross'
    r26 = CPyObject_GetAttr(r24, r25)
    if is_error(r26) goto L121 (error at photon_interaction:201) else goto L14
L14:
    r27 = [v, n]
    r28 = load_address r27
    r29 = _PyObject_Vectorcall(r26, r28, 2, 0)
    dec_ref r26
    if is_error(r29) goto L121 (error at photon_interaction:201) else goto L15
L15:
    dec_ref v
    r30 = numpy :: module
    r31 = 'linalg'
    r32 = CPyObject_GetAttr(r30, r31)
    if is_error(r32) goto L122 (error at photon_interaction:201) else goto L16
L16:
    r33 = 'norm'
    r34 = CPyObject_GetAttr(r32, r33)
    dec_ref r32
    if is_error(r34) goto L122 (error at photon_interaction:201) else goto L17
L17:
    r35 = [r29]
    r36 = load_address r35
    r37 = _PyObject_Vectorcall(r34, r36, 1, 0)
    dec_ref r34
    if is_error(r37) goto L122 (error at photon_interaction:201) else goto L18
L18:
    dec_ref r29
    r38 = numpy :: module
    r39 = 'linalg'
    r40 = CPyObject_GetAttr(r38, r39)
    if is_error(r40) goto L123 (error at photon_interaction:201) else goto L19
L19:
    r41 = 'norm'
    r42 = CPyObject_GetAttr(r40, r41)
    dec_ref r40
    if is_error(r42) goto L123 (error at photon_interaction:201) else goto L20
L20:
    r43 = [u]
    r44 = load_address r43
    r45 = _PyObject_Vectorcall(r42, r44, 1, 0)
    dec_ref r42
    if is_error(r45) goto L123 (error at photon_interaction:201) else goto L21
L21:
    r46 = numpy :: module
    r47 = 'linalg'
    r48 = CPyObject_GetAttr(r46, r47)
    if is_error(r48) goto L124 (error at photon_interaction:201) else goto L22
L22:
    r49 = 'norm'
    r50 = CPyObject_GetAttr(r48, r49)
    dec_ref r48
    if is_error(r50) goto L124 (error at photon_interaction:201) else goto L23
L23:
    r51 = [n]
    r52 = load_address r51
    r53 = _PyObject_Vectorcall(r50, r52, 1, 0)
    dec_ref r50
    if is_error(r53) goto L124 (error at photon_interaction:201) else goto L24
L24:
    r54 = PyNumber_Multiply(r45, r53)
    dec_ref r45
    dec_ref r53
    if is_error(r54) goto L123 (error at photon_interaction:201) else goto L25
L25:
    r55 = PyNumber_TrueDivide(r37, r54)
    dec_ref r37
    dec_ref r54
    if is_error(r55) goto L120 (error at photon_interaction:201) else goto L26
L26:
    r56 = numpy :: module
    r57 = 'arcsin'
    r58 = CPyObject_GetAttr(r56, r57)
    if is_error(r58) goto L125 (error at photon_interaction:201) else goto L27
L27:
    r59 = [r55]
    r60 = load_address r59
    r61 = _PyObject_Vectorcall(r58, r60, 1, 0)
    dec_ref r58
    if is_error(r61) goto L125 (error at photon_interaction:201) else goto L28
L28:
    dec_ref r55
    theta = r61
    r62 = self.n_1
    r63 = self.n_2
    r64 = PyNumber_TrueDivide(r62, r63)
    dec_ref r62
    dec_ref r63
    if is_error(r64) goto L126 (error at photon_interaction:202) else goto L29
L29:
    r65 = numpy :: module
    r66 = 'sin'
    r67 = CPyObject_GetAttr(r65, r66)
    if is_error(r67) goto L127 (error at photon_interaction:202) else goto L30
L30:
    r68 = [theta]
    r69 = load_address r68
    r70 = _PyObject_Vectorcall(r67, r69, 1, 0)
    dec_ref r67
    if is_error(r70) goto L127 (error at photon_interaction:202) else goto L31
L31:
    r71 = PyNumber_Multiply(r64, r70)
    dec_ref r64
    dec_ref r70
    if is_error(r71) goto L126 (error at photon_interaction:202) else goto L32
L32:
    r72 = object 2
    r73 = CPyNumber_Power(r71, r72)
    dec_ref r71
    if is_error(r73) goto L126 (error at photon_interaction:202) else goto L33
L33:
    inside_sqrt = r73
    r74 = object 1
    r75 = PyNumber_Subtract(r74, inside_sqrt)
    dec_ref inside_sqrt
    if is_error(r75) goto L126 (error at photon_interaction:203) else goto L34
L34:
    r76 = numpy :: module
    r77 = 'sqrt'
    r78 = CPyObject_GetAttr(r76, r77)
    if is_error(r78) goto L128 (error at photon_interaction:203) else goto L35
L35:
    r79 = [r75]
    r80 = load_address r79
    r81 = _PyObject_Vectorcall(r78, r80, 1, 0)
    dec_ref r78
    if is_error(r81) goto L128 (error at photon_interaction:203) else goto L36
L36:
    dec_ref r75
    sqrt_term = r81
    r82 = self.n_1
    r83 = numpy :: module
    r84 = 'cos'
    r85 = CPyObject_GetAttr(r83, r84)
    if is_error(r85) goto L129 (error at photon_interaction:204) else goto L37
L37:
    r86 = [theta]
    r87 = load_address r86
    r88 = _PyObject_Vectorcall(r85, r87, 1, 0)
    dec_ref r85
    if is_error(r88) goto L129 (error at photon_interaction:204) else goto L38
L38:
    r89 = PyNumber_Multiply(r82, r88)
    dec_ref r82
    dec_ref r88
    if is_error(r89) goto L130 (error at photon_interaction:204) else goto L39
L39:
    r90 = self.n_2
    r91 = PyNumber_Multiply(r90, sqrt_term)
    dec_ref r90
    if is_error(r91) goto L131 (error at photon_interaction:204) else goto L40
L40:
    r92 = PyNumber_Subtract(r89, r91)
    dec_ref r89
    dec_ref r91
    if is_error(r92) goto L130 (error at photon_interaction:204) else goto L41
L41:
    r93 = self.n_1
    r94 = numpy :: module
    r95 = 'cos'
    r96 = CPyObject_GetAttr(r94, r95)
    if is_error(r96) goto L132 (error at photon_interaction:204) else goto L42
L42:
    r97 = [theta]
    r98 = load_address r97
    r99 = _PyObject_Vectorcall(r96, r98, 1, 0)
    dec_ref r96
    if is_error(r99) goto L132 (error at photon_interaction:204) else goto L43
L43:
    r100 = PyNumber_Multiply(r93, r99)
    dec_ref r93
    dec_ref r99
    if is_error(r100) goto L133 (error at photon_interaction:204) else goto L44
L44:
    r101 = self.n_2
    r102 = PyNumber_Multiply(r101, sqrt_term)
    dec_ref r101
    if is_error(r102) goto L134 (error at photon_interaction:204) else goto L45
L45:
    r103 = PyNumber_Add(r100, r102)
    dec_ref r100
    dec_ref r102
    if is_error(r103) goto L133 (error at photon_interaction:204) else goto L46
L46:
    r104 = PyNumber_TrueDivide(r92, r103)
    dec_ref r92
    dec_ref r103
    if is_error(r104) goto L130 (error at photon_interaction:204) else goto L47
L47:
    r105 = numpy :: module
    r106 = 'abs'
    r107 = CPyObject_GetAttr(r105, r106)
    if is_error(r107) goto L135 (error at photon_interaction:204) else goto L48
L48:
    r108 = [r104]
    r109 = load_address r108
    r110 = _PyObject_Vectorcall(r107, r109, 1, 0)
    dec_ref r107
    if is_error(r110) goto L135 (error at photon_interaction:204) else goto L49
L49:
    dec_ref r104
    r111 = object 2
    r112 = CPyNumber_Power(r110, r111)
    dec_ref r110
    if is_error(r112) goto L130 (error at photon_interaction:204) else goto L50
L50:
    Rs = r112
    r113 = self.n_1
    r114 = PyNumber_Multiply(r113, sqrt_term)
    dec_ref r113
    if is_error(r114) goto L136 (error at photon_interaction:205) else goto L51
L51:
    r115 = self.n_2
    r116 = numpy :: module
    r117 = 'cos'
    r118 = CPyObject_GetAttr(r116, r117)
    if is_error(r118) goto L137 (error at photon_interaction:205) else goto L52
L52:
    r119 = [theta]
    r120 = load_address r119
    r121 = _PyObject_Vectorcall(r118, r120, 1, 0)
    dec_ref r118
    if is_error(r121) goto L137 (error at photon_interaction:205) else goto L53
L53:
    r122 = PyNumber_Multiply(r115, r121)
    dec_ref r115
    dec_ref r121
    if is_error(r122) goto L138 (error at photon_interaction:205) else goto L54
L54:
    r123 = PyNumber_Subtract(r114, r122)
    dec_ref r114
    dec_ref r122
    if is_error(r123) goto L136 (error at photon_interaction:205) else goto L55
L55:
    r124 = self.n_1
    r125 = PyNumber_Multiply(r124, sqrt_term)
    dec_ref r124
    dec_ref sqrt_term
    if is_error(r125) goto L139 (error at photon_interaction:205) else goto L56
L56:
    r126 = self.n_2
    r127 = numpy :: module
    r128 = 'cos'
    r129 = CPyObject_GetAttr(r127, r128)
    if is_error(r129) goto L140 (error at photon_interaction:205) else goto L57
L57:
    r130 = [theta]
    r131 = load_address r130
    r132 = _PyObject_Vectorcall(r129, r131, 1, 0)
    dec_ref r129
    if is_error(r132) goto L140 (error at photon_interaction:205) else goto L58
L58:
    dec_ref theta
    r133 = PyNumber_Multiply(r126, r132)
    dec_ref r126
    dec_ref r132
    if is_error(r133) goto L141 (error at photon_interaction:205) else goto L59
L59:
    r134 = PyNumber_Add(r125, r133)
    dec_ref r125
    dec_ref r133
    if is_error(r134) goto L142 (error at photon_interaction:205) else goto L60
L60:
    r135 = PyNumber_TrueDivide(r123, r134)
    dec_ref r123
    dec_ref r134
    if is_error(r135) goto L143 (error at photon_interaction:205) else goto L61
L61:
    r136 = numpy :: module
    r137 = 'abs'
    r138 = CPyObject_GetAttr(r136, r137)
    if is_error(r138) goto L144 (error at photon_interaction:205) else goto L62
L62:
    r139 = [r135]
    r140 = load_address r139
    r141 = _PyObject_Vectorcall(r138, r140, 1, 0)
    dec_ref r138
    if is_error(r141) goto L144 (error at photon_interaction:205) else goto L63
L63:
    dec_ref r135
    r142 = object 2
    r143 = CPyNumber_Power(r141, r142)
    dec_ref r141
    if is_error(r143) goto L143 (error at photon_interaction:205) else goto L64
L64:
    Rp = r143
    r144 = numpy :: module
    r145 = 'random'
    r146 = CPyObject_GetAttr(r144, r145)
    if is_error(r146) goto L145 (error at photon_interaction:207) else goto L65
L65:
    r147 = 'random'
    r148 = CPyObject_GetAttr(r146, r147)
    dec_ref r146
    if is_error(r148) goto L145 (error at photon_interaction:207) else goto L66
L66:
    r149 = _PyObject_Vectorcall(r148, 0, 0, 0)
    dec_ref r148
    if is_error(r149) goto L145 (error at photon_interaction:207) else goto L67
L67:
    r150 = PyNumber_Add(Rs, Rp)
    dec_ref Rs
    dec_ref Rp
    if is_error(r150) goto L146 (error at photon_interaction:207) else goto L68
L68:
    r151 = object 2
    r152 = PyNumber_TrueDivide(r150, r151)
    dec_ref r150
    if is_error(r152) goto L146 (error at photon_interaction:207) else goto L69
L69:
    r153 = PyObject_RichCompare(r149, r152, 0)
    dec_ref r149
    dec_ref r152
    if is_error(r153) goto L120 (error at photon_interaction:207) else goto L70
L70:
    r154 = PyObject_IsTrue(r153)
    dec_ref r153
    r155 = r154 >= 0 :: signed
    if not r155 goto L120 (error at photon_interaction:207) else goto L71 :: bool
L71:
    r156 = truncate r154: i32 to builtins.bool
    if r156 goto L72 else goto L74 :: bool
L72:
    r157 = self.normalize(u_r)
    dec_ref u_r
    if is_error(r157) goto L119 (error at photon_interaction:208) else goto L73
L73:
    r158 = box(bool, 1)
    r159 = (r157, r158)
    dec_ref r157
    r160 = box(tuple[object, object], r159)
    return r160
L74:
    r161 = numpy :: module
    r162 = 'random'
    r163 = CPyObject_GetAttr(r161, r162)
    if is_error(r163) goto L120 (error at photon_interaction:210) else goto L75
L75:
    r164 = 'random'
    r165 = CPyObject_GetAttr(r163, r164)
    dec_ref r163
    if is_error(r165) goto L120 (error at photon_interaction:210) else goto L76
L76:
    r166 = _PyObject_Vectorcall(r165, 0, 0, 0)
    dec_ref r165
    if is_error(r166) goto L120 (error at photon_interaction:210) else goto L77
L77:
    r167 = self.pr_absorption
    r168 = PyObject_RichCompare(r166, r167, 0)
    dec_ref r166
    dec_ref r167
    if is_error(r168) goto L120 (error at photon_interaction:210) else goto L78
L78:
    r169 = PyObject_IsTrue(r168)
    dec_ref r168
    r170 = r169 >= 0 :: signed
    if not r170 goto L120 (error at photon_interaction:210) else goto L79 :: bool
L79:
    r171 = truncate r169: i32 to builtins.bool
    if r171 goto L80 else goto L147 :: bool
L80:
    r172 = self.normalize(u_r)
    dec_ref u_r
    if is_error(r172) goto L119 (error at photon_interaction:211) else goto L81
L81:
    r173 = box(bool, 0)
    r174 = (r172, r173)
    dec_ref r172
    r175 = box(tuple[object, object], r174)
    return r175
L82:
    r176 = numpy :: module
    r177 = 'pi'
    r178 = CPyObject_GetAttr(r176, r177)
    if is_error(r178) goto L119 (error at photon_interaction:213) else goto L83
L83:
    r179 = unbox(float, r178)
    dec_ref r178
    r180 = r179 == -113.0
    if r180 goto L85 else goto L84 :: bool
L84:
    r181 = -r179
    r182 = box(float, r181)
    r183 = object 2
    r184 = PyNumber_TrueDivide(r182, r183)
    dec_ref r182
    if is_error(r184) goto L119 (error at photon_interaction:213) else goto L86
L85:
    r185 = PyErr_Occurred()
    if not is_error(r185) goto L119 (error at photon_interaction:213) else goto L84
L86:
    r186 = numpy :: module
    r187 = 'pi'
    r188 = CPyObject_GetAttr(r186, r187)
    if is_error(r188) goto L148 (error at photon_interaction:213) else goto L87
L87:
    r189 = unbox(float, r188)
    dec_ref r188
    r190 = r189 == -113.0
    if r190 goto L89 else goto L88 :: bool
L88:
    r191 = r189 / 2.0
    r192 = box(float, r191)
    r193 = random :: module
    r194 = 'uniform'
    r195 = CPyObject_GetAttr(r193, r194)
    if is_error(r195) goto L149 (error at photon_interaction:213) else goto L90
L89:
    r196 = PyErr_Occurred()
    if not is_error(r196) goto L148 (error at photon_interaction:213) else goto L88
L90:
    r197 = [r184, r192]
    r198 = load_address r197
    r199 = _PyObject_Vectorcall(r195, r198, 2, 0)
    dec_ref r195
    if is_error(r199) goto L149 (error at photon_interaction:213) else goto L91
L91:
    dec_ref r184
    dec_ref r192
    theta_new = r199
    r200 = numpy :: module
    r201 = 'pi'
    r202 = CPyObject_GetAttr(r200, r201)
    if is_error(r202) goto L150 (error at photon_interaction:214) else goto L92
L92:
    r203 = unbox(float, r202)
    dec_ref r202
    r204 = r203 == -113.0
    if r204 goto L94 else goto L93 :: bool
L93:
    r205 = -r203
    r206 = box(float, r205)
    r207 = numpy :: module
    r208 = 'pi'
    r209 = CPyObject_GetAttr(r207, r208)
    if is_error(r209) goto L151 (error at photon_interaction:214) else goto L95
L94:
    r210 = PyErr_Occurred()
    if not is_error(r210) goto L150 (error at photon_interaction:214) else goto L93
L95:
    r211 = unbox(float, r209)
    dec_ref r209
    r212 = r211 == -113.0
    if r212 goto L97 else goto L96 :: bool
L96:
    r213 = random :: module
    r214 = 'uniform'
    r215 = CPyObject_GetAttr(r213, r214)
    if is_error(r215) goto L151 (error at photon_interaction:214) else goto L98
L97:
    r216 = PyErr_Occurred()
    if not is_error(r216) goto L151 (error at photon_interaction:214) else goto L96
L98:
    r217 = box(float, r211)
    r218 = [r206, r217]
    r219 = load_address r218
    r220 = _PyObject_Vectorcall(r215, r219, 2, 0)
    dec_ref r215
    if is_error(r220) goto L152 (error at photon_interaction:214) else goto L99
L99:
    dec_ref r206
    dec_ref r217
    phi_new = r220
    r221 = numpy :: module
    r222 = 'sin'
    r223 = CPyObject_GetAttr(r221, r222)
    if is_error(r223) goto L153 (error at photon_interaction:215) else goto L100
L100:
    r224 = [phi_new]
    r225 = load_address r224
    r226 = _PyObject_Vectorcall(r223, r225, 1, 0)
    dec_ref r223
    if is_error(r226) goto L153 (error at photon_interaction:215) else goto L101
L101:
    r227 = numpy :: module
    r228 = 'cos'
    r229 = CPyObject_GetAttr(r227, r228)
    if is_error(r229) goto L154 (error at photon_interaction:215) else goto L102
L102:
    r230 = [theta_new]
    r231 = load_address r230
    r232 = _PyObject_Vectorcall(r229, r231, 1, 0)
    dec_ref r229
    if is_error(r232) goto L154 (error at photon_interaction:215) else goto L103
L103:
    r233 = PyNumber_Multiply(r226, r232)
    dec_ref r226
    dec_ref r232
    if is_error(r233) goto L153 (error at photon_interaction:215) else goto L104
L104:
    r234 = numpy :: module
    r235 = 'sin'
    r236 = CPyObject_GetAttr(r234, r235)
    if is_error(r236) goto L155 (error at photon_interaction:215) else goto L105
L105:
    r237 = [phi_new]
    r238 = load_address r237
    r239 = _PyObject_Vectorcall(r236, r238, 1, 0)
    dec_ref r236
    if is_error(r239) goto L155 (error at photon_interaction:215) else goto L106
L106:
    r240 = numpy :: module
    r241 = 'sin'
    r242 = CPyObject_GetAttr(r240, r241)
    if is_error(r242) goto L156 (error at photon_interaction:215) else goto L107
L107:
    r243 = [theta_new]
    r244 = load_address r243
    r245 = _PyObject_Vectorcall(r242, r244, 1, 0)
    dec_ref r242
    if is_error(r245) goto L156 (error at photon_interaction:215) else goto L108
L108:
    dec_ref theta_new
    r246 = PyNumber_Multiply(r239, r245)
    dec_ref r239
    dec_ref r245
    if is_error(r246) goto L157 (error at photon_interaction:215) else goto L109
L109:
    r247 = numpy :: module
    r248 = 'cos'
    r249 = CPyObject_GetAttr(r247, r248)
    if is_error(r249) goto L158 (error at photon_interaction:215) else goto L110
L110:
    r250 = [phi_new]
    r251 = load_address r250
    r252 = _PyObject_Vectorcall(r249, r251, 1, 0)
    dec_ref r249
    if is_error(r252) goto L158 (error at photon_interaction:215) else goto L111
L111:
    dec_ref phi_new
    r253 = PyList_New(3)
    if is_error(r253) goto L159 (error at photon_interaction:215) else goto L112
L112:
    r254 = get_element_ptr r253 ob_item :: PyListObject
    r255 = load_mem r254 :: ptr*
    set_mem r255, r233 :: builtins.object*
    r256 = r255 + 8
    set_mem r256, r246 :: builtins.object*
    r257 = r255 + 16
    set_mem r257, r252 :: builtins.object*
    r258 = numpy :: module
    r259 = 'array'
    r260 = CPyObject_GetAttr(r258, r259)
    if is_error(r260) goto L160 (error at photon_interaction:215) else goto L113
L113:
    r261 = [r253]
    r262 = load_address r261
    r263 = _PyObject_Vectorcall(r260, r262, 1, 0)
    dec_ref r260
    if is_error(r263) goto L160 (error at photon_interaction:215) else goto L114
L114:
    dec_ref r253
    r264 = self.normalize(r263)
    dec_ref r263
    if is_error(r264) goto L119 (error at photon_interaction:215) else goto L115
L115:
    new_u = r264
    r265 = self.reemission_angle_factor
    r266 = PyNumber_Multiply(r265, new_u)
    dec_ref r265
    dec_ref new_u
    if is_error(r266) goto L119 (error at photon_interaction:216) else goto L116
L116:
    r267 = PyNumber_Add(r266, n)
    dec_ref r266
    if is_error(r267) goto L119 (error at photon_interaction:216) else goto L117
L117:
    u_r = r267
    r268 = self.normalize(u_r)
    dec_ref u_r
    if is_error(r268) goto L119 (error at photon_interaction:217) else goto L118
L118:
    r269 = box(bool, 1)
    r270 = (r268, r269)
    dec_ref r268
    r271 = box(tuple[object, object], r270)
    return r271
L119:
    r272 = <error> :: object
    return r272
L120:
    dec_ref u_r
    goto L119
L121:
    dec_ref u_r
    dec_ref v
    goto L119
L122:
    dec_ref u_r
    dec_ref r29
    goto L119
L123:
    dec_ref u_r
    dec_ref r37
    goto L119
L124:
    dec_ref u_r
    dec_ref r37
    dec_ref r45
    goto L119
L125:
    dec_ref u_r
    dec_ref r55
    goto L119
L126:
    dec_ref u_r
    dec_ref theta
    goto L119
L127:
    dec_ref u_r
    dec_ref theta
    dec_ref r64
    goto L119
L128:
    dec_ref u_r
    dec_ref theta
    dec_ref r75
    goto L119
L129:
    dec_ref u_r
    dec_ref theta
    dec_ref sqrt_term
    dec_ref r82
    goto L119
L130:
    dec_ref u_r
    dec_ref theta
    dec_ref sqrt_term
    goto L119
L131:
    dec_ref u_r
    dec_ref theta
    dec_ref sqrt_term
    dec_ref r89
    goto L119
L132:
    dec_ref u_r
    dec_ref theta
    dec_ref sqrt_term
    dec_ref r92
    dec_ref r93
    goto L119
L133:
    dec_ref u_r
    dec_ref theta
    dec_ref sqrt_term
    dec_ref r92
    goto L119
L134:
    dec_ref u_r
    dec_ref theta
    dec_ref sqrt_term
    dec_ref r92
    dec_ref r100
    goto L119
L135:
    dec_ref u_r
    dec_ref theta
    dec_ref sqrt_term
    dec_ref r104
    goto L119
L136:
    dec_ref u_r
    dec_ref theta
    dec_ref sqrt_term
    dec_ref Rs
    goto L119
L137:
    dec_ref u_r
    dec_ref theta
    dec_ref sqrt_term
    dec_ref Rs
    dec_ref r114
    dec_ref r115
    goto L119
L138:
    dec_ref u_r
    dec_ref theta
    dec_ref sqrt_term
    dec_ref Rs
    dec_ref r114
    goto L119
L139:
    dec_ref u_r
    dec_ref theta
    dec_ref Rs
    dec_ref r123
    goto L119
L140:
    dec_ref u_r
    dec_ref theta
    dec_ref Rs
    dec_ref r123
    dec_ref r125
    dec_ref r126
    goto L119
L141:
    dec_ref u_r
    dec_ref Rs
    dec_ref r123
    dec_ref r125
    goto L119
L142:
    dec_ref u_r
    dec_ref Rs
    dec_ref r123
    goto L119
L143:
    dec_ref u_r
    dec_ref Rs
    goto L119
L144:
    dec_ref u_r
    dec_ref Rs
    dec_ref r135
    goto L119
L145:
    dec_ref u_r
    dec_ref Rs
    dec_ref Rp
    goto L119
L146:
    dec_ref u_r
    dec_ref r149
    goto L119
L147:
    dec_ref u_r
    goto L82
L148:
    dec_ref r184
    goto L119
L149:
    dec_ref r184
    dec_ref r192
    goto L119
L150:
    dec_ref theta_new
    goto L119
L151:
    dec_ref theta_new
    dec_ref r206
    goto L119
L152:
    dec_ref theta_new
    dec_ref r206
    dec_ref r217
    goto L119
L153:
    dec_ref theta_new
    dec_ref phi_new
    goto L119
L154:
    dec_ref theta_new
    dec_ref phi_new
    dec_ref r226
    goto L119
L155:
    dec_ref theta_new
    dec_ref phi_new
    dec_ref r233
    goto L119
L156:
    dec_ref theta_new
    dec_ref phi_new
    dec_ref r233
    dec_ref r239
    goto L119
L157:
    dec_ref phi_new
    dec_ref r233
    goto L119
L158:
    dec_ref phi_new
    dec_ref r233
    dec_ref r246
    goto L119
L159:
    dec_ref r233
    dec_ref r246
    dec_ref r252
    goto L119
L160:
    dec_ref r253
    goto L119

def Simulation.n_vec_calculate(self, o, scint_plane, light_guide_planes, corner_center, corner_radius):
    self :: modTof.Simulation
    o, scint_plane, light_guide_planes, corner_center, corner_radius, r0, r1, r2, r3, r4 :: object
    r5 :: i32
    r6 :: bit
    r7 :: bool
    r8 :: object
    r9 :: list
    r10, r11 :: object
    r12, r13, r14, r15 :: ptr
    r16 :: object
    r17 :: str
    r18 :: object
    r19 :: object[1]
    r20 :: object_ptr
    r21, r22, r23, r24, r25, r26 :: object
    r27 :: i32
    r28 :: bit
    r29 :: bool
    r30 :: object
    r31 :: list
    r32, r33 :: object
    r34, r35, r36, r37 :: ptr
    r38 :: object
    r39 :: str
    r40 :: object
    r41 :: object[1]
    r42 :: object_ptr
    r43, r44, r45, r46, r47, r48 :: object
    r49 :: i32
    r50 :: bit
    r51 :: bool
    r52, r53, r54, r55, r56, r57 :: object
    r58 :: list
    r59, r60 :: object
    r61, r62, r63, r64 :: ptr
    r65 :: object
    r66 :: str
    r67 :: object
    r68 :: object[1]
    r69 :: object_ptr
    r70, r71, r72, r73, r74, r75 :: object
    r76 :: i32
    r77 :: bit
    r78 :: bool
    r79, r80, r81, r82, r83, r84 :: object
    r85 :: list
    r86, r87 :: object
    r88, r89, r90, r91 :: ptr
    r92 :: object
    r93 :: str
    r94 :: object
    r95 :: object[1]
    r96 :: object_ptr
    r97, r98, r99, r100, r101, r102, r103, r104, r105, r106, r107, r108 :: object
    r109 :: i32
    r110 :: bit
    r111 :: bool
    r112, r113 :: object
    r114 :: list
    r115, r116, r117 :: object
    r118, r119, r120, r121 :: ptr
    r122 :: object
    r123 :: str
    r124 :: object
    r125 :: object[1]
    r126 :: object_ptr
    r127, r128, r129, r130 :: object
L0:
    r0 = object 2
    r1 = PyObject_GetItem(o, r0)
    if is_error(r1) goto L62 (error at n_vec_calculate:221) else goto L1
L1:
    r2 = object 0
    r3 = PyObject_GetItem(scint_plane, r2)
    if is_error(r3) goto L63 (error at n_vec_calculate:221) else goto L2
L2:
    r4 = PyObject_RichCompare(r1, r3, 2)
    dec_ref r1
    dec_ref r3
    if is_error(r4) goto L62 (error at n_vec_calculate:221) else goto L3
L3:
    r5 = PyObject_IsTrue(r4)
    dec_ref r4
    r6 = r5 >= 0 :: signed
    if not r6 goto L62 (error at n_vec_calculate:221) else goto L4 :: bool
L4:
    r7 = truncate r5: i32 to builtins.bool
    if r7 goto L5 else goto L9 :: bool
L5:
    r8 = object 1
    r9 = PyList_New(3)
    if is_error(r9) goto L62 (error at n_vec_calculate:222) else goto L6
L6:
    r10 = object 0
    r11 = object 0
    r12 = get_element_ptr r9 ob_item :: PyListObject
    r13 = load_mem r12 :: ptr*
    inc_ref r10
    set_mem r13, r10 :: builtins.object*
    r14 = r13 + 8
    inc_ref r11
    set_mem r14, r11 :: builtins.object*
    r15 = r13 + 16
    inc_ref r8
    set_mem r15, r8 :: builtins.object*
    r16 = numpy :: module
    r17 = 'array'
    r18 = CPyObject_GetAttr(r16, r17)
    if is_error(r18) goto L64 (error at n_vec_calculate:222) else goto L7
L7:
    r19 = [r9]
    r20 = load_address r19
    r21 = _PyObject_Vectorcall(r18, r20, 1, 0)
    dec_ref r18
    if is_error(r21) goto L64 (error at n_vec_calculate:222) else goto L8
L8:
    dec_ref r9
    return r21
L9:
    r22 = object 2
    r23 = PyObject_GetItem(o, r22)
    if is_error(r23) goto L62 (error at n_vec_calculate:223) else goto L10
L10:
    r24 = object 1
    r25 = PyObject_GetItem(scint_plane, r24)
    if is_error(r25) goto L65 (error at n_vec_calculate:223) else goto L11
L11:
    r26 = PyObject_RichCompare(r23, r25, 2)
    dec_ref r23
    dec_ref r25
    if is_error(r26) goto L62 (error at n_vec_calculate:223) else goto L12
L12:
    r27 = PyObject_IsTrue(r26)
    dec_ref r26
    r28 = r27 >= 0 :: signed
    if not r28 goto L62 (error at n_vec_calculate:223) else goto L13 :: bool
L13:
    r29 = truncate r27: i32 to builtins.bool
    if r29 goto L14 else goto L18 :: bool
L14:
    r30 = object -1
    r31 = PyList_New(3)
    if is_error(r31) goto L62 (error at n_vec_calculate:224) else goto L15
L15:
    r32 = object 0
    r33 = object 0
    r34 = get_element_ptr r31 ob_item :: PyListObject
    r35 = load_mem r34 :: ptr*
    inc_ref r32
    set_mem r35, r32 :: builtins.object*
    r36 = r35 + 8
    inc_ref r33
    set_mem r36, r33 :: builtins.object*
    r37 = r35 + 16
    inc_ref r30
    set_mem r37, r30 :: builtins.object*
    r38 = numpy :: module
    r39 = 'array'
    r40 = CPyObject_GetAttr(r38, r39)
    if is_error(r40) goto L66 (error at n_vec_calculate:224) else goto L16
L16:
    r41 = [r31]
    r42 = load_address r41
    r43 = _PyObject_Vectorcall(r40, r42, 1, 0)
    dec_ref r40
    if is_error(r43) goto L66 (error at n_vec_calculate:224) else goto L17
L17:
    dec_ref r31
    return r43
L18:
    r44 = object 0
    r45 = PyObject_GetItem(o, r44)
    if is_error(r45) goto L62 (error at n_vec_calculate:225) else goto L19
L19:
    r46 = object 0
    r47 = PyObject_GetItem(light_guide_planes, r46)
    if is_error(r47) goto L67 (error at n_vec_calculate:225) else goto L20
L20:
    r48 = PyObject_RichCompare(r45, r47, 2)
    dec_ref r45
    dec_ref r47
    if is_error(r48) goto L62 (error at n_vec_calculate:225) else goto L21
L21:
    r49 = PyObject_IsTrue(r48)
    dec_ref r48
    r50 = r49 >= 0 :: signed
    if not r50 goto L62 (error at n_vec_calculate:225) else goto L22 :: bool
L22:
    r51 = truncate r49: i32 to builtins.bool
    if r51 goto L23 else goto L31 :: bool
L23:
    r52 = object 0
    r53 = PyObject_GetItem(light_guide_planes, r52)
    if is_error(r53) goto L62 (error at n_vec_calculate:226) else goto L24
L24:
    r54 = object 0
    r55 = PyObject_GetItem(light_guide_planes, r54)
    if is_error(r55) goto L68 (error at n_vec_calculate:226) else goto L25
L25:
    r56 = PyNumber_Absolute(r55)
    dec_ref r55
    if is_error(r56) goto L68 (error at n_vec_calculate:226) else goto L26
L26:
    r57 = PyNumber_TrueDivide(r53, r56)
    dec_ref r53
    dec_ref r56
    if is_error(r57) goto L62 (error at n_vec_calculate:226) else goto L27
L27:
    r58 = PyList_New(3)
    if is_error(r58) goto L69 (error at n_vec_calculate:226) else goto L28
L28:
    r59 = object 0
    r60 = object 0
    r61 = get_element_ptr r58 ob_item :: PyListObject
    r62 = load_mem r61 :: ptr*
    inc_ref r59
    set_mem r62, r59 :: builtins.object*
    r63 = r62 + 8
    set_mem r63, r57 :: builtins.object*
    r64 = r62 + 16
    inc_ref r60
    set_mem r64, r60 :: builtins.object*
    r65 = numpy :: module
    r66 = 'array'
    r67 = CPyObject_GetAttr(r65, r66)
    if is_error(r67) goto L70 (error at n_vec_calculate:226) else goto L29
L29:
    r68 = [r58]
    r69 = load_address r68
    r70 = _PyObject_Vectorcall(r67, r69, 1, 0)
    dec_ref r67
    if is_error(r70) goto L70 (error at n_vec_calculate:226) else goto L30
L30:
    dec_ref r58
    return r70
L31:
    r71 = object 1
    r72 = PyObject_GetItem(o, r71)
    if is_error(r72) goto L62 (error at n_vec_calculate:227) else goto L32
L32:
    r73 = object 1
    r74 = PyObject_GetItem(light_guide_planes, r73)
    if is_error(r74) goto L71 (error at n_vec_calculate:227) else goto L33
L33:
    r75 = PyObject_RichCompare(r72, r74, 2)
    dec_ref r72
    dec_ref r74
    if is_error(r75) goto L62 (error at n_vec_calculate:227) else goto L34
L34:
    r76 = PyObject_IsTrue(r75)
    dec_ref r75
    r77 = r76 >= 0 :: signed
    if not r77 goto L62 (error at n_vec_calculate:227) else goto L35 :: bool
L35:
    r78 = truncate r76: i32 to builtins.bool
    if r78 goto L36 else goto L44 :: bool
L36:
    r79 = object 1
    r80 = PyObject_GetItem(light_guide_planes, r79)
    if is_error(r80) goto L62 (error at n_vec_calculate:228) else goto L37
L37:
    r81 = object 1
    r82 = PyObject_GetItem(light_guide_planes, r81)
    if is_error(r82) goto L72 (error at n_vec_calculate:228) else goto L38
L38:
    r83 = PyNumber_Absolute(r82)
    dec_ref r82
    if is_error(r83) goto L72 (error at n_vec_calculate:228) else goto L39
L39:
    r84 = PyNumber_TrueDivide(r80, r83)
    dec_ref r80
    dec_ref r83
    if is_error(r84) goto L62 (error at n_vec_calculate:228) else goto L40
L40:
    r85 = PyList_New(3)
    if is_error(r85) goto L73 (error at n_vec_calculate:228) else goto L41
L41:
    r86 = object 0
    r87 = object 0
    r88 = get_element_ptr r85 ob_item :: PyListObject
    r89 = load_mem r88 :: ptr*
    set_mem r89, r84 :: builtins.object*
    r90 = r89 + 8
    inc_ref r86
    set_mem r90, r86 :: builtins.object*
    r91 = r89 + 16
    inc_ref r87
    set_mem r91, r87 :: builtins.object*
    r92 = numpy :: module
    r93 = 'array'
    r94 = CPyObject_GetAttr(r92, r93)
    if is_error(r94) goto L74 (error at n_vec_calculate:228) else goto L42
L42:
    r95 = [r85]
    r96 = load_address r95
    r97 = _PyObject_Vectorcall(r94, r96, 1, 0)
    dec_ref r94
    if is_error(r97) goto L74 (error at n_vec_calculate:228) else goto L43
L43:
    dec_ref r85
    return r97
L44:
    r98 = object 0
    r99 = PyObject_GetItem(o, r98)
    if is_error(r99) goto L62 (error at n_vec_calculate:229) else goto L45
L45:
    r100 = object 0
    r101 = PyObject_GetItem(corner_center, r100)
    if is_error(r101) goto L75 (error at n_vec_calculate:229) else goto L46
L46:
    r102 = PyObject_RichCompare(r99, r101, 5)
    dec_ref r99
    dec_ref r101
    if is_error(r102) goto L62 (error at n_vec_calculate:229) else goto L47
L47:
    r103 = object 1
    r104 = PyObject_GetItem(o, r103)
    if is_error(r104) goto L76 (error at n_vec_calculate:229) else goto L48
L48:
    r105 = object 1
    r106 = PyObject_GetItem(corner_center, r105)
    if is_error(r106) goto L77 (error at n_vec_calculate:229) else goto L49
L49:
    r107 = PyObject_RichCompare(r104, r106, 1)
    dec_ref r104
    dec_ref r106
    if is_error(r107) goto L76 (error at n_vec_calculate:229) else goto L50
L50:
    r108 = PyNumber_And(r102, r107)
    dec_ref r102
    dec_ref r107
    if is_error(r108) goto L62 (error at n_vec_calculate:229) else goto L51
L51:
    r109 = PyObject_IsTrue(r108)
    dec_ref r108
    r110 = r109 >= 0 :: signed
    if not r110 goto L62 (error at n_vec_calculate:229) else goto L52 :: bool
L52:
    r111 = truncate r109: i32 to builtins.bool
    if r111 goto L53 else goto L56 :: bool
L53:
    r112 = PyNumber_Subtract(o, corner_center)
    if is_error(r112) goto L62 (error at n_vec_calculate:230) else goto L54
L54:
    r113 = self.normalize(r112)
    dec_ref r112
    if is_error(r113) goto L62 (error at n_vec_calculate:230) else goto L55
L55:
    return r113
L56:
    r114 = PyList_New(3)
    if is_error(r114) goto L62 (error at n_vec_calculate:232) else goto L57
L57:
    r115 = object 0
    r116 = object 0
    r117 = object 0
    r118 = get_element_ptr r114 ob_item :: PyListObject
    r119 = load_mem r118 :: ptr*
    inc_ref r115
    set_mem r119, r115 :: builtins.object*
    r120 = r119 + 8
    inc_ref r116
    set_mem r120, r116 :: builtins.object*
    r121 = r119 + 16
    inc_ref r117
    set_mem r121, r117 :: builtins.object*
    r122 = numpy :: module
    r123 = 'array'
    r124 = CPyObject_GetAttr(r122, r123)
    if is_error(r124) goto L78 (error at n_vec_calculate:232) else goto L58
L58:
    r125 = [r114]
    r126 = load_address r125
    r127 = _PyObject_Vectorcall(r124, r126, 1, 0)
    dec_ref r124
    if is_error(r127) goto L78 (error at n_vec_calculate:232) else goto L59
L59:
    dec_ref r114
    r128 = PyNumber_Subtract(o, r127)
    dec_ref r127
    if is_error(r128) goto L62 (error at n_vec_calculate:232) else goto L60
L60:
    r129 = self.normalize(r128)
    dec_ref r128
    if is_error(r129) goto L62 (error at n_vec_calculate:232) else goto L61
L61:
    return r129
L62:
    r130 = <error> :: object
    return r130
L63:
    dec_ref r1
    goto L62
L64:
    dec_ref r9
    goto L62
L65:
    dec_ref r23
    goto L62
L66:
    dec_ref r31
    goto L62
L67:
    dec_ref r45
    goto L62
L68:
    dec_ref r53
    goto L62
L69:
    dec_ref r57
    goto L62
L70:
    dec_ref r58
    goto L62
L71:
    dec_ref r72
    goto L62
L72:
    dec_ref r80
    goto L62
L73:
    dec_ref r84
    goto L62
L74:
    dec_ref r85
    goto L62
L75:
    dec_ref r99
    goto L62
L76:
    dec_ref r102
    goto L62
L77:
    dec_ref r102
    dec_ref r104
    goto L62
L78:
    dec_ref r114
    goto L62

def Simulation.particle_path(self, t, phi_range_deg, T1_z, T1_width, T4_z, T4_width, T1_radius, T4_radius, T1_corner, T4_corner, mean_free_path, photons_per_E, prob_scint):
    self :: modTof.Simulation
    t, phi_range_deg, T1_z, T1_width, T4_z, T4_width, T1_radius, T4_radius, T1_corner, T4_corner, mean_free_path, photons_per_E, prob_scint, r0 :: object
    r1 :: str
    r2 :: object
    r3 :: float
    r4 :: bit
    r5 :: float
    r6, r7 :: object
    r8 :: str
    r9, r10, r11 :: object
    r12 :: object[2]
    r13 :: object_ptr
    r14, theta, r15 :: object
    r16 :: str
    r17 :: object
    r18 :: float
    r19 :: bit
    r20 :: object
    r21 :: str
    r22, r23 :: object
    r24 :: float
    r25 :: bit
    r26, r27, r28, r29, r30, r31, r32, r33, r34, r35 :: object
    r36 :: str
    r37 :: object
    r38 :: float
    r39 :: bit
    r40 :: object
    r41 :: str
    r42, r43 :: object
    r44 :: float
    r45 :: bit
    r46, r47, r48, r49, r50, r51, r52, r53, r54, r55 :: object
    r56 :: str
    r57 :: object
    r58 :: object[2]
    r59 :: object_ptr
    r60, phi, r61 :: object
    r62 :: str
    r63 :: object
    r64 :: str
    r65, r66, r67, r68, maxdist, r69, round_const, r70 :: object
    r71 :: str
    r72 :: object
    r73 :: object[1]
    r74 :: object_ptr
    r75, r76, r77 :: object
    r78 :: str
    r79 :: object
    r80 :: object[1]
    r81 :: object_ptr
    r82, r83, r84 :: object
    r85 :: tuple[object, object, object]
    r86 :: object
    r87 :: str
    r88, r89 :: object
    r90 :: object[1]
    r91 :: object_ptr
    r92, o, r93 :: object
    r94 :: str
    r95 :: object
    r96 :: object[1]
    r97 :: object_ptr
    r98, r99 :: object
    r100 :: str
    r101 :: object
    r102 :: object[1]
    r103 :: object_ptr
    r104, r105, r106 :: object
    r107 :: str
    r108 :: object
    r109 :: object[1]
    r110 :: object_ptr
    r111, r112 :: object
    r113 :: str
    r114 :: object
    r115 :: object[1]
    r116 :: object_ptr
    r117, r118, r119 :: object
    r120 :: str
    r121 :: object
    r122 :: object[1]
    r123 :: object_ptr
    r124 :: object
    r125 :: tuple[object, object, object]
    r126 :: object
    r127 :: str
    r128, r129 :: object
    r130 :: str
    r131, r132 :: object
    r133 :: object[2]
    r134 :: object_ptr
    r135, r136, u :: object
    r137 :: list
    r138 :: object
    r139, r140 :: ptr
    photons :: object
    r141 :: list
    r142, r143 :: ptr
    points :: object
    r144 :: list
    r145, r146 :: ptr
    times, r147, r148, cur_o, r149, r150 :: object
    r151 :: str
    r152, next_o, r153, inside_scint, r154, missed, r155, r156, r157 :: object
    r158 :: i32
    r159 :: bit
    r160 :: bool
    r161 :: i32
    r162 :: bit
    r163 :: bool
    r164 :: i32
    r165 :: bit
    r166 :: bool
    r167 :: object
    r168 :: str
    r169 :: object
    r170 :: float
    r171 :: bit
    r172 :: float
    r173, r174 :: object
    r175 :: str
    r176, r177, r178 :: object
    r179 :: object[2]
    r180 :: object_ptr
    r181, r182 :: object
    r183 :: str
    r184 :: object
    r185 :: float
    r186 :: bit
    r187 :: object
    r188 :: str
    r189, r190 :: object
    r191 :: float
    r192 :: bit
    r193, r194, r195, r196, r197, r198, r199, r200, r201, r202 :: object
    r203 :: str
    r204 :: object
    r205 :: float
    r206 :: bit
    r207 :: object
    r208 :: str
    r209, r210 :: object
    r211 :: float
    r212 :: bit
    r213, r214, r215, r216, r217, r218, r219, r220, r221, r222 :: object
    r223 :: str
    r224 :: object
    r225 :: object[2]
    r226 :: object_ptr
    r227, r228 :: object
    r229 :: str
    r230 :: object
    r231 :: str
    r232, r233, r234, r235, r236, r237, r238 :: object
    r239 :: str
    r240 :: object
    r241 :: object[1]
    r242 :: object_ptr
    r243, r244, r245 :: object
    r246 :: str
    r247 :: object
    r248 :: object[1]
    r249 :: object_ptr
    r250, r251, r252, r253, r254 :: object
    r255 :: tuple[object, object, object]
    r256 :: object
    r257 :: str
    r258, r259 :: object
    r260 :: object[1]
    r261 :: object_ptr
    r262, r263 :: object
    r264 :: str
    r265 :: object
    r266 :: object[1]
    r267 :: object_ptr
    r268, r269 :: object
    r270 :: str
    r271 :: object
    r272 :: object[1]
    r273 :: object_ptr
    r274, r275, r276 :: object
    r277 :: str
    r278 :: object
    r279 :: object[1]
    r280 :: object_ptr
    r281, r282 :: object
    r283 :: str
    r284 :: object
    r285 :: object[1]
    r286 :: object_ptr
    r287, r288, r289 :: object
    r290 :: str
    r291 :: object
    r292 :: object[1]
    r293 :: object_ptr
    r294 :: object
    r295 :: tuple[object, object, object]
    r296 :: object
    r297 :: str
    r298, r299 :: object
    r300 :: str
    r301, r302 :: object
    r303 :: object[2]
    r304 :: object_ptr
    r305, r306 :: object
    r307 :: str
    r308 :: object
    r309 :: str
    r310 :: object
    r311 :: str
    r312 :: object
    r313 :: list
    r314 :: object
    r315, r316 :: ptr
    r317 :: list
    r318, r319 :: ptr
    r320 :: list
    r321, r322 :: ptr
    r323, r324, r325, r326 :: object
    r327 :: str
    r328, r329, r330, r331, r332, r333, r334, r335, r336, r337 :: object
    r338 :: str
    r339 :: object
    r340 :: object[1]
    r341 :: object_ptr
    r342, distT1, r343, r344, r345, r346, r347, r348, r349, r350 :: object
    r351 :: str
    r352 :: object
    r353 :: object[1]
    r354 :: object_ptr
    r355, distT4, r356, r357, r358 :: object
    r359 :: i32
    r360 :: bit
    r361 :: bool
    r362, dist, r363, r364 :: object
    r365 :: str
    r366, check, r367, r368, r369, r370, r371, inside_T1, r372, r373, r374, r375, r376, inside_T4, r377, r378, r379 :: object
    r380 :: i32
    r381 :: bit
    r382 :: bool
    r383, scint_cond :: object
    r384 :: i32
    r385 :: bit
    r386 :: bool
    r387, r388, r389 :: object
    r390 :: str
    r391, r392, r393, r394, r395, r396, r397 :: object
    r398 :: str
    r399, r400 :: object
    r401 :: str
    r402 :: object
    r403 :: str
    r404 :: object
    r405 :: object[1]
    r406 :: object_ptr
    r407, phot, r408 :: object
    r409 :: str
    r410 :: object
    r411 :: str
    r412, r413, r414 :: object
    r415 :: i32
    r416 :: bit
    r417 :: bool
    r418 :: str
    r419 :: object
    r420 :: str
    r421, r422, r423, r424, r425, r426 :: object
    r427 :: str
    r428, r429, r430, r431, r432, r433 :: object
    r434 :: tuple[object, object, object, object, object]
    r435, r436 :: object
    r437 :: tuple[object, object, object, object, object]
    r438 :: list
    r439, r440 :: object
    r441, r442, r443 :: ptr
    r444 :: short_int
    r445 :: ptr
    r446 :: native_int
    r447 :: short_int
    r448 :: bit
    r449, r450, r451 :: object
    r452 :: bool
    Tbottom, r453 :: object
    r454 :: bool
    Ttop, r455 :: object
    r456 :: bool
    Tradius, r457 :: object
    r458 :: bool
    Tcorner, r459 :: object
    r460 :: bool
    num, r461 :: object
    r462 :: bool
    r463, r464, r465, r466, r467, r468, r469, r470, r471, r472, r473 :: object
    r474 :: i32
    r475 :: bit
    r476 :: bool
    r477, r478, r479 :: object
    r480 :: str
    r481, r482, r483 :: object
    r484 :: str
    r485, r486 :: object
    r487 :: str
    r488 :: object
    r489 :: str
    r490 :: object
    r491 :: object[1]
    r492 :: object_ptr
    r493, r494 :: object
    r495 :: str
    r496 :: object
    r497 :: str
    r498, r499, r500 :: object
    r501 :: i32
    r502 :: bit
    r503 :: bool
    r504 :: str
    r505 :: object
    r506 :: str
    r507, r508, r509, r510, r511, r512 :: object
    r513 :: str
    r514, r515, r516, r517, r518, r519, r520, r521, r522, r523, r524, r525 :: object
    r526 :: short_int
    r527 :: object
    r528 :: str
    r529, r530 :: object
    r531 :: str
    r532 :: object
    r533 :: object[2]
    r534 :: object_ptr
    r535, r536, r537, r538, r539, r540, r541, r542 :: object
    r543 :: str
    r544, r545 :: object
    r546 :: str
    r547 :: object
    r548 :: object[2]
    r549 :: object_ptr
    r550, r551, r552, r553, r554, r555, r556, r557, r558, r559, r560, r561, r562 :: object
    r563 :: str
    r564, r565 :: object
    r566 :: str
    r567 :: object
    r568 :: object[2]
    r569 :: object_ptr
    r570, r571 :: object
    r572 :: tuple[object, object, object]
    r573, r574 :: object
L0:
    r0 = numpy :: module
    r1 = 'pi'
    r2 = CPyObject_GetAttr(r0, r1)
    if is_error(r2) goto L287 (error at particle_path:251) else goto L1
L1:
    r3 = unbox(float, r2)
    dec_ref r2
    r4 = r3 == -113.0
    if r4 goto L3 else goto L2 :: bool
L2:
    r5 = 2.0 * r3
    r6 = box(float, r5)
    r7 = random :: module
    r8 = 'uniform'
    r9 = CPyObject_GetAttr(r7, r8)
    if is_error(r9) goto L288 (error at particle_path:251) else goto L4
L3:
    r10 = PyErr_Occurred()
    if not is_error(r10) goto L287 (error at particle_path:251) else goto L2
L4:
    r11 = object 0
    r12 = [r11, r6]
    r13 = load_address r12
    r14 = _PyObject_Vectorcall(r9, r13, 2, 0)
    dec_ref r9
    if is_error(r14) goto L288 (error at particle_path:251) else goto L5
L5:
    dec_ref r6
    theta = r14
    r15 = numpy :: module
    r16 = 'pi'
    r17 = CPyObject_GetAttr(r15, r16)
    if is_error(r17) goto L289 (error at particle_path:252) else goto L6
L6:
    r18 = unbox(float, r17)
    dec_ref r17
    r19 = r18 == -113.0
    if r19 goto L8 else goto L7 :: bool
L7:
    r20 = numpy :: module
    r21 = 'pi'
    r22 = CPyObject_GetAttr(r20, r21)
    if is_error(r22) goto L289 (error at particle_path:252) else goto L9
L8:
    r23 = PyErr_Occurred()
    if not is_error(r23) goto L289 (error at particle_path:252) else goto L7
L9:
    r24 = unbox(float, r22)
    dec_ref r22
    r25 = r24 == -113.0
    if r25 goto L11 else goto L10 :: bool
L10:
    r26 = box(float, r24)
    r27 = PyNumber_Multiply(phi_range_deg, r26)
    dec_ref r26
    if is_error(r27) goto L289 (error at particle_path:252) else goto L12
L11:
    r28 = PyErr_Occurred()
    if not is_error(r28) goto L289 (error at particle_path:252) else goto L10
L12:
    r29 = object 180
    r30 = PyNumber_TrueDivide(r27, r29)
    dec_ref r27
    if is_error(r30) goto L289 (error at particle_path:252) else goto L13
L13:
    r31 = object 2
    r32 = PyNumber_TrueDivide(r30, r31)
    dec_ref r30
    if is_error(r32) goto L289 (error at particle_path:252) else goto L14
L14:
    r33 = box(float, r18)
    r34 = PyNumber_Subtract(r33, r32)
    dec_ref r33
    dec_ref r32
    if is_error(r34) goto L289 (error at particle_path:252) else goto L15
L15:
    r35 = numpy :: module
    r36 = 'pi'
    r37 = CPyObject_GetAttr(r35, r36)
    if is_error(r37) goto L290 (error at particle_path:252) else goto L16
L16:
    r38 = unbox(float, r37)
    dec_ref r37
    r39 = r38 == -113.0
    if r39 goto L18 else goto L17 :: bool
L17:
    r40 = numpy :: module
    r41 = 'pi'
    r42 = CPyObject_GetAttr(r40, r41)
    if is_error(r42) goto L290 (error at particle_path:252) else goto L19
L18:
    r43 = PyErr_Occurred()
    if not is_error(r43) goto L290 (error at particle_path:252) else goto L17
L19:
    r44 = unbox(float, r42)
    dec_ref r42
    r45 = r44 == -113.0
    if r45 goto L21 else goto L20 :: bool
L20:
    r46 = box(float, r44)
    r47 = PyNumber_Multiply(phi_range_deg, r46)
    dec_ref r46
    if is_error(r47) goto L290 (error at particle_path:252) else goto L22
L21:
    r48 = PyErr_Occurred()
    if not is_error(r48) goto L290 (error at particle_path:252) else goto L20
L22:
    r49 = object 180
    r50 = PyNumber_TrueDivide(r47, r49)
    dec_ref r47
    if is_error(r50) goto L290 (error at particle_path:252) else goto L23
L23:
    r51 = object 2
    r52 = PyNumber_TrueDivide(r50, r51)
    dec_ref r50
    if is_error(r52) goto L290 (error at particle_path:252) else goto L24
L24:
    r53 = box(float, r38)
    r54 = PyNumber_Add(r53, r52)
    dec_ref r53
    dec_ref r52
    if is_error(r54) goto L290 (error at particle_path:252) else goto L25
L25:
    r55 = random :: module
    r56 = 'uniform'
    r57 = CPyObject_GetAttr(r55, r56)
    if is_error(r57) goto L291 (error at particle_path:252) else goto L26
L26:
    r58 = [r34, r54]
    r59 = load_address r58
    r60 = _PyObject_Vectorcall(r57, r59, 2, 0)
    dec_ref r57
    if is_error(r60) goto L291 (error at particle_path:252) else goto L27
L27:
    dec_ref r34
    dec_ref r54
    phi = r60
    r61 = numpy :: module
    r62 = 'random'
    r63 = CPyObject_GetAttr(r61, r62)
    if is_error(r63) goto L292 (error at particle_path:253) else goto L28
L28:
    r64 = 'random'
    r65 = CPyObject_GetAttr(r63, r64)
    dec_ref r63
    if is_error(r65) goto L292 (error at particle_path:253) else goto L29
L29:
    r66 = _PyObject_Vectorcall(r65, 0, 0, 0)
    dec_ref r65
    if is_error(r66) goto L292 (error at particle_path:253) else goto L30
L30:
    r67 = self.particle_gen_area
    r68 = PyNumber_Multiply(r66, r67)
    dec_ref r66
    dec_ref r67
    if is_error(r68) goto L292 (error at particle_path:253) else goto L31
L31:
    maxdist = r68
    r69 = self.round_to_sig(mean_free_path)
    if is_error(r69) goto L293 (error at particle_path:254) else goto L32
L32:
    round_const = r69
    r70 = numpy :: module
    r71 = 'cos'
    r72 = CPyObject_GetAttr(r70, r71)
    if is_error(r72) goto L294 (error at particle_path:255) else goto L33
L33:
    r73 = [theta]
    r74 = load_address r73
    r75 = _PyObject_Vectorcall(r72, r74, 1, 0)
    dec_ref r72
    if is_error(r75) goto L294 (error at particle_path:255) else goto L34
L34:
    r76 = PyNumber_Multiply(maxdist, r75)
    dec_ref r75
    if is_error(r76) goto L294 (error at particle_path:255) else goto L35
L35:
    r77 = numpy :: module
    r78 = 'sin'
    r79 = CPyObject_GetAttr(r77, r78)
    if is_error(r79) goto L295 (error at particle_path:255) else goto L36
L36:
    r80 = [theta]
    r81 = load_address r80
    r82 = _PyObject_Vectorcall(r79, r81, 1, 0)
    dec_ref r79
    if is_error(r82) goto L295 (error at particle_path:255) else goto L37
L37:
    r83 = PyNumber_Multiply(maxdist, r82)
    dec_ref maxdist
    dec_ref r82
    if is_error(r83) goto L296 (error at particle_path:255) else goto L38
L38:
    r84 = self.particle_gen_z
    r85 = (r76, r83, r84)
    dec_ref r76
    dec_ref r83
    dec_ref r84
    r86 = numpy :: module
    r87 = 'float64'
    r88 = CPyObject_GetAttr(r86, r87)
    if is_error(r88) goto L297 (error at particle_path:255) else goto L39
L39:
    r89 = box(tuple[object, object, object], r85)
    r90 = [r89]
    r91 = load_address r90
    r92 = _PyObject_Vectorcall(r88, r91, 1, 0)
    dec_ref r88
    if is_error(r92) goto L298 (error at particle_path:255) else goto L40
L40:
    dec_ref r89
    o = r92
    r93 = numpy :: module
    r94 = 'cos'
    r95 = CPyObject_GetAttr(r93, r94)
    if is_error(r95) goto L299 (error at particle_path:256) else goto L41
L41:
    r96 = [theta]
    r97 = load_address r96
    r98 = _PyObject_Vectorcall(r95, r97, 1, 0)
    dec_ref r95
    if is_error(r98) goto L299 (error at particle_path:256) else goto L42
L42:
    r99 = numpy :: module
    r100 = 'sin'
    r101 = CPyObject_GetAttr(r99, r100)
    if is_error(r101) goto L300 (error at particle_path:256) else goto L43
L43:
    r102 = [phi]
    r103 = load_address r102
    r104 = _PyObject_Vectorcall(r101, r103, 1, 0)
    dec_ref r101
    if is_error(r104) goto L300 (error at particle_path:256) else goto L44
L44:
    r105 = PyNumber_Multiply(r98, r104)
    dec_ref r98
    dec_ref r104
    if is_error(r105) goto L299 (error at particle_path:256) else goto L45
L45:
    r106 = numpy :: module
    r107 = 'sin'
    r108 = CPyObject_GetAttr(r106, r107)
    if is_error(r108) goto L301 (error at particle_path:256) else goto L46
L46:
    r109 = [theta]
    r110 = load_address r109
    r111 = _PyObject_Vectorcall(r108, r110, 1, 0)
    dec_ref r108
    if is_error(r111) goto L301 (error at particle_path:256) else goto L47
L47:
    dec_ref theta
    r112 = numpy :: module
    r113 = 'sin'
    r114 = CPyObject_GetAttr(r112, r113)
    if is_error(r114) goto L302 (error at particle_path:256) else goto L48
L48:
    r115 = [phi]
    r116 = load_address r115
    r117 = _PyObject_Vectorcall(r114, r116, 1, 0)
    dec_ref r114
    if is_error(r117) goto L302 (error at particle_path:256) else goto L49
L49:
    r118 = PyNumber_Multiply(r111, r117)
    dec_ref r111
    dec_ref r117
    if is_error(r118) goto L303 (error at particle_path:256) else goto L50
L50:
    r119 = numpy :: module
    r120 = 'cos'
    r121 = CPyObject_GetAttr(r119, r120)
    if is_error(r121) goto L304 (error at particle_path:256) else goto L51
L51:
    r122 = [phi]
    r123 = load_address r122
    r124 = _PyObject_Vectorcall(r121, r123, 1, 0)
    dec_ref r121
    if is_error(r124) goto L304 (error at particle_path:256) else goto L52
L52:
    dec_ref phi
    r125 = (r105, r118, r124)
    dec_ref r105
    dec_ref r118
    dec_ref r124
    r126 = numpy :: module
    r127 = 'float64'
    r128 = CPyObject_GetAttr(r126, r127)
    if is_error(r128) goto L305 (error at particle_path:256) else goto L53
L53:
    r129 = numpy :: module
    r130 = 'array'
    r131 = CPyObject_GetAttr(r129, r130)
    if is_error(r131) goto L306 (error at particle_path:256) else goto L54
L54:
    r132 = box(tuple[object, object, object], r125)
    r133 = [r132, r128]
    r134 = load_address r133
    r135 = ('dtype',)
    r136 = _PyObject_Vectorcall(r131, r134, 1, r135)
    dec_ref r131
    if is_error(r136) goto L307 (error at particle_path:256) else goto L55
L55:
    dec_ref r132
    dec_ref r128
    u = r136
    r137 = PyList_New(1)
    if is_error(r137) goto L308 (error at particle_path:258) else goto L56
L56:
    r138 = object 0
    r139 = get_element_ptr r137 ob_item :: PyListObject
    r140 = load_mem r139 :: ptr*
    inc_ref r138
    set_mem r140, r138 :: builtins.object*
    photons = r137
    r141 = PyList_New(1)
    if is_error(r141) goto L309 (error at particle_path:259) else goto L57
L57:
    r142 = get_element_ptr r141 ob_item :: PyListObject
    r143 = load_mem r142 :: ptr*
    set_mem r143, o :: builtins.object*
    points = r141
    r144 = PyList_New(1)
    if is_error(r144) goto L310 (error at particle_path:260) else goto L58
L58:
    r145 = get_element_ptr r144 ob_item :: PyListObject
    r146 = load_mem r145 :: ptr*
    inc_ref t
    set_mem r146, t :: builtins.object*
    times = r144
    r147 = object -1
    r148 = PyObject_GetItem(points, r147)
    if is_error(r148) goto L311 (error at particle_path:261) else goto L59
L59:
    cur_o = r148
    r149 = PyNumber_Multiply(mean_free_path, u)
    if is_error(r149) goto L312 (error at particle_path:262) else goto L60
L60:
    r150 = PyNumber_Add(cur_o, r149)
    dec_ref r149
    if is_error(r150) goto L312 (error at particle_path:262) else goto L61
L61:
    r151 = 'round'
    r152 = CPyObject_CallMethodObjArgs(r150, r151, round_const, 0)
    dec_ref r150
    if is_error(r152) goto L312 (error at particle_path:262) else goto L62
L62:
    next_o = r152
    r153 = box(bool, 0)
    inc_ref r153
    inside_scint = r153
    r154 = object 0
    inc_ref r154
    missed = r154
    goto L313
L63:
    r155 = object 2
    r156 = PyObject_GetItem(next_o, r155)
    if is_error(r156) goto L314 (error at particle_path:265) else goto L64
L64:
    r157 = PyObject_RichCompare(r156, T4_z, 5)
    dec_ref r156
    if is_error(r157) goto L314 (error at particle_path:265) else goto L65
L65:
    r158 = PyObject_IsTrue(r157)
    dec_ref r157
    r159 = r158 >= 0 :: signed
    if not r159 goto L314 (error at particle_path:265) else goto L66 :: bool
L66:
    r160 = truncate r158: i32 to builtins.bool
    if r160 goto L67 else goto L315 :: bool
L67:
    r161 = PyObject_IsTrue(inside_scint)
    r162 = r161 >= 0 :: signed
    if not r162 goto L314 (error at particle_path:263) else goto L68 :: bool
L68:
    r163 = truncate r161: i32 to builtins.bool
    if r163 goto L203 else goto L316 :: bool
L69:
    r164 = PyObject_IsTrue(missed)
    r165 = r164 >= 0 :: signed
    if not r165 goto L317 (error at particle_path:264) else goto L70 :: bool
L70:
    r166 = truncate r164: i32 to builtins.bool
    if r166 goto L318 else goto L140 :: bool
L71:
    r167 = numpy :: module
    r168 = 'pi'
    r169 = CPyObject_GetAttr(r167, r168)
    if is_error(r169) goto L319 (error at particle_path:268) else goto L72
L72:
    r170 = unbox(float, r169)
    dec_ref r169
    r171 = r170 == -113.0
    if r171 goto L74 else goto L73 :: bool
L73:
    r172 = 2.0 * r170
    r173 = box(float, r172)
    r174 = random :: module
    r175 = 'uniform'
    r176 = CPyObject_GetAttr(r174, r175)
    if is_error(r176) goto L320 (error at particle_path:268) else goto L75
L74:
    r177 = PyErr_Occurred()
    if not is_error(r177) goto L319 (error at particle_path:268) else goto L73
L75:
    r178 = object 0
    r179 = [r178, r173]
    r180 = load_address r179
    r181 = _PyObject_Vectorcall(r176, r180, 2, 0)
    dec_ref r176
    if is_error(r181) goto L320 (error at particle_path:268) else goto L76
L76:
    dec_ref r173
    theta = r181
    r182 = numpy :: module
    r183 = 'pi'
    r184 = CPyObject_GetAttr(r182, r183)
    if is_error(r184) goto L321 (error at particle_path:269) else goto L77
L77:
    r185 = unbox(float, r184)
    dec_ref r184
    r186 = r185 == -113.0
    if r186 goto L79 else goto L78 :: bool
L78:
    r187 = numpy :: module
    r188 = 'pi'
    r189 = CPyObject_GetAttr(r187, r188)
    if is_error(r189) goto L321 (error at particle_path:269) else goto L80
L79:
    r190 = PyErr_Occurred()
    if not is_error(r190) goto L321 (error at particle_path:269) else goto L78
L80:
    r191 = unbox(float, r189)
    dec_ref r189
    r192 = r191 == -113.0
    if r192 goto L82 else goto L81 :: bool
L81:
    r193 = box(float, r191)
    r194 = PyNumber_Multiply(phi_range_deg, r193)
    dec_ref r193
    if is_error(r194) goto L321 (error at particle_path:269) else goto L83
L82:
    r195 = PyErr_Occurred()
    if not is_error(r195) goto L321 (error at particle_path:269) else goto L81
L83:
    r196 = object 180
    r197 = PyNumber_TrueDivide(r194, r196)
    dec_ref r194
    if is_error(r197) goto L321 (error at particle_path:269) else goto L84
L84:
    r198 = object 2
    r199 = PyNumber_TrueDivide(r197, r198)
    dec_ref r197
    if is_error(r199) goto L321 (error at particle_path:269) else goto L85
L85:
    r200 = box(float, r185)
    r201 = PyNumber_Subtract(r200, r199)
    dec_ref r200
    dec_ref r199
    if is_error(r201) goto L321 (error at particle_path:269) else goto L86
L86:
    r202 = numpy :: module
    r203 = 'pi'
    r204 = CPyObject_GetAttr(r202, r203)
    if is_error(r204) goto L322 (error at particle_path:269) else goto L87
L87:
    r205 = unbox(float, r204)
    dec_ref r204
    r206 = r205 == -113.0
    if r206 goto L89 else goto L88 :: bool
L88:
    r207 = numpy :: module
    r208 = 'pi'
    r209 = CPyObject_GetAttr(r207, r208)
    if is_error(r209) goto L322 (error at particle_path:269) else goto L90
L89:
    r210 = PyErr_Occurred()
    if not is_error(r210) goto L322 (error at particle_path:269) else goto L88
L90:
    r211 = unbox(float, r209)
    dec_ref r209
    r212 = r211 == -113.0
    if r212 goto L92 else goto L91 :: bool
L91:
    r213 = box(float, r211)
    r214 = PyNumber_Multiply(phi_range_deg, r213)
    dec_ref r213
    if is_error(r214) goto L322 (error at particle_path:269) else goto L93
L92:
    r215 = PyErr_Occurred()
    if not is_error(r215) goto L322 (error at particle_path:269) else goto L91
L93:
    r216 = object 180
    r217 = PyNumber_TrueDivide(r214, r216)
    dec_ref r214
    if is_error(r217) goto L322 (error at particle_path:269) else goto L94
L94:
    r218 = object 2
    r219 = PyNumber_TrueDivide(r217, r218)
    dec_ref r217
    if is_error(r219) goto L322 (error at particle_path:269) else goto L95
L95:
    r220 = box(float, r205)
    r221 = PyNumber_Add(r220, r219)
    dec_ref r220
    dec_ref r219
    if is_error(r221) goto L322 (error at particle_path:269) else goto L96
L96:
    r222 = random :: module
    r223 = 'uniform'
    r224 = CPyObject_GetAttr(r222, r223)
    if is_error(r224) goto L323 (error at particle_path:269) else goto L97
L97:
    r225 = [r201, r221]
    r226 = load_address r225
    r227 = _PyObject_Vectorcall(r224, r226, 2, 0)
    dec_ref r224
    if is_error(r227) goto L323 (error at particle_path:269) else goto L98
L98:
    dec_ref r201
    dec_ref r221
    phi = r227
    r228 = numpy :: module
    r229 = 'random'
    r230 = CPyObject_GetAttr(r228, r229)
    if is_error(r230) goto L324 (error at particle_path:270) else goto L99
L99:
    r231 = 'random'
    r232 = CPyObject_GetAttr(r230, r231)
    dec_ref r230
    if is_error(r232) goto L324 (error at particle_path:270) else goto L100
L100:
    r233 = _PyObject_Vectorcall(r232, 0, 0, 0)
    dec_ref r232
    if is_error(r233) goto L324 (error at particle_path:270) else goto L101
L101:
    r234 = PyNumber_Multiply(r233, T1_radius)
    dec_ref r233
    if is_error(r234) goto L324 (error at particle_path:270) else goto L102
L102:
    r235 = object 2
    r236 = PyNumber_TrueDivide(r234, r235)
    dec_ref r234
    if is_error(r236) goto L324 (error at particle_path:270) else goto L103
L103:
    maxdist = r236
    r237 = self.round_to_sig(mean_free_path)
    if is_error(r237) goto L325 (error at particle_path:271) else goto L104
L104:
    round_const = r237
    r238 = numpy :: module
    r239 = 'cos'
    r240 = CPyObject_GetAttr(r238, r239)
    if is_error(r240) goto L326 (error at particle_path:272) else goto L105
L105:
    r241 = [theta]
    r242 = load_address r241
    r243 = _PyObject_Vectorcall(r240, r242, 1, 0)
    dec_ref r240
    if is_error(r243) goto L326 (error at particle_path:272) else goto L106
L106:
    r244 = PyNumber_Multiply(maxdist, r243)
    dec_ref r243
    if is_error(r244) goto L326 (error at particle_path:272) else goto L107
L107:
    r245 = numpy :: module
    r246 = 'sin'
    r247 = CPyObject_GetAttr(r245, r246)
    if is_error(r247) goto L327 (error at particle_path:272) else goto L108
L108:
    r248 = [theta]
    r249 = load_address r248
    r250 = _PyObject_Vectorcall(r247, r249, 1, 0)
    dec_ref r247
    if is_error(r250) goto L327 (error at particle_path:272) else goto L109
L109:
    r251 = PyNumber_Multiply(maxdist, r250)
    dec_ref maxdist
    dec_ref r250
    if is_error(r251) goto L328 (error at particle_path:272) else goto L110
L110:
    r252 = PyNumber_Add(T1_z, T1_width)
    if is_error(r252) goto L329 (error at particle_path:272) else goto L111
L111:
    r253 = object 2
    r254 = PyNumber_Add(r252, r253)
    dec_ref r252
    if is_error(r254) goto L329 (error at particle_path:272) else goto L112
L112:
    r255 = (r244, r251, r254)
    dec_ref r244
    dec_ref r251
    dec_ref r254
    r256 = numpy :: module
    r257 = 'float64'
    r258 = CPyObject_GetAttr(r256, r257)
    if is_error(r258) goto L330 (error at particle_path:272) else goto L113
L113:
    r259 = box(tuple[object, object, object], r255)
    r260 = [r259]
    r261 = load_address r260
    r262 = _PyObject_Vectorcall(r258, r261, 1, 0)
    dec_ref r258
    if is_error(r262) goto L331 (error at particle_path:272) else goto L114
L114:
    dec_ref r259
    o = r262
    r263 = numpy :: module
    r264 = 'cos'
    r265 = CPyObject_GetAttr(r263, r264)
    if is_error(r265) goto L332 (error at particle_path:273) else goto L115
L115:
    r266 = [theta]
    r267 = load_address r266
    r268 = _PyObject_Vectorcall(r265, r267, 1, 0)
    dec_ref r265
    if is_error(r268) goto L332 (error at particle_path:273) else goto L116
L116:
    r269 = numpy :: module
    r270 = 'sin'
    r271 = CPyObject_GetAttr(r269, r270)
    if is_error(r271) goto L333 (error at particle_path:273) else goto L117
L117:
    r272 = [phi]
    r273 = load_address r272
    r274 = _PyObject_Vectorcall(r271, r273, 1, 0)
    dec_ref r271
    if is_error(r274) goto L333 (error at particle_path:273) else goto L118
L118:
    r275 = PyNumber_Multiply(r268, r274)
    dec_ref r268
    dec_ref r274
    if is_error(r275) goto L332 (error at particle_path:273) else goto L119
L119:
    r276 = numpy :: module
    r277 = 'sin'
    r278 = CPyObject_GetAttr(r276, r277)
    if is_error(r278) goto L334 (error at particle_path:273) else goto L120
L120:
    r279 = [theta]
    r280 = load_address r279
    r281 = _PyObject_Vectorcall(r278, r280, 1, 0)
    dec_ref r278
    if is_error(r281) goto L334 (error at particle_path:273) else goto L121
L121:
    dec_ref theta
    r282 = numpy :: module
    r283 = 'sin'
    r284 = CPyObject_GetAttr(r282, r283)
    if is_error(r284) goto L335 (error at particle_path:273) else goto L122
L122:
    r285 = [phi]
    r286 = load_address r285
    r287 = _PyObject_Vectorcall(r284, r286, 1, 0)
    dec_ref r284
    if is_error(r287) goto L335 (error at particle_path:273) else goto L123
L123:
    r288 = PyNumber_Multiply(r281, r287)
    dec_ref r281
    dec_ref r287
    if is_error(r288) goto L336 (error at particle_path:273) else goto L124
L124:
    r289 = numpy :: module
    r290 = 'cos'
    r291 = CPyObject_GetAttr(r289, r290)
    if is_error(r291) goto L337 (error at particle_path:273) else goto L125
L125:
    r292 = [phi]
    r293 = load_address r292
    r294 = _PyObject_Vectorcall(r291, r293, 1, 0)
    dec_ref r291
    if is_error(r294) goto L337 (error at particle_path:273) else goto L126
L126:
    dec_ref phi
    r295 = (r275, r288, r294)
    dec_ref r275
    dec_ref r288
    dec_ref r294
    r296 = numpy :: module
    r297 = 'float64'
    r298 = CPyObject_GetAttr(r296, r297)
    if is_error(r298) goto L338 (error at particle_path:273) else goto L127
L127:
    r299 = numpy :: module
    r300 = 'array'
    r301 = CPyObject_GetAttr(r299, r300)
    if is_error(r301) goto L339 (error at particle_path:273) else goto L128
L128:
    r302 = box(tuple[object, object, object], r295)
    r303 = [r302, r298]
    r304 = load_address r303
    r305 = ('dtype',)
    r306 = _PyObject_Vectorcall(r301, r304, 1, r305)
    dec_ref r301
    if is_error(r306) goto L340 (error at particle_path:273) else goto L129
L129:
    dec_ref r302
    dec_ref r298
    u = r306
    r307 = 'clear'
    r308 = CPyObject_CallMethodObjArgs(photons, r307, 0)
    dec_ref photons
    if is_error(r308) goto L341 (error at particle_path:274) else goto L342
L130:
    r309 = 'clear'
    r310 = CPyObject_CallMethodObjArgs(points, r309, 0)
    dec_ref points
    if is_error(r310) goto L343 (error at particle_path:274) else goto L344
L131:
    r311 = 'clear'
    r312 = CPyObject_CallMethodObjArgs(times, r311, 0)
    dec_ref times
    if is_error(r312) goto L345 (error at particle_path:274) else goto L346
L132:
    r313 = PyList_New(1)
    if is_error(r313) goto L345 (error at particle_path:275) else goto L133
L133:
    r314 = object 0
    r315 = get_element_ptr r313 ob_item :: PyListObject
    r316 = load_mem r315 :: ptr*
    inc_ref r314
    set_mem r316, r314 :: builtins.object*
    photons = r313
    r317 = PyList_New(1)
    if is_error(r317) goto L347 (error at particle_path:276) else goto L134
L134:
    r318 = get_element_ptr r317 ob_item :: PyListObject
    r319 = load_mem r318 :: ptr*
    set_mem r319, o :: builtins.object*
    points = r317
    r320 = PyList_New(1)
    if is_error(r320) goto L348 (error at particle_path:277) else goto L135
L135:
    r321 = get_element_ptr r320 ob_item :: PyListObject
    r322 = load_mem r321 :: ptr*
    inc_ref t
    set_mem r322, t :: builtins.object*
    times = r320
    r323 = object -1
    r324 = PyObject_GetItem(points, r323)
    if is_error(r324) goto L349 (error at particle_path:278) else goto L136
L136:
    cur_o = r324
    r325 = PyNumber_Multiply(mean_free_path, u)
    if is_error(r325) goto L350 (error at particle_path:279) else goto L137
L137:
    r326 = PyNumber_Add(cur_o, r325)
    dec_ref r325
    if is_error(r326) goto L350 (error at particle_path:279) else goto L138
L138:
    r327 = 'round'
    r328 = CPyObject_CallMethodObjArgs(r326, r327, round_const, 0)
    dec_ref r326
    if is_error(r328) goto L350 (error at particle_path:279) else goto L139
L139:
    next_o = r328
    r329 = box(bool, 0)
    inc_ref r329
    missed = r329
L140:
    r330 = PyNumber_Add(T1_z, T1_width)
    if is_error(r330) goto L317 (error at particle_path:281) else goto L141
L141:
    r331 = object 2
    r332 = PyObject_GetItem(cur_o, r331)
    if is_error(r332) goto L351 (error at particle_path:281) else goto L142
L142:
    r333 = PyNumber_Subtract(r330, r332)
    dec_ref r330
    dec_ref r332
    if is_error(r333) goto L317 (error at particle_path:281) else goto L143
L143:
    r334 = object 2
    r335 = PyObject_GetItem(u, r334)
    if is_error(r335) goto L352 (error at particle_path:281) else goto L144
L144:
    r336 = PyNumber_TrueDivide(r333, r335)
    dec_ref r333
    dec_ref r335
    if is_error(r336) goto L317 (error at particle_path:281) else goto L145
L145:
    r337 = numpy :: module
    r338 = 'abs'
    r339 = CPyObject_GetAttr(r337, r338)
    if is_error(r339) goto L353 (error at particle_path:281) else goto L146
L146:
    r340 = [r336]
    r341 = load_address r340
    r342 = _PyObject_Vectorcall(r339, r341, 1, 0)
    dec_ref r339
    if is_error(r342) goto L353 (error at particle_path:281) else goto L147
L147:
    dec_ref r336
    distT1 = r342
    r343 = PyNumber_Add(T4_z, T4_width)
    if is_error(r343) goto L354 (error at particle_path:282) else goto L148
L148:
    r344 = object 2
    r345 = PyObject_GetItem(cur_o, r344)
    if is_error(r345) goto L355 (error at particle_path:282) else goto L149
L149:
    r346 = PyNumber_Subtract(r343, r345)
    dec_ref r343
    dec_ref r345
    if is_error(r346) goto L354 (error at particle_path:282) else goto L150
L150:
    r347 = object 2
    r348 = PyObject_GetItem(u, r347)
    if is_error(r348) goto L356 (error at particle_path:282) else goto L151
L151:
    r349 = PyNumber_TrueDivide(r346, r348)
    dec_ref r346
    dec_ref r348
    if is_error(r349) goto L354 (error at particle_path:282) else goto L152
L152:
    r350 = numpy :: module
    r351 = 'abs'
    r352 = CPyObject_GetAttr(r350, r351)
    if is_error(r352) goto L357 (error at particle_path:282) else goto L153
L153:
    r353 = [r349]
    r354 = load_address r353
    r355 = _PyObject_Vectorcall(r352, r354, 1, 0)
    dec_ref r352
    if is_error(r355) goto L357 (error at particle_path:282) else goto L154
L154:
    dec_ref r349
    distT4 = r355
    r356 = object 2
    r357 = PyObject_GetItem(next_o, r356)
    if is_error(r357) goto L358 (error at particle_path:283) else goto L155
L155:
    r358 = PyObject_RichCompare(r357, T1_z, 0)
    dec_ref r357
    if is_error(r358) goto L358 (error at particle_path:283) else goto L156
L156:
    r359 = PyObject_IsTrue(r358)
    dec_ref r358
    r360 = r359 >= 0 :: signed
    if not r360 goto L358 (error at particle_path:283) else goto L157 :: bool
L157:
    r361 = truncate r359: i32 to builtins.bool
    if r361 goto L359 else goto L360 :: bool
L158:
    r362 = distT4
    goto L160
L159:
    r362 = distT1
L160:
    dist = r362
    r363 = PyNumber_Multiply(dist, u)
    if is_error(r363) goto L361 (error at particle_path:284) else goto L161
L161:
    r364 = PyNumber_Add(cur_o, r363)
    dec_ref r363
    if is_error(r364) goto L361 (error at particle_path:284) else goto L162
L162:
    r365 = 'round'
    r366 = CPyObject_CallMethodObjArgs(r364, r365, round_const, 0)
    dec_ref r364
    if is_error(r366) goto L361 (error at particle_path:284) else goto L163
L163:
    check = r366
    r367 = object 1
    r368 = self.scint_condition(check, T1_radius, r367)
    if is_error(r368) goto L362 (error at particle_path:285) else goto L164
L164:
    r369 = object 1
    r370 = self.lg_condition(check, T1_corner, r369)
    if is_error(r370) goto L363 (error at particle_path:285) else goto L165
L165:
    r371 = PyNumber_Or(r368, r370)
    dec_ref r368
    dec_ref r370
    if is_error(r371) goto L362 (error at particle_path:285) else goto L166
L166:
    inside_T1 = r371
    r372 = object 4
    r373 = self.scint_condition(check, T4_radius, r372)
    if is_error(r373) goto L364 (error at particle_path:286) else goto L167
L167:
    r374 = object 4
    r375 = self.lg_condition(check, T4_corner, r374)
    if is_error(r375) goto L365 (error at particle_path:286) else goto L168
L168:
    r376 = PyNumber_Or(r373, r375)
    dec_ref r373
    dec_ref r375
    if is_error(r376) goto L364 (error at particle_path:286) else goto L169
L169:
    inside_T4 = r376
    r377 = object 2
    r378 = PyObject_GetItem(check, r377)
    dec_ref check
    if is_error(r378) goto L366 (error at particle_path:287) else goto L170
L170:
    r379 = PyObject_RichCompare(r378, T1_z, 0)
    dec_ref r378
    if is_error(r379) goto L366 (error at particle_path:287) else goto L171
L171:
    r380 = PyObject_IsTrue(r379)
    dec_ref r379
    r381 = r380 >= 0 :: signed
    if not r381 goto L366 (error at particle_path:287) else goto L172 :: bool
L172:
    r382 = truncate r380: i32 to builtins.bool
    if r382 goto L367 else goto L368 :: bool
L173:
    r383 = inside_T4
    goto L175
L174:
    r383 = inside_T1
L175:
    scint_cond = r383
    r384 = PyObject_IsTrue(scint_cond)
    dec_ref scint_cond
    r385 = r384 >= 0 :: signed
    if not r385 goto L361 (error at particle_path:287) else goto L176 :: bool
L176:
    r386 = truncate r384: i32 to builtins.bool
    if r386 goto L369 else goto L370 :: bool
L177:
    r387 = self.c
    r388 = PyNumber_TrueDivide(dist, r387)
    dec_ref r387
    if is_error(r388) goto L371 (error at particle_path:291) else goto L178
L178:
    r389 = PyNumber_InPlaceAdd(t, r388)
    dec_ref t
    dec_ref r388
    if is_error(r389) goto L372 (error at particle_path:291) else goto L179
L179:
    t = r389
    r390 = 'append'
    r391 = CPyObject_CallMethodObjArgs(times, r390, t, 0)
    if is_error(r391) goto L371 (error at particle_path:292) else goto L373
L180:
    r392 = object -1
    r393 = PyObject_GetItem(points, r392)
    if is_error(r393) goto L371 (error at particle_path:293) else goto L181
L181:
    r394 = PyNumber_Multiply(dist, u)
    dec_ref dist
    if is_error(r394) goto L374 (error at particle_path:293) else goto L182
L182:
    r395 = PyNumber_Add(r393, r394)
    dec_ref r393
    dec_ref r394
    if is_error(r395) goto L375 (error at particle_path:293) else goto L183
L183:
    r396 = PyNumber_Multiply(mean_free_path, u)
    if is_error(r396) goto L376 (error at particle_path:293) else goto L184
L184:
    r397 = PyNumber_Add(r395, r396)
    dec_ref r395
    dec_ref r396
    if is_error(r397) goto L375 (error at particle_path:293) else goto L185
L185:
    r398 = 'append'
    r399 = CPyObject_CallMethodObjArgs(points, r398, r397, 0)
    dec_ref r397
    if is_error(r399) goto L375 (error at particle_path:293) else goto L377
L186:
    r400 = numpy :: module
    r401 = 'random'
    r402 = CPyObject_GetAttr(r400, r401)
    if is_error(r402) goto L375 (error at particle_path:294) else goto L187
L187:
    r403 = 'poisson'
    r404 = CPyObject_GetAttr(r402, r403)
    dec_ref r402
    if is_error(r404) goto L375 (error at particle_path:294) else goto L188
L188:
    r405 = [photons_per_E]
    r406 = load_address r405
    r407 = _PyObject_Vectorcall(r404, r406, 1, 0)
    dec_ref r404
    if is_error(r407) goto L375 (error at particle_path:294) else goto L189
L189:
    phot = r407
    r408 = numpy :: module
    r409 = 'random'
    r410 = CPyObject_GetAttr(r408, r409)
    if is_error(r410) goto L378 (error at particle_path:295) else goto L190
L190:
    r411 = 'random'
    r412 = CPyObject_GetAttr(r410, r411)
    dec_ref r410
    if is_error(r412) goto L378 (error at particle_path:295) else goto L191
L191:
    r413 = _PyObject_Vectorcall(r412, 0, 0, 0)
    dec_ref r412
    if is_error(r413) goto L378 (error at particle_path:295) else goto L192
L192:
    r414 = PyObject_RichCompare(r413, prob_scint, 0)
    dec_ref r413
    if is_error(r414) goto L378 (error at particle_path:295) else goto L193
L193:
    r415 = PyObject_IsTrue(r414)
    dec_ref r414
    r416 = r415 >= 0 :: signed
    if not r416 goto L378 (error at particle_path:295) else goto L194 :: bool
L194:
    r417 = truncate r415: i32 to builtins.bool
    if r417 goto L195 else goto L379 :: bool
L195:
    r418 = 'append'
    r419 = CPyObject_CallMethodObjArgs(photons, r418, phot, 0)
    dec_ref phot
    if is_error(r419) goto L375 (error at particle_path:295) else goto L380
L196:
    r420 = 'append'
    r421 = object 0
    r422 = CPyObject_CallMethodObjArgs(photons, r420, r421, 0)
    if is_error(r422) goto L375 (error at particle_path:296) else goto L381
L197:
    r423 = object -1
    r424 = PyObject_GetItem(points, r423)
    if is_error(r424) goto L375 (error at particle_path:297) else goto L198
L198:
    cur_o = r424
    r425 = PyNumber_Multiply(mean_free_path, u)
    if is_error(r425) goto L382 (error at particle_path:298) else goto L199
L199:
    r426 = PyNumber_Add(cur_o, r425)
    dec_ref r425
    if is_error(r426) goto L382 (error at particle_path:298) else goto L200
L200:
    r427 = 'round'
    r428 = CPyObject_CallMethodObjArgs(r426, r427, round_const, 0)
    dec_ref r426
    if is_error(r428) goto L382 (error at particle_path:298) else goto L201
L201:
    next_o = r428
    r429 = box(bool, 1)
    inc_ref r429
    inside_scint = r429
    goto L203
L202:
    r430 = box(bool, 1)
    inc_ref r430
    missed = r430
    r431 = box(bool, 0)
    inc_ref r431
    inside_scint = r431
    goto L63
L203:
    r432 = PyNumber_Add(T1_z, T1_width)
    if is_error(r432) goto L314 (error at particle_path:306) else goto L204
L204:
    r433 = object 1
    r434 = (T1_z, r432, T1_radius, T1_corner, r433)
    dec_ref r432
    r435 = PyNumber_Add(T4_z, T4_width)
    if is_error(r435) goto L383 (error at particle_path:306) else goto L205
L205:
    r436 = object 4
    r437 = (T4_z, r435, T4_radius, T4_corner, r436)
    dec_ref r435
    r438 = PyList_New(2)
    if is_error(r438) goto L384 (error at particle_path:306) else goto L206
L206:
    r439 = box(tuple[object, object, object, object, object], r434)
    r440 = box(tuple[object, object, object, object, object], r437)
    r441 = get_element_ptr r438 ob_item :: PyListObject
    r442 = load_mem r441 :: ptr*
    set_mem r442, r439 :: builtins.object*
    r443 = r442 + 8
    set_mem r443, r440 :: builtins.object*
    r444 = 0
L207:
    r445 = get_element_ptr r438 ob_size :: PyVarObject
    r446 = load_mem r445 :: native_int*
    r447 = r446 << 1
    r448 = r444 < r447 :: signed
    if r448 goto L385 else goto L386 :: bool
L208:
    r449 = CPyList_GetItemUnsafe(r438, r444)
    r450 = PyObject_GetIter(r449)
    dec_ref r449
    if is_error(r450) goto L387 (error at particle_path:306) else goto L209
L209:
    r451 = PyIter_Next(r450)
    if is_error(r451) goto L388 else goto L212
L210:
    r452 = raise ValueError('not enough values to unpack')
    if not r452 goto L287 (error at particle_path:306) else goto L211 :: bool
L211:
    unreachable
L212:
    Tbottom = r451
    r453 = PyIter_Next(r450)
    if is_error(r453) goto L389 else goto L215
L213:
    r454 = raise ValueError('not enough values to unpack')
    if not r454 goto L287 (error at particle_path:306) else goto L214 :: bool
L214:
    unreachable
L215:
    Ttop = r453
    r455 = PyIter_Next(r450)
    if is_error(r455) goto L390 else goto L218
L216:
    r456 = raise ValueError('not enough values to unpack')
    if not r456 goto L287 (error at particle_path:306) else goto L217 :: bool
L217:
    unreachable
L218:
    Tradius = r455
    r457 = PyIter_Next(r450)
    if is_error(r457) goto L391 else goto L221
L219:
    r458 = raise ValueError('not enough values to unpack')
    if not r458 goto L287 (error at particle_path:306) else goto L220 :: bool
L220:
    unreachable
L221:
    Tcorner = r457
    r459 = PyIter_Next(r450)
    if is_error(r459) goto L392 else goto L224
L222:
    r460 = raise ValueError('not enough values to unpack')
    if not r460 goto L287 (error at particle_path:306) else goto L223 :: bool
L223:
    unreachable
L224:
    num = r459
    r461 = PyIter_Next(r450)
    dec_ref r450
    if is_error(r461) goto L227 else goto L393
L225:
    r462 = raise ValueError('too many values to unpack')
    if not r462 goto L287 (error at particle_path:306) else goto L226 :: bool
L226:
    unreachable
L227:
    r463 = object 2
    r464 = PyObject_GetItem(next_o, r463)
    if is_error(r464) goto L394 (error at particle_path:307) else goto L228
L228:
    r465 = PyObject_RichCompare(r464, Ttop, 1)
    dec_ref r464
    if is_error(r465) goto L394 (error at particle_path:307) else goto L229
L229:
    r466 = object 2
    r467 = PyObject_GetItem(next_o, r466)
    if is_error(r467) goto L395 (error at particle_path:307) else goto L230
L230:
    r468 = PyObject_RichCompare(r467, Tbottom, 5)
    dec_ref r467
    if is_error(r468) goto L395 (error at particle_path:307) else goto L231
L231:
    r469 = PyNumber_And(r465, r468)
    dec_ref r465
    dec_ref r468
    if is_error(r469) goto L394 (error at particle_path:307) else goto L232
L232:
    r470 = self.scint_condition(next_o, Tradius, num)
    if is_error(r470) goto L396 (error at particle_path:307) else goto L233
L233:
    r471 = self.lg_condition(next_o, Tcorner, num)
    if is_error(r471) goto L397 (error at particle_path:307) else goto L234
L234:
    r472 = PyNumber_Or(r470, r471)
    dec_ref r470
    dec_ref r471
    if is_error(r472) goto L396 (error at particle_path:307) else goto L235
L235:
    r473 = PyNumber_And(r469, r472)
    dec_ref r469
    dec_ref r472
    if is_error(r473) goto L394 (error at particle_path:307) else goto L236
L236:
    inside_scint = r473
L237:
    r474 = PyObject_IsTrue(inside_scint)
    r475 = r474 >= 0 :: signed
    if not r475 goto L398 (error at particle_path:263) else goto L238 :: bool
L238:
    r476 = truncate r474: i32 to builtins.bool
    if r476 goto L399 else goto L400 :: bool
L239:
    r477 = self.c
    r478 = PyNumber_TrueDivide(mean_free_path, r477)
    dec_ref r477
    if is_error(r478) goto L401 (error at particle_path:310) else goto L240
L240:
    r479 = PyNumber_InPlaceAdd(t, r478)
    dec_ref t
    dec_ref r478
    if is_error(r479) goto L402 (error at particle_path:310) else goto L241
L241:
    t = r479
    r480 = 'append'
    r481 = CPyObject_CallMethodObjArgs(times, r480, t, 0)
    if is_error(r481) goto L401 (error at particle_path:311) else goto L403
L242:
    r482 = PyNumber_Multiply(mean_free_path, u)
    if is_error(r482) goto L401 (error at particle_path:312) else goto L243
L243:
    r483 = PyNumber_Add(cur_o, r482)
    dec_ref cur_o
    dec_ref r482
    if is_error(r483) goto L404 (error at particle_path:312) else goto L244
L244:
    r484 = 'append'
    r485 = CPyObject_CallMethodObjArgs(points, r484, r483, 0)
    dec_ref r483
    if is_error(r485) goto L404 (error at particle_path:312) else goto L405
L245:
    r486 = numpy :: module
    r487 = 'random'
    r488 = CPyObject_GetAttr(r486, r487)
    if is_error(r488) goto L404 (error at particle_path:313) else goto L246
L246:
    r489 = 'poisson'
    r490 = CPyObject_GetAttr(r488, r489)
    dec_ref r488
    if is_error(r490) goto L404 (error at particle_path:313) else goto L247
L247:
    r491 = [photons_per_E]
    r492 = load_address r491
    r493 = _PyObject_Vectorcall(r490, r492, 1, 0)
    dec_ref r490
    if is_error(r493) goto L404 (error at particle_path:313) else goto L248
L248:
    phot = r493
    r494 = numpy :: module
    r495 = 'random'
    r496 = CPyObject_GetAttr(r494, r495)
    if is_error(r496) goto L406 (error at particle_path:314) else goto L249
L249:
    r497 = 'random'
    r498 = CPyObject_GetAttr(r496, r497)
    dec_ref r496
    if is_error(r498) goto L406 (error at particle_path:314) else goto L250
L250:
    r499 = _PyObject_Vectorcall(r498, 0, 0, 0)
    dec_ref r498
    if is_error(r499) goto L406 (error at particle_path:314) else goto L251
L251:
    r500 = PyObject_RichCompare(r499, prob_scint, 0)
    dec_ref r499
    if is_error(r500) goto L406 (error at particle_path:314) else goto L252
L252:
    r501 = PyObject_IsTrue(r500)
    dec_ref r500
    r502 = r501 >= 0 :: signed
    if not r502 goto L406 (error at particle_path:314) else goto L253 :: bool
L253:
    r503 = truncate r501: i32 to builtins.bool
    if r503 goto L254 else goto L407 :: bool
L254:
    r504 = 'append'
    r505 = CPyObject_CallMethodObjArgs(photons, r504, phot, 0)
    dec_ref phot
    if is_error(r505) goto L404 (error at particle_path:314) else goto L408
L255:
    r506 = 'append'
    r507 = object 0
    r508 = CPyObject_CallMethodObjArgs(photons, r506, r507, 0)
    if is_error(r508) goto L404 (error at particle_path:315) else goto L409
L256:
    r509 = object -1
    r510 = PyObject_GetItem(points, r509)
    if is_error(r510) goto L404 (error at particle_path:316) else goto L257
L257:
    cur_o = r510
    r511 = PyNumber_Multiply(mean_free_path, u)
    if is_error(r511) goto L401 (error at particle_path:317) else goto L258
L258:
    r512 = PyNumber_Add(cur_o, r511)
    dec_ref r511
    if is_error(r512) goto L401 (error at particle_path:317) else goto L259
L259:
    r513 = 'round'
    r514 = CPyObject_CallMethodObjArgs(r512, r513, round_const, 0)
    dec_ref r512
    if is_error(r514) goto L401 (error at particle_path:317) else goto L260
L260:
    next_o = r514
    r515 = object 2
    r516 = PyObject_GetItem(next_o, r515)
    if is_error(r516) goto L394 (error at particle_path:318) else goto L261
L261:
    r517 = PyObject_RichCompare(r516, Ttop, 1)
    dec_ref r516
    if is_error(r517) goto L394 (error at particle_path:318) else goto L262
L262:
    r518 = object 2
    r519 = PyObject_GetItem(next_o, r518)
    if is_error(r519) goto L410 (error at particle_path:318) else goto L263
L263:
    r520 = PyObject_RichCompare(r519, Tbottom, 5)
    dec_ref r519
    if is_error(r520) goto L410 (error at particle_path:318) else goto L264
L264:
    r521 = PyNumber_And(r517, r520)
    dec_ref r517
    dec_ref r520
    if is_error(r521) goto L394 (error at particle_path:318) else goto L265
L265:
    r522 = self.scint_condition(next_o, Tradius, num)
    if is_error(r522) goto L411 (error at particle_path:318) else goto L266
L266:
    r523 = self.lg_condition(next_o, Tcorner, num)
    if is_error(r523) goto L412 (error at particle_path:318) else goto L267
L267:
    r524 = PyNumber_Or(r522, r523)
    dec_ref r522
    dec_ref r523
    if is_error(r524) goto L411 (error at particle_path:318) else goto L268
L268:
    r525 = PyNumber_And(r521, r524)
    dec_ref r521
    dec_ref r524
    if is_error(r525) goto L394 (error at particle_path:318) else goto L269
L269:
    inside_scint = r525
    goto L237
L270:
    r526 = r444 + 2
    r444 = r526
    goto L207
L271:
    r527 = numpy :: module
    r528 = 'float64'
    r529 = CPyObject_GetAttr(r527, r528)
    if is_error(r529) goto L413 (error at particle_path:320) else goto L272
L272:
    r530 = numpy :: module
    r531 = 'array'
    r532 = CPyObject_GetAttr(r530, r531)
    if is_error(r532) goto L414 (error at particle_path:320) else goto L273
L273:
    r533 = [times, r529]
    r534 = load_address r533
    r535 = ('dtype',)
    r536 = _PyObject_Vectorcall(r532, r534, 1, r535)
    dec_ref r532
    if is_error(r536) goto L414 (error at particle_path:320) else goto L274
L274:
    dec_ref times
    dec_ref r529
    r537 = load_address _Py_NoneStruct
    r538 = load_address _Py_NoneStruct
    r539 = object 1
    r540 = PySlice_New(r539, r537, r538)
    if is_error(r540) goto L415 (error at particle_path:320) else goto L275
L275:
    r541 = PyObject_GetItem(r536, r540)
    dec_ref r536
    dec_ref r540
    if is_error(r541) goto L416 (error at particle_path:320) else goto L276
L276:
    r542 = numpy :: module
    r543 = 'float64'
    r544 = CPyObject_GetAttr(r542, r543)
    if is_error(r544) goto L417 (error at particle_path:320) else goto L277
L277:
    r545 = numpy :: module
    r546 = 'array'
    r547 = CPyObject_GetAttr(r545, r546)
    if is_error(r547) goto L418 (error at particle_path:320) else goto L278
L278:
    r548 = [points, r544]
    r549 = load_address r548
    r550 = ('dtype',)
    r551 = _PyObject_Vectorcall(r547, r549, 1, r550)
    dec_ref r547
    if is_error(r551) goto L418 (error at particle_path:320) else goto L279
L279:
    dec_ref points
    dec_ref r544
    r552 = load_address _Py_NoneStruct
    r553 = load_address _Py_NoneStruct
    r554 = object 1
    r555 = PySlice_New(r554, r552, r553)
    if is_error(r555) goto L419 (error at particle_path:320) else goto L280
L280:
    r556 = PyObject_GetItem(r551, r555)
    dec_ref r551
    dec_ref r555
    if is_error(r556) goto L420 (error at particle_path:320) else goto L281
L281:
    r557 = load_address _Py_NoneStruct
    r558 = load_address _Py_NoneStruct
    r559 = object 1
    r560 = PySlice_New(r559, r557, r558)
    if is_error(r560) goto L421 (error at particle_path:320) else goto L282
L282:
    r561 = PyObject_GetItem(photons, r560)
    dec_ref photons
    dec_ref r560
    if is_error(r561) goto L422 (error at particle_path:320) else goto L283
L283:
    r562 = numpy :: module
    r563 = 'float64'
    r564 = CPyObject_GetAttr(r562, r563)
    if is_error(r564) goto L423 (error at particle_path:320) else goto L284
L284:
    r565 = numpy :: module
    r566 = 'array'
    r567 = CPyObject_GetAttr(r565, r566)
    if is_error(r567) goto L424 (error at particle_path:320) else goto L285
L285:
    r568 = [r561, r564]
    r569 = load_address r568
    r570 = ('dtype',)
    r571 = _PyObject_Vectorcall(r567, r569, 1, r570)
    dec_ref r567
    if is_error(r571) goto L424 (error at particle_path:320) else goto L286
L286:
    dec_ref r561
    dec_ref r564
    r572 = (r541, r556, r571)
    dec_ref r541
    dec_ref r556
    dec_ref r571
    r573 = box(tuple[object, object, object], r572)
    return r573
L287:
    r574 = <error> :: object
    return r574
L288:
    dec_ref r6
    goto L287
L289:
    dec_ref theta
    goto L287
L290:
    dec_ref theta
    dec_ref r34
    goto L287
L291:
    dec_ref theta
    dec_ref r34
    dec_ref r54
    goto L287
L292:
    dec_ref theta
    dec_ref phi
    goto L287
L293:
    dec_ref theta
    dec_ref phi
    dec_ref maxdist
    goto L287
L294:
    dec_ref theta
    dec_ref phi
    dec_ref maxdist
    dec_ref round_const
    goto L287
L295:
    dec_ref theta
    dec_ref phi
    dec_ref maxdist
    dec_ref round_const
    dec_ref r76
    goto L287
L296:
    dec_ref theta
    dec_ref phi
    dec_ref round_const
    dec_ref r76
    goto L287
L297:
    dec_ref theta
    dec_ref phi
    dec_ref round_const
    dec_ref r85
    goto L287
L298:
    dec_ref theta
    dec_ref phi
    dec_ref round_const
    dec_ref r89
    goto L287
L299:
    dec_ref theta
    dec_ref phi
    dec_ref round_const
    dec_ref o
    goto L287
L300:
    dec_ref theta
    dec_ref phi
    dec_ref round_const
    dec_ref o
    dec_ref r98
    goto L287
L301:
    dec_ref theta
    dec_ref phi
    dec_ref round_const
    dec_ref o
    dec_ref r105
    goto L287
L302:
    dec_ref phi
    dec_ref round_const
    dec_ref o
    dec_ref r105
    dec_ref r111
    goto L287
L303:
    dec_ref phi
    dec_ref round_const
    dec_ref o
    dec_ref r105
    goto L287
L304:
    dec_ref phi
    dec_ref round_const
    dec_ref o
    dec_ref r105
    dec_ref r118
    goto L287
L305:
    dec_ref round_const
    dec_ref o
    dec_ref r125
    goto L287
L306:
    dec_ref round_const
    dec_ref o
    dec_ref r125
    dec_ref r128
    goto L287
L307:
    dec_ref round_const
    dec_ref o
    dec_ref r128
    dec_ref r132
    goto L287
L308:
    dec_ref round_const
    dec_ref o
    dec_ref u
    goto L287
L309:
    dec_ref round_const
    dec_ref o
    dec_ref u
    dec_ref photons
    goto L287
L310:
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    goto L287
L311:
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    goto L287
L312:
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    goto L287
L313:
    inc_ref t
    goto L63
L314:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref inside_scint
    dec_ref missed
    goto L287
L315:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref cur_o
    dec_ref next_o
    dec_ref inside_scint
    dec_ref missed
    goto L271
L316:
    dec_ref inside_scint
    goto L69
L317:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    goto L287
L318:
    dec_ref round_const
    dec_ref u
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    goto L71
L319:
    dec_ref t
    dec_ref photons
    dec_ref points
    dec_ref times
    goto L287
L320:
    dec_ref t
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref r173
    goto L287
L321:
    dec_ref t
    dec_ref theta
    dec_ref photons
    dec_ref points
    dec_ref times
    goto L287
L322:
    dec_ref t
    dec_ref theta
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref r201
    goto L287
L323:
    dec_ref t
    dec_ref theta
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref r201
    dec_ref r221
    goto L287
L324:
    dec_ref t
    dec_ref theta
    dec_ref phi
    dec_ref photons
    dec_ref points
    dec_ref times
    goto L287
L325:
    dec_ref t
    dec_ref theta
    dec_ref phi
    dec_ref maxdist
    dec_ref photons
    dec_ref points
    dec_ref times
    goto L287
L326:
    dec_ref t
    dec_ref theta
    dec_ref phi
    dec_ref maxdist
    dec_ref round_const
    dec_ref photons
    dec_ref points
    dec_ref times
    goto L287
L327:
    dec_ref t
    dec_ref theta
    dec_ref phi
    dec_ref maxdist
    dec_ref round_const
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref r244
    goto L287
L328:
    dec_ref t
    dec_ref theta
    dec_ref phi
    dec_ref round_const
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref r244
    goto L287
L329:
    dec_ref t
    dec_ref theta
    dec_ref phi
    dec_ref round_const
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref r244
    dec_ref r251
    goto L287
L330:
    dec_ref t
    dec_ref theta
    dec_ref phi
    dec_ref round_const
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref r255
    goto L287
L331:
    dec_ref t
    dec_ref theta
    dec_ref phi
    dec_ref round_const
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref r259
    goto L287
L332:
    dec_ref t
    dec_ref theta
    dec_ref phi
    dec_ref round_const
    dec_ref o
    dec_ref photons
    dec_ref points
    dec_ref times
    goto L287
L333:
    dec_ref t
    dec_ref theta
    dec_ref phi
    dec_ref round_const
    dec_ref o
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref r268
    goto L287
L334:
    dec_ref t
    dec_ref theta
    dec_ref phi
    dec_ref round_const
    dec_ref o
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref r275
    goto L287
L335:
    dec_ref t
    dec_ref phi
    dec_ref round_const
    dec_ref o
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref r275
    dec_ref r281
    goto L287
L336:
    dec_ref t
    dec_ref phi
    dec_ref round_const
    dec_ref o
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref r275
    goto L287
L337:
    dec_ref t
    dec_ref phi
    dec_ref round_const
    dec_ref o
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref r275
    dec_ref r288
    goto L287
L338:
    dec_ref t
    dec_ref round_const
    dec_ref o
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref r295
    goto L287
L339:
    dec_ref t
    dec_ref round_const
    dec_ref o
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref r295
    dec_ref r298
    goto L287
L340:
    dec_ref t
    dec_ref round_const
    dec_ref o
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref r298
    dec_ref r302
    goto L287
L341:
    dec_ref t
    dec_ref round_const
    dec_ref o
    dec_ref u
    dec_ref points
    dec_ref times
    goto L287
L342:
    dec_ref r308
    goto L130
L343:
    dec_ref t
    dec_ref round_const
    dec_ref o
    dec_ref u
    dec_ref times
    goto L287
L344:
    dec_ref r310
    goto L131
L345:
    dec_ref t
    dec_ref round_const
    dec_ref o
    dec_ref u
    goto L287
L346:
    dec_ref r312
    goto L132
L347:
    dec_ref t
    dec_ref round_const
    dec_ref o
    dec_ref u
    dec_ref photons
    goto L287
L348:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    goto L287
L349:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    goto L287
L350:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    goto L287
L351:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref r330
    goto L287
L352:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref r333
    goto L287
L353:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref r336
    goto L287
L354:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref distT1
    goto L287
L355:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref distT1
    dec_ref r343
    goto L287
L356:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref distT1
    dec_ref r346
    goto L287
L357:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref distT1
    dec_ref r349
    goto L287
L358:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref distT1
    dec_ref distT4
    goto L287
L359:
    dec_ref distT1
    goto L158
L360:
    dec_ref distT4
    goto L159
L361:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref dist
    goto L287
L362:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref dist
    dec_ref check
    goto L287
L363:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref dist
    dec_ref check
    dec_ref r368
    goto L287
L364:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref dist
    dec_ref check
    dec_ref inside_T1
    goto L287
L365:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref dist
    dec_ref check
    dec_ref inside_T1
    dec_ref r373
    goto L287
L366:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref dist
    dec_ref inside_T1
    dec_ref inside_T4
    goto L287
L367:
    dec_ref inside_T1
    goto L173
L368:
    dec_ref inside_T4
    goto L174
L369:
    dec_ref cur_o
    dec_ref next_o
    goto L177
L370:
    dec_ref missed
    dec_ref dist
    goto L202
L371:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref missed
    dec_ref dist
    goto L287
L372:
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref missed
    dec_ref dist
    goto L287
L373:
    dec_ref r391
    goto L180
L374:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref missed
    dec_ref r393
    goto L287
L375:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref missed
    goto L287
L376:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref missed
    dec_ref r395
    goto L287
L377:
    dec_ref r399
    goto L186
L378:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref missed
    dec_ref phot
    goto L287
L379:
    dec_ref phot
    goto L196
L380:
    dec_ref r419
    goto L197
L381:
    dec_ref r422
    goto L197
L382:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref missed
    goto L287
L383:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref inside_scint
    dec_ref missed
    dec_ref r434
    goto L287
L384:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref inside_scint
    dec_ref missed
    dec_ref r434
    dec_ref r437
    goto L287
L385:
    dec_ref inside_scint
    goto L208
L386:
    dec_ref r438
    goto L63
L387:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref r438
    goto L287
L388:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref r438
    dec_ref r450
    goto L210
L389:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref r438
    dec_ref r450
    dec_ref Tbottom
    goto L213
L390:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref r438
    dec_ref r450
    dec_ref Tbottom
    dec_ref Ttop
    goto L216
L391:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref r438
    dec_ref r450
    dec_ref Tbottom
    dec_ref Ttop
    dec_ref Tradius
    goto L219
L392:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref r438
    dec_ref r450
    dec_ref Tbottom
    dec_ref Ttop
    dec_ref Tradius
    dec_ref Tcorner
    goto L222
L393:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref r438
    dec_ref Tbottom
    dec_ref Ttop
    dec_ref Tradius
    dec_ref Tcorner
    dec_ref num
    dec_ref r461
    goto L225
L394:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref r438
    dec_ref Tbottom
    dec_ref Ttop
    dec_ref Tradius
    dec_ref Tcorner
    dec_ref num
    goto L287
L395:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref r438
    dec_ref Tbottom
    dec_ref Ttop
    dec_ref Tradius
    dec_ref Tcorner
    dec_ref num
    dec_ref r465
    goto L287
L396:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref r438
    dec_ref Tbottom
    dec_ref Ttop
    dec_ref Tradius
    dec_ref Tcorner
    dec_ref num
    dec_ref r469
    goto L287
L397:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref r438
    dec_ref Tbottom
    dec_ref Ttop
    dec_ref Tradius
    dec_ref Tcorner
    dec_ref num
    dec_ref r469
    dec_ref r470
    goto L287
L398:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref inside_scint
    dec_ref missed
    dec_ref r438
    dec_ref Tbottom
    dec_ref Ttop
    dec_ref Tradius
    dec_ref Tcorner
    dec_ref num
    goto L287
L399:
    dec_ref next_o
    dec_ref inside_scint
    goto L239
L400:
    dec_ref Tbottom
    dec_ref Ttop
    dec_ref Tradius
    dec_ref Tcorner
    dec_ref num
    goto L270
L401:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref missed
    dec_ref r438
    dec_ref Tbottom
    dec_ref Ttop
    dec_ref Tradius
    dec_ref Tcorner
    dec_ref num
    goto L287
L402:
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref missed
    dec_ref r438
    dec_ref Tbottom
    dec_ref Ttop
    dec_ref Tradius
    dec_ref Tcorner
    dec_ref num
    goto L287
L403:
    dec_ref r481
    goto L242
L404:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref missed
    dec_ref r438
    dec_ref Tbottom
    dec_ref Ttop
    dec_ref Tradius
    dec_ref Tcorner
    dec_ref num
    goto L287
L405:
    dec_ref r485
    goto L245
L406:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref missed
    dec_ref phot
    dec_ref r438
    dec_ref Tbottom
    dec_ref Ttop
    dec_ref Tradius
    dec_ref Tcorner
    dec_ref num
    goto L287
L407:
    dec_ref phot
    goto L255
L408:
    dec_ref r505
    goto L256
L409:
    dec_ref r508
    goto L256
L410:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref r438
    dec_ref Tbottom
    dec_ref Ttop
    dec_ref Tradius
    dec_ref Tcorner
    dec_ref num
    dec_ref r517
    goto L287
L411:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref r438
    dec_ref Tbottom
    dec_ref Ttop
    dec_ref Tradius
    dec_ref Tcorner
    dec_ref num
    dec_ref r521
    goto L287
L412:
    dec_ref t
    dec_ref round_const
    dec_ref u
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref cur_o
    dec_ref next_o
    dec_ref missed
    dec_ref r438
    dec_ref Tbottom
    dec_ref Ttop
    dec_ref Tradius
    dec_ref Tcorner
    dec_ref num
    dec_ref r521
    dec_ref r522
    goto L287
L413:
    dec_ref photons
    dec_ref points
    dec_ref times
    goto L287
L414:
    dec_ref photons
    dec_ref points
    dec_ref times
    dec_ref r529
    goto L287
L415:
    dec_ref photons
    dec_ref points
    dec_ref r536
    goto L287
L416:
    dec_ref photons
    dec_ref points
    goto L287
L417:
    dec_ref photons
    dec_ref points
    dec_ref r541
    goto L287
L418:
    dec_ref photons
    dec_ref points
    dec_ref r541
    dec_ref r544
    goto L287
L419:
    dec_ref photons
    dec_ref r541
    dec_ref r551
    goto L287
L420:
    dec_ref photons
    dec_ref r541
    goto L287
L421:
    dec_ref photons
    dec_ref r541
    dec_ref r556
    goto L287
L422:
    dec_ref r541
    dec_ref r556
    goto L287
L423:
    dec_ref r541
    dec_ref r556
    dec_ref r561
    goto L287
L424:
    dec_ref r541
    dec_ref r556
    dec_ref r561
    dec_ref r564
    goto L287

def Simulation.scintillator_monte_carlo(self, o, notabsorbed, scint_radius, scint_plane, light_guide_planes, pmt_center, pmt_radius, corner_center, corner_radius, N_max, t, keepdata):
    self :: modTof.Simulation
    o, notabsorbed, scint_radius, scint_plane, light_guide_planes, pmt_center, pmt_radius, corner_center, corner_radius, N_max, t, keepdata, r0, track_history :: object
    r1 :: i32
    r2 :: bit
    r3 :: bool
    r4, r5, r6 :: object
    r7 :: tuple[object, object]
    r8 :: object
    r9 :: str
    r10, r11 :: object
    r12 :: object[1]
    r13 :: object_ptr
    r14, r15, r16 :: object
    r17 :: str
    r18 :: object
    r19 :: str
    r20 :: object
    r21 :: object[1]
    r22 :: object_ptr
    r23, endpoint_dist, r24 :: object
    r25 :: str
    r26 :: object
    r27 :: float
    r28 :: bit
    r29 :: float
    r30, r31 :: object
    r32 :: str
    r33, r34, r35 :: object
    r36 :: object[2]
    r37 :: object_ptr
    r38, theta, r39 :: object
    r40 :: str
    r41 :: object
    r42 :: float
    r43 :: bit
    r44 :: object
    r45 :: str
    r46, r47, r48, r49 :: object
    r50 :: object[2]
    r51 :: object_ptr
    r52, phi, r53, PMT_hit_condition, r54, total_dist, r55, dt, r56 :: object
    r57 :: str
    r58 :: object
    r59 :: object[1]
    r60 :: object_ptr
    r61, r62 :: object
    r63 :: str
    r64 :: object
    r65 :: object[1]
    r66 :: object_ptr
    r67, r68, r69 :: object
    r70 :: str
    r71 :: object
    r72 :: object[1]
    r73 :: object_ptr
    r74, r75 :: object
    r76 :: str
    r77 :: object
    r78 :: object[1]
    r79 :: object_ptr
    r80, r81, r82 :: object
    r83 :: str
    r84 :: object
    r85 :: object[1]
    r86 :: object_ptr
    r87 :: object
    r88 :: list
    r89, r90, r91, r92 :: ptr
    r93 :: object
    r94 :: str
    r95 :: object
    r96 :: object[1]
    r97 :: object_ptr
    r98, u :: object
    r99 :: i32
    r100 :: bit
    r101 :: bool
    r102, r103, r104, r105, r106, r107, r108, r109, r110, r111, r112, r113 :: object
    r114 :: list
    r115, r116, r117, r118, r119, r120, r121, r122 :: ptr
    r123, r124, r125, r126, r127 :: object
    r128 :: tuple[object, object]
    r129 :: object
    r130 :: bool
    r131 :: i32
    r132 :: bit
    r133, i, r134 :: object
    r135 :: i32
    r136 :: bit
    r137 :: bool
    r138, r139, r140 :: object
    r141 :: bit
    r142, r143 :: object
    r144 :: i32
    r145 :: bit
    r146 :: bool
    r147, r148 :: object
    r149 :: list
    r150, r151 :: object
    r152, r153, r154, r155 :: ptr
    r156 :: object
    r157 :: str
    r158 :: object
    r159 :: object[1]
    r160 :: object_ptr
    r161, r162, r163, r164 :: object
    r165 :: bool
    ds, r166 :: object
    r167 :: bool
    r168 :: object
    r169 :: bool
    r170, r171, r172, r173 :: object
    r174 :: bool
    x, r175 :: object
    r176 :: bool
    y, r177 :: object
    r178 :: bool
    z, r179 :: object
    r180 :: bool
    r181, r182, r183, r184, r185, r186, r187 :: object
    r188 :: str
    r189 :: object
    r190 :: str
    r191 :: object
    r192 :: object[1]
    r193 :: object_ptr
    r194, r195, r196, r197 :: object
    r198 :: str
    r199 :: object
    r200 :: object[1]
    r201 :: object_ptr
    r202 :: object
    r203 :: str
    r204, r205, r206 :: object
    r207 :: i32
    r208 :: bit
    r209 :: bool
    r210 :: object
    r211 :: str
    r212 :: object
    r213 :: object[1]
    r214 :: object_ptr
    r215, r216 :: object
    r217 :: list
    r218, r219, r220, r221 :: ptr
    r222 :: object
    r223 :: str
    r224 :: object
    r225 :: object[1]
    r226 :: object_ptr
    r227, r228 :: object
    r229 :: str
    r230 :: object
    r231 :: object[1]
    r232 :: object_ptr
    r233, r234, r235, r236, r237, n, r238, r239, r240 :: object
    r241 :: bool
    r242 :: object
    r243 :: bool
    r244 :: object
    r245 :: bool
    r246 :: i32
    r247 :: bit
    r248 :: bool
    r249, r250, r251, r252, r253, r254 :: object
    r255 :: list
    r256, r257, r258, r259, r260, r261, r262, r263 :: ptr
    r264, r265 :: object
    r266 :: bool
    r267 :: i32
    r268 :: bit
    r269, r270 :: object
    r271 :: i32
    r272 :: bit
    r273 :: bool
    r274 :: object
    r275 :: i32
    r276 :: bit
    r277 :: bool
    r278, r279, r280, r281, r282, r283, r284, r285, r286 :: object
    r287 :: tuple[object, object]
    r288 :: object
    r289 :: bool
    r290, r291 :: object
    r292 :: bool
    r293 :: tuple[object, object, object]
    r294, r295 :: object
    r296 :: tuple[object, object, object, object, object, object]
    r297, r298 :: object
L0:
    r0 = <error> :: object
    track_history = r0
    r1 = PyObject_IsTrue(keepdata)
    r2 = r1 >= 0 :: signed
    if not r2 goto L157 (error at scintillator_monte_carlo:323) else goto L1 :: bool
L1:
    r3 = truncate r1: i32 to builtins.bool
    if r3 goto L158 else goto L6 :: bool
L2:
    r4 = object 1
    r5 = PyNumber_Add(N_max, r4)
    if is_error(r5) goto L156 (error at scintillator_monte_carlo:324) else goto L3
L3:
    r6 = object 7
    r7 = (r5, r6)
    dec_ref r5
    r8 = numpy :: module
    r9 = 'zeros'
    r10 = CPyObject_GetAttr(r8, r9)
    if is_error(r10) goto L159 (error at scintillator_monte_carlo:324) else goto L4
L4:
    r11 = box(tuple[object, object], r7)
    r12 = [r11]
    r13 = load_address r12
    r14 = _PyObject_Vectorcall(r10, r13, 1, 0)
    dec_ref r10
    if is_error(r14) goto L160 (error at scintillator_monte_carlo:324) else goto L5
L5:
    dec_ref r11
    track_history = r14
L6:
    r15 = PyNumber_Subtract(o, pmt_center)
    if is_error(r15) goto L157 (error at scintillator_monte_carlo:325) else goto L7
L7:
    r16 = numpy :: module
    r17 = 'linalg'
    r18 = CPyObject_GetAttr(r16, r17)
    if is_error(r18) goto L161 (error at scintillator_monte_carlo:325) else goto L8
L8:
    r19 = 'norm'
    r20 = CPyObject_GetAttr(r18, r19)
    dec_ref r18
    if is_error(r20) goto L161 (error at scintillator_monte_carlo:325) else goto L9
L9:
    r21 = [r15]
    r22 = load_address r21
    r23 = _PyObject_Vectorcall(r20, r22, 1, 0)
    dec_ref r20
    if is_error(r23) goto L161 (error at scintillator_monte_carlo:325) else goto L10
L10:
    dec_ref r15
    endpoint_dist = r23
    r24 = numpy :: module
    r25 = 'pi'
    r26 = CPyObject_GetAttr(r24, r25)
    if is_error(r26) goto L162 (error at scintillator_monte_carlo:326) else goto L11
L11:
    r27 = unbox(float, r26)
    dec_ref r26
    r28 = r27 == -113.0
    if r28 goto L13 else goto L12 :: bool
L12:
    r29 = 2.0 * r27
    r30 = box(float, r29)
    r31 = random :: module
    r32 = 'uniform'
    r33 = CPyObject_GetAttr(r31, r32)
    if is_error(r33) goto L163 (error at scintillator_monte_carlo:326) else goto L14
L13:
    r34 = PyErr_Occurred()
    if not is_error(r34) goto L162 (error at scintillator_monte_carlo:326) else goto L12
L14:
    r35 = object 0
    r36 = [r35, r30]
    r37 = load_address r36
    r38 = _PyObject_Vectorcall(r33, r37, 2, 0)
    dec_ref r33
    if is_error(r38) goto L163 (error at scintillator_monte_carlo:326) else goto L15
L15:
    dec_ref r30
    theta = r38
    r39 = numpy :: module
    r40 = 'pi'
    r41 = CPyObject_GetAttr(r39, r40)
    if is_error(r41) goto L164 (error at scintillator_monte_carlo:327) else goto L16
L16:
    r42 = unbox(float, r41)
    dec_ref r41
    r43 = r42 == -113.0
    if r43 goto L18 else goto L17 :: bool
L17:
    r44 = random :: module
    r45 = 'uniform'
    r46 = CPyObject_GetAttr(r44, r45)
    if is_error(r46) goto L164 (error at scintillator_monte_carlo:327) else goto L19
L18:
    r47 = PyErr_Occurred()
    if not is_error(r47) goto L164 (error at scintillator_monte_carlo:327) else goto L17
L19:
    r48 = object 0
    r49 = box(float, r42)
    r50 = [r48, r49]
    r51 = load_address r50
    r52 = _PyObject_Vectorcall(r46, r51, 2, 0)
    dec_ref r46
    if is_error(r52) goto L165 (error at scintillator_monte_carlo:327) else goto L20
L20:
    dec_ref r49
    phi = r52
    r53 = box(bool, 0)
    inc_ref r53
    PMT_hit_condition = r53
    r54 = object 0
    inc_ref r54
    total_dist = r54
    r55 = object 0
    inc_ref r55
    dt = r55
    r56 = numpy :: module
    r57 = 'sin'
    r58 = CPyObject_GetAttr(r56, r57)
    if is_error(r58) goto L166 (error at scintillator_monte_carlo:331) else goto L21
L21:
    r59 = [phi]
    r60 = load_address r59
    r61 = _PyObject_Vectorcall(r58, r60, 1, 0)
    dec_ref r58
    if is_error(r61) goto L166 (error at scintillator_monte_carlo:331) else goto L22
L22:
    r62 = numpy :: module
    r63 = 'cos'
    r64 = CPyObject_GetAttr(r62, r63)
    if is_error(r64) goto L167 (error at scintillator_monte_carlo:331) else goto L23
L23:
    r65 = [theta]
    r66 = load_address r65
    r67 = _PyObject_Vectorcall(r64, r66, 1, 0)
    dec_ref r64
    if is_error(r67) goto L167 (error at scintillator_monte_carlo:331) else goto L24
L24:
    r68 = PyNumber_Multiply(r61, r67)
    dec_ref r61
    dec_ref r67
    if is_error(r68) goto L166 (error at scintillator_monte_carlo:331) else goto L25
L25:
    r69 = numpy :: module
    r70 = 'sin'
    r71 = CPyObject_GetAttr(r69, r70)
    if is_error(r71) goto L168 (error at scintillator_monte_carlo:331) else goto L26
L26:
    r72 = [phi]
    r73 = load_address r72
    r74 = _PyObject_Vectorcall(r71, r73, 1, 0)
    dec_ref r71
    if is_error(r74) goto L168 (error at scintillator_monte_carlo:331) else goto L27
L27:
    r75 = numpy :: module
    r76 = 'sin'
    r77 = CPyObject_GetAttr(r75, r76)
    if is_error(r77) goto L169 (error at scintillator_monte_carlo:331) else goto L28
L28:
    r78 = [theta]
    r79 = load_address r78
    r80 = _PyObject_Vectorcall(r77, r79, 1, 0)
    dec_ref r77
    if is_error(r80) goto L169 (error at scintillator_monte_carlo:331) else goto L29
L29:
    dec_ref theta
    r81 = PyNumber_Multiply(r74, r80)
    dec_ref r74
    dec_ref r80
    if is_error(r81) goto L170 (error at scintillator_monte_carlo:331) else goto L30
L30:
    r82 = numpy :: module
    r83 = 'cos'
    r84 = CPyObject_GetAttr(r82, r83)
    if is_error(r84) goto L171 (error at scintillator_monte_carlo:331) else goto L31
L31:
    r85 = [phi]
    r86 = load_address r85
    r87 = _PyObject_Vectorcall(r84, r86, 1, 0)
    dec_ref r84
    if is_error(r87) goto L171 (error at scintillator_monte_carlo:331) else goto L32
L32:
    dec_ref phi
    r88 = PyList_New(3)
    if is_error(r88) goto L172 (error at scintillator_monte_carlo:331) else goto L33
L33:
    r89 = get_element_ptr r88 ob_item :: PyListObject
    r90 = load_mem r89 :: ptr*
    set_mem r90, r68 :: builtins.object*
    r91 = r90 + 8
    set_mem r91, r81 :: builtins.object*
    r92 = r90 + 16
    set_mem r92, r87 :: builtins.object*
    r93 = numpy :: module
    r94 = 'array'
    r95 = CPyObject_GetAttr(r93, r94)
    if is_error(r95) goto L173 (error at scintillator_monte_carlo:331) else goto L34
L34:
    r96 = [r88]
    r97 = load_address r96
    r98 = _PyObject_Vectorcall(r95, r97, 1, 0)
    dec_ref r95
    if is_error(r98) goto L173 (error at scintillator_monte_carlo:331) else goto L35
L35:
    dec_ref r88
    u = r98
    r99 = PyObject_IsTrue(keepdata)
    r100 = r99 >= 0 :: signed
    if not r100 goto L174 (error at scintillator_monte_carlo:323) else goto L36 :: bool
L36:
    r101 = truncate r99: i32 to builtins.bool
    if r101 goto L37 else goto L49 :: bool
L37:
    r102 = object 0
    r103 = PyObject_GetItem(o, r102)
    if is_error(r103) goto L174 (error at scintillator_monte_carlo:332) else goto L38
L38:
    r104 = object 1
    r105 = PyObject_GetItem(o, r104)
    if is_error(r105) goto L175 (error at scintillator_monte_carlo:332) else goto L39
L39:
    r106 = object 2
    r107 = PyObject_GetItem(o, r106)
    if is_error(r107) goto L176 (error at scintillator_monte_carlo:332) else goto L40
L40:
    r108 = object 0
    r109 = PyObject_GetItem(u, r108)
    if is_error(r109) goto L177 (error at scintillator_monte_carlo:332) else goto L41
L41:
    r110 = object 1
    r111 = PyObject_GetItem(u, r110)
    if is_error(r111) goto L178 (error at scintillator_monte_carlo:332) else goto L42
L42:
    r112 = object 2
    r113 = PyObject_GetItem(u, r112)
    if is_error(r113) goto L179 (error at scintillator_monte_carlo:332) else goto L43
L43:
    r114 = PyList_New(7)
    if is_error(r114) goto L180 (error at scintillator_monte_carlo:332) else goto L44
L44:
    r115 = get_element_ptr r114 ob_item :: PyListObject
    r116 = load_mem r115 :: ptr*
    set_mem r116, r103 :: builtins.object*
    r117 = r116 + 8
    set_mem r117, r105 :: builtins.object*
    r118 = r116 + 16
    set_mem r118, r107 :: builtins.object*
    r119 = r116 + 24
    set_mem r119, r109 :: builtins.object*
    r120 = r116 + 32
    set_mem r120, r111 :: builtins.object*
    r121 = r116 + 40
    set_mem r121, r113 :: builtins.object*
    r122 = r116 + 48
    inc_ref notabsorbed
    set_mem r122, notabsorbed :: builtins.object*
    r123 = object 0
    r124 = load_address _Py_NoneStruct
    r125 = load_address _Py_NoneStruct
    r126 = load_address _Py_NoneStruct
    r127 = PySlice_New(r124, r125, r126)
    if is_error(r127) goto L181 (error at scintillator_monte_carlo:-1) else goto L45
L45:
    r128 = (r123, r127)
    dec_ref r127
    r129 = box(tuple[object, object], r128)
    if is_error(track_history) goto L182 else goto L48
L46:
    r130 = raise UnboundLocalError('local variable "track_history" referenced before assignment')
    if not r130 goto L156 (error at scintillator_monte_carlo:332) else goto L47 :: bool
L47:
    unreachable
L48:
    r131 = PyObject_SetItem(track_history, r129, r114)
    dec_ref r129
    dec_ref r114
    r132 = r131 >= 0 :: signed
    if not r132 goto L174 (error at scintillator_monte_carlo:332) else goto L49 :: bool
L49:
    r133 = object 0
    inc_ref r133
    i = r133
    goto L183
L50:
    r134 = PyObject_RichCompare(i, N_max, 0)
    if is_error(r134) goto L184 (error at scintillator_monte_carlo:334) else goto L51
L51:
    r135 = PyObject_Not(PMT_hit_condition)
    r136 = r135 >= 0 :: signed
    if not r136 goto L185 (error at scintillator_monte_carlo:334) else goto L52 :: bool
L52:
    r137 = truncate r135: i32 to builtins.bool
    r138 = box(bool, r137)
    r139 = PyNumber_And(r134, r138)
    dec_ref r134
    if is_error(r139) goto L184 (error at scintillator_monte_carlo:334) else goto L53
L53:
    r140 = box(bool, 1)
    r141 = notabsorbed == r140
    dec_ref notabsorbed
    r142 = box(bit, r141)
    r143 = PyNumber_And(r139, r142)
    dec_ref r139
    if is_error(r143) goto L186 (error at scintillator_monte_carlo:334) else goto L54
L54:
    r144 = PyObject_IsTrue(r143)
    dec_ref r143
    r145 = r144 >= 0 :: signed
    if not r145 goto L186 (error at scintillator_monte_carlo:334) else goto L55 :: bool
L55:
    r146 = truncate r144: i32 to builtins.bool
    if r146 goto L187 else goto L188 :: bool
L56:
    r147 = object 0
    r148 = PyObject_GetItem(scint_plane, r147)
    if is_error(r148) goto L189 (error at scintillator_monte_carlo:335) else goto L57
L57:
    r149 = PyList_New(3)
    if is_error(r149) goto L190 (error at scintillator_monte_carlo:335) else goto L58
L58:
    r150 = object 0
    r151 = object 0
    r152 = get_element_ptr r149 ob_item :: PyListObject
    r153 = load_mem r152 :: ptr*
    inc_ref r150
    set_mem r153, r150 :: builtins.object*
    r154 = r153 + 8
    inc_ref r151
    set_mem r154, r151 :: builtins.object*
    r155 = r153 + 16
    set_mem r155, r148 :: builtins.object*
    r156 = numpy :: module
    r157 = 'array'
    r158 = CPyObject_GetAttr(r156, r157)
    if is_error(r158) goto L191 (error at scintillator_monte_carlo:335) else goto L59
L59:
    r159 = [r149]
    r160 = load_address r159
    r161 = _PyObject_Vectorcall(r158, r160, 1, 0)
    dec_ref r158
    if is_error(r161) goto L191 (error at scintillator_monte_carlo:335) else goto L60
L60:
    dec_ref r149
    r162 = self.distance_solver(u, o, r161, scint_radius, scint_plane, corner_center, corner_radius, pmt_center, pmt_radius)
    dec_ref r161
    if is_error(r162) goto L189 (error at scintillator_monte_carlo:335) else goto L61
L61:
    r163 = PyObject_GetIter(r162)
    dec_ref r162
    if is_error(r163) goto L189 (error at scintillator_monte_carlo:335) else goto L62
L62:
    r164 = PyIter_Next(r163)
    if is_error(r164) goto L192 else goto L65
L63:
    r165 = raise ValueError('not enough values to unpack')
    if not r165 goto L156 (error at scintillator_monte_carlo:335) else goto L64 :: bool
L64:
    unreachable
L65:
    ds = r164
    r166 = PyIter_Next(r163)
    if is_error(r166) goto L193 else goto L68
L66:
    r167 = raise ValueError('not enough values to unpack')
    if not r167 goto L156 (error at scintillator_monte_carlo:335) else goto L67 :: bool
L67:
    unreachable
L68:
    PMT_hit_condition = r166
    r168 = PyIter_Next(r163)
    dec_ref r163
    if is_error(r168) goto L71 else goto L194
L69:
    r169 = raise ValueError('too many values to unpack')
    if not r169 goto L156 (error at scintillator_monte_carlo:335) else goto L70 :: bool
L70:
    unreachable
L71:
    r170 = PyNumber_Multiply(ds, u)
    if is_error(r170) goto L195 (error at scintillator_monte_carlo:336) else goto L72
L72:
    r171 = PyNumber_Add(o, r170)
    dec_ref o
    dec_ref r170
    if is_error(r171) goto L196 (error at scintillator_monte_carlo:336) else goto L73
L73:
    r172 = PyObject_GetIter(r171)
    dec_ref r171
    if is_error(r172) goto L196 (error at scintillator_monte_carlo:336) else goto L74
L74:
    r173 = PyIter_Next(r172)
    if is_error(r173) goto L197 else goto L77
L75:
    r174 = raise ValueError('not enough values to unpack')
    if not r174 goto L156 (error at scintillator_monte_carlo:336) else goto L76 :: bool
L76:
    unreachable
L77:
    x = r173
    r175 = PyIter_Next(r172)
    if is_error(r175) goto L198 else goto L80
L78:
    r176 = raise ValueError('not enough values to unpack')
    if not r176 goto L156 (error at scintillator_monte_carlo:336) else goto L79 :: bool
L79:
    unreachable
L80:
    y = r175
    r177 = PyIter_Next(r172)
    if is_error(r177) goto L199 else goto L83
L81:
    r178 = raise ValueError('not enough values to unpack')
    if not r178 goto L156 (error at scintillator_monte_carlo:336) else goto L82 :: bool
L82:
    unreachable
L83:
    z = r177
    r179 = PyIter_Next(r172)
    dec_ref r172
    if is_error(r179) goto L86 else goto L200
L84:
    r180 = raise ValueError('too many values to unpack')
    if not r180 goto L156 (error at scintillator_monte_carlo:336) else goto L85 :: bool
L85:
    unreachable
L86:
    r181 = load_address _Py_NoneStruct
    r182 = object 0
    r183 = object 2
    r184 = PySlice_New(r182, r183, r181)
    if is_error(r184) goto L201 (error at scintillator_monte_carlo:337) else goto L87
L87:
    r185 = PyObject_GetItem(u, r184)
    dec_ref r184
    if is_error(r185) goto L201 (error at scintillator_monte_carlo:337) else goto L88
L88:
    r186 = PyNumber_Multiply(ds, r185)
    dec_ref r185
    if is_error(r186) goto L201 (error at scintillator_monte_carlo:337) else goto L89
L89:
    r187 = numpy :: module
    r188 = 'linalg'
    r189 = CPyObject_GetAttr(r187, r188)
    if is_error(r189) goto L202 (error at scintillator_monte_carlo:337) else goto L90
L90:
    r190 = 'norm'
    r191 = CPyObject_GetAttr(r189, r190)
    dec_ref r189
    if is_error(r191) goto L202 (error at scintillator_monte_carlo:337) else goto L91
L91:
    r192 = [r186]
    r193 = load_address r192
    r194 = _PyObject_Vectorcall(r191, r193, 1, 0)
    dec_ref r191
    if is_error(r194) goto L202 (error at scintillator_monte_carlo:337) else goto L92
L92:
    dec_ref r186
    r195 = PyNumber_InPlaceAdd(total_dist, r194)
    dec_ref total_dist
    dec_ref r194
    if is_error(r195) goto L203 (error at scintillator_monte_carlo:337) else goto L93
L93:
    total_dist = r195
    r196 = PyNumber_Subtract(z, scint_plane)
    if is_error(r196) goto L201 (error at scintillator_monte_carlo:338) else goto L94
L94:
    r197 = numpy :: module
    r198 = 'abs'
    r199 = CPyObject_GetAttr(r197, r198)
    if is_error(r199) goto L204 (error at scintillator_monte_carlo:338) else goto L95
L95:
    r200 = [r196]
    r201 = load_address r200
    r202 = _PyObject_Vectorcall(r199, r201, 1, 0)
    dec_ref r199
    if is_error(r202) goto L204 (error at scintillator_monte_carlo:338) else goto L96
L96:
    dec_ref r196
    r203 = 'any'
    r204 = CPyObject_CallMethodObjArgs(r202, r203, 0)
    dec_ref r202
    if is_error(r204) goto L201 (error at scintillator_monte_carlo:338) else goto L97
L97:
    r205 = box(float, 1e-05)
    r206 = PyObject_RichCompare(r204, r205, 0)
    dec_ref r204
    dec_ref r205
    if is_error(r206) goto L201 (error at scintillator_monte_carlo:338) else goto L98
L98:
    r207 = PyObject_IsTrue(r206)
    dec_ref r206
    r208 = r207 >= 0 :: signed
    if not r208 goto L201 (error at scintillator_monte_carlo:338) else goto L99 :: bool
L99:
    r209 = truncate r207: i32 to builtins.bool
    if r209 goto L100 else goto L103 :: bool
L100:
    r210 = numpy :: module
    r211 = 'abs'
    r212 = CPyObject_GetAttr(r210, r211)
    if is_error(r212) goto L201 (error at scintillator_monte_carlo:338) else goto L101
L101:
    r213 = [z]
    r214 = load_address r213
    r215 = _PyObject_Vectorcall(r212, r214, 1, 0)
    dec_ref r212
    if is_error(r215) goto L201 (error at scintillator_monte_carlo:338) else goto L102
L102:
    r216 = r215
    goto L104
L103:
    inc_ref z
    r216 = z
L104:
    r217 = PyList_New(3)
    if is_error(r217) goto L205 (error at scintillator_monte_carlo:338) else goto L105
L105:
    r218 = get_element_ptr r217 ob_item :: PyListObject
    r219 = load_mem r218 :: ptr*
    inc_ref x
    set_mem r219, x :: builtins.object*
    r220 = r219 + 8
    inc_ref y
    set_mem r220, y :: builtins.object*
    r221 = r219 + 16
    set_mem r221, r216 :: builtins.object*
    r222 = numpy :: module
    r223 = 'array'
    r224 = CPyObject_GetAttr(r222, r223)
    if is_error(r224) goto L206 (error at scintillator_monte_carlo:338) else goto L106
L106:
    r225 = [r217]
    r226 = load_address r225
    r227 = _PyObject_Vectorcall(r224, r226, 1, 0)
    dec_ref r224
    if is_error(r227) goto L206 (error at scintillator_monte_carlo:338) else goto L107
L107:
    dec_ref r217
    o = r227
    r228 = numpy :: module
    r229 = 'abs'
    r230 = CPyObject_GetAttr(r228, r229)
    if is_error(r230) goto L207 (error at scintillator_monte_carlo:339) else goto L108
L108:
    r231 = [ds]
    r232 = load_address r231
    r233 = _PyObject_Vectorcall(r230, r232, 1, 0)
    dec_ref r230
    if is_error(r233) goto L207 (error at scintillator_monte_carlo:339) else goto L109
L109:
    dec_ref ds
    r234 = self.c
    r235 = PyNumber_TrueDivide(r233, r234)
    dec_ref r233
    dec_ref r234
    if is_error(r235) goto L208 (error at scintillator_monte_carlo:339) else goto L110
L110:
    r236 = PyNumber_InPlaceAdd(dt, r235)
    dec_ref dt
    dec_ref r235
    if is_error(r236) goto L209 (error at scintillator_monte_carlo:339) else goto L111
L111:
    dt = r236
    r237 = self.n_vec_calculate(o, scint_plane, light_guide_planes, corner_center, corner_radius)
    if is_error(r237) goto L208 (error at scintillator_monte_carlo:341) else goto L112
L112:
    n = r237
    r238 = self.photon_interaction(u, n)
    dec_ref u
    dec_ref n
    if is_error(r238) goto L210 (error at scintillator_monte_carlo:342) else goto L113
L113:
    r239 = PyObject_GetIter(r238)
    dec_ref r238
    if is_error(r239) goto L210 (error at scintillator_monte_carlo:342) else goto L114
L114:
    r240 = PyIter_Next(r239)
    if is_error(r240) goto L211 else goto L117
L115:
    r241 = raise ValueError('not enough values to unpack')
    if not r241 goto L156 (error at scintillator_monte_carlo:342) else goto L116 :: bool
L116:
    unreachable
L117:
    u = r240
    r242 = PyIter_Next(r239)
    if is_error(r242) goto L212 else goto L120
L118:
    r243 = raise ValueError('not enough values to unpack')
    if not r243 goto L156 (error at scintillator_monte_carlo:342) else goto L119 :: bool
L119:
    unreachable
L120:
    notabsorbed = r242
    r244 = PyIter_Next(r239)
    dec_ref r239
    if is_error(r244) goto L123 else goto L213
L121:
    r245 = raise ValueError('too many values to unpack')
    if not r245 goto L156 (error at scintillator_monte_carlo:342) else goto L122 :: bool
L122:
    unreachable
L123:
    r246 = PyObject_IsTrue(keepdata)
    r247 = r246 >= 0 :: signed
    if not r247 goto L214 (error at scintillator_monte_carlo:323) else goto L124 :: bool
L124:
    r248 = truncate r246: i32 to builtins.bool
    if r248 goto L125 else goto L215 :: bool
L125:
    r249 = object 0
    r250 = PyObject_GetItem(u, r249)
    if is_error(r250) goto L214 (error at scintillator_monte_carlo:343) else goto L126
L126:
    r251 = object 1
    r252 = PyObject_GetItem(u, r251)
    if is_error(r252) goto L216 (error at scintillator_monte_carlo:343) else goto L127
L127:
    r253 = object 2
    r254 = PyObject_GetItem(u, r253)
    if is_error(r254) goto L217 (error at scintillator_monte_carlo:343) else goto L128
L128:
    r255 = PyList_New(7)
    if is_error(r255) goto L218 (error at scintillator_monte_carlo:343) else goto L129
L129:
    r256 = get_element_ptr r255 ob_item :: PyListObject
    r257 = load_mem r256 :: ptr*
    set_mem r257, x :: builtins.object*
    r258 = r257 + 8
    set_mem r258, y :: builtins.object*
    r259 = r257 + 16
    set_mem r259, z :: builtins.object*
    r260 = r257 + 24
    set_mem r260, r250 :: builtins.object*
    r261 = r257 + 32
    set_mem r261, r252 :: builtins.object*
    r262 = r257 + 40
    set_mem r262, r254 :: builtins.object*
    r263 = r257 + 48
    inc_ref notabsorbed
    set_mem r263, notabsorbed :: builtins.object*
    r264 = object 1
    r265 = PyNumber_Add(i, r264)
    if is_error(r265) goto L219 (error at scintillator_monte_carlo:343) else goto L130
L130:
    if is_error(track_history) goto L220 else goto L133
L131:
    r266 = raise UnboundLocalError('local variable "track_history" referenced before assignment')
    if not r266 goto L156 (error at scintillator_monte_carlo:343) else goto L132 :: bool
L132:
    unreachable
L133:
    r267 = PyObject_SetItem(track_history, r265, r255)
    dec_ref r265
    dec_ref r255
    r268 = r267 >= 0 :: signed
    if not r268 goto L184 (error at scintillator_monte_carlo:343) else goto L134 :: bool
L134:
    r269 = object 1
    r270 = PyNumber_InPlaceAdd(i, r269)
    dec_ref i
    if is_error(r270) goto L221 (error at scintillator_monte_carlo:344) else goto L135
L135:
    i = r270
    goto L50
L136:
    r271 = PyObject_IsTrue(keepdata)
    r272 = r271 >= 0 :: signed
    if not r272 goto L222 (error at scintillator_monte_carlo:323) else goto L137 :: bool
L137:
    r273 = truncate r271: i32 to builtins.bool
    if r273 goto L223 else goto L224 :: bool
L138:
    r274 = PyObject_RichCompare(i, N_max, 0)
    if is_error(r274) goto L225 (error at scintillator_monte_carlo:346) else goto L139
L139:
    r275 = PyObject_IsTrue(r274)
    dec_ref r274
    r276 = r275 >= 0 :: signed
    if not r276 goto L225 (error at scintillator_monte_carlo:346) else goto L140 :: bool
L140:
    r277 = truncate r275: i32 to builtins.bool
    if r277 goto L141 else goto L226 :: bool
L141:
    r278 = load_address _Py_NoneStruct
    r279 = object 1
    r280 = PyNumber_Add(i, r279)
    dec_ref i
    if is_error(r280) goto L227 (error at scintillator_monte_carlo:347) else goto L142
L142:
    r281 = load_address _Py_NoneStruct
    r282 = PySlice_New(r278, r280, r281)
    dec_ref r280
    if is_error(r282) goto L227 (error at scintillator_monte_carlo:-1) else goto L143
L143:
    r283 = load_address _Py_NoneStruct
    r284 = load_address _Py_NoneStruct
    r285 = load_address _Py_NoneStruct
    r286 = PySlice_New(r283, r284, r285)
    if is_error(r286) goto L228 (error at scintillator_monte_carlo:-1) else goto L144
L144:
    r287 = (r282, r286)
    dec_ref r282
    dec_ref r286
    r288 = box(tuple[object, object], r287)
    if is_error(track_history) goto L229 else goto L147
L145:
    r289 = raise UnboundLocalError('local variable "track_history" referenced before assignment')
    if not r289 goto L156 (error at scintillator_monte_carlo:347) else goto L146 :: bool
L146:
    unreachable
L147:
    r290 = PyObject_GetItem(track_history, r288)
    xdec_ref track_history
    dec_ref r288
    if is_error(r290) goto L230 (error at scintillator_monte_carlo:347) else goto L148
L148:
    track_history = r290
L149:
    r291 = PyNumber_Add(t, dt)
    dec_ref dt
    if is_error(r291) goto L231 (error at scintillator_monte_carlo:348) else goto L150
L150:
    if is_error(track_history) goto L232 else goto L153
L151:
    r292 = raise UnboundLocalError('local variable "track_history" referenced before assignment')
    if not r292 goto L156 (error at scintillator_monte_carlo:348) else goto L152 :: bool
L152:
    unreachable
L153:
    r293 = (PMT_hit_condition, r291, track_history)
    dec_ref PMT_hit_condition
    dec_ref r291
    xdec_ref track_history
    r294 = box(tuple[object, object, object], r293)
    return r294
L154:
    r295 = PyNumber_Add(t, dt)
    if is_error(r295) goto L233 (error at scintillator_monte_carlo:350) else goto L155
L155:
    r296 = (PMT_hit_condition, r295, total_dist, endpoint_dist, i, dt)
    dec_ref PMT_hit_condition
    dec_ref r295
    dec_ref total_dist
    dec_ref endpoint_dist
    dec_ref i
    dec_ref dt
    r297 = box(tuple[object, object, object, object, object, object], r296)
    return r297
L156:
    r298 = <error> :: object
    return r298
L157:
    xdec_ref track_history
    goto L156
L158:
    xdec_ref track_history
    goto L2
L159:
    dec_ref r7
    goto L156
L160:
    dec_ref r11
    goto L156
L161:
    xdec_ref track_history
    dec_ref r15
    goto L156
L162:
    xdec_ref track_history
    dec_ref endpoint_dist
    goto L156
L163:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref r30
    goto L156
L164:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref theta
    goto L156
L165:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref theta
    dec_ref r49
    goto L156
L166:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref theta
    dec_ref phi
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    goto L156
L167:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref theta
    dec_ref phi
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref r61
    goto L156
L168:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref theta
    dec_ref phi
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref r68
    goto L156
L169:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref theta
    dec_ref phi
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref r68
    dec_ref r74
    goto L156
L170:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref phi
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref r68
    goto L156
L171:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref phi
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref r68
    dec_ref r81
    goto L156
L172:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref r68
    dec_ref r81
    dec_ref r87
    goto L156
L173:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref r88
    goto L156
L174:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    goto L156
L175:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref r103
    goto L156
L176:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref r103
    dec_ref r105
    goto L156
L177:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref r103
    dec_ref r105
    dec_ref r107
    goto L156
L178:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref r103
    dec_ref r105
    dec_ref r107
    dec_ref r109
    goto L156
L179:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref r103
    dec_ref r105
    dec_ref r107
    dec_ref r109
    dec_ref r111
    goto L156
L180:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref r103
    dec_ref r105
    dec_ref r107
    dec_ref r109
    dec_ref r111
    dec_ref r113
    goto L156
L181:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref r114
    goto L156
L182:
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref r114
    dec_ref r129
    goto L46
L183:
    inc_ref o
    inc_ref notabsorbed
    goto L50
L184:
    dec_ref o
    dec_ref notabsorbed
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    goto L156
L185:
    dec_ref o
    dec_ref notabsorbed
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref r134
    goto L156
L186:
    dec_ref o
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    goto L156
L187:
    dec_ref PMT_hit_condition
    goto L56
L188:
    dec_ref o
    dec_ref u
    goto L136
L189:
    dec_ref o
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    goto L156
L190:
    dec_ref o
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref r148
    goto L156
L191:
    dec_ref o
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref r149
    goto L156
L192:
    dec_ref o
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref r163
    goto L63
L193:
    dec_ref o
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref r163
    dec_ref ds
    goto L66
L194:
    dec_ref o
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref ds
    dec_ref r168
    goto L69
L195:
    dec_ref o
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref ds
    goto L156
L196:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref ds
    goto L156
L197:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref ds
    dec_ref r172
    goto L75
L198:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref ds
    dec_ref r172
    dec_ref x
    goto L78
L199:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref ds
    dec_ref r172
    dec_ref x
    dec_ref y
    goto L81
L200:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref ds
    dec_ref x
    dec_ref y
    dec_ref z
    dec_ref r179
    goto L84
L201:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref ds
    dec_ref x
    dec_ref y
    dec_ref z
    goto L156
L202:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref ds
    dec_ref x
    dec_ref y
    dec_ref z
    dec_ref r186
    goto L156
L203:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref ds
    dec_ref x
    dec_ref y
    dec_ref z
    goto L156
L204:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref ds
    dec_ref x
    dec_ref y
    dec_ref z
    dec_ref r196
    goto L156
L205:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref ds
    dec_ref x
    dec_ref y
    dec_ref z
    dec_ref r216
    goto L156
L206:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref ds
    dec_ref x
    dec_ref y
    dec_ref z
    dec_ref r217
    goto L156
L207:
    dec_ref o
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref ds
    dec_ref x
    dec_ref y
    dec_ref z
    goto L156
L208:
    dec_ref o
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref x
    dec_ref y
    dec_ref z
    goto L156
L209:
    dec_ref o
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref u
    dec_ref i
    dec_ref x
    dec_ref y
    dec_ref z
    goto L156
L210:
    dec_ref o
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref i
    dec_ref x
    dec_ref y
    dec_ref z
    goto L156
L211:
    dec_ref o
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref i
    dec_ref x
    dec_ref y
    dec_ref z
    dec_ref r239
    goto L115
L212:
    dec_ref o
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref x
    dec_ref y
    dec_ref z
    dec_ref r239
    goto L118
L213:
    dec_ref o
    dec_ref notabsorbed
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref x
    dec_ref y
    dec_ref z
    dec_ref r244
    goto L121
L214:
    dec_ref o
    dec_ref notabsorbed
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref x
    dec_ref y
    dec_ref z
    goto L156
L215:
    dec_ref x
    dec_ref y
    dec_ref z
    goto L134
L216:
    dec_ref o
    dec_ref notabsorbed
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref x
    dec_ref y
    dec_ref z
    dec_ref r250
    goto L156
L217:
    dec_ref o
    dec_ref notabsorbed
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref x
    dec_ref y
    dec_ref z
    dec_ref r250
    dec_ref r252
    goto L156
L218:
    dec_ref o
    dec_ref notabsorbed
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref x
    dec_ref y
    dec_ref z
    dec_ref r250
    dec_ref r252
    dec_ref r254
    goto L156
L219:
    dec_ref o
    dec_ref notabsorbed
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref r255
    goto L156
L220:
    dec_ref o
    dec_ref notabsorbed
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    dec_ref i
    dec_ref r255
    dec_ref r265
    goto L131
L221:
    dec_ref o
    dec_ref notabsorbed
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref u
    goto L156
L222:
    xdec_ref track_history
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref i
    goto L156
L223:
    dec_ref endpoint_dist
    dec_ref total_dist
    goto L138
L224:
    xdec_ref track_history
    goto L154
L225:
    xdec_ref track_history
    dec_ref PMT_hit_condition
    dec_ref dt
    dec_ref i
    goto L156
L226:
    dec_ref i
    goto L149
L227:
    xdec_ref track_history
    dec_ref PMT_hit_condition
    dec_ref dt
    goto L156
L228:
    xdec_ref track_history
    dec_ref PMT_hit_condition
    dec_ref dt
    dec_ref r282
    goto L156
L229:
    dec_ref PMT_hit_condition
    dec_ref dt
    dec_ref r288
    goto L145
L230:
    dec_ref PMT_hit_condition
    dec_ref dt
    goto L156
L231:
    xdec_ref track_history
    dec_ref PMT_hit_condition
    goto L156
L232:
    dec_ref PMT_hit_condition
    dec_ref r291
    goto L151
L233:
    dec_ref endpoint_dist
    dec_ref PMT_hit_condition
    dec_ref total_dist
    dec_ref dt
    dec_ref i
    goto L156

def Simulation.photontoElectrons(self, photons):
    self :: modTof.Simulation
    photons, r0, e, r1 :: object
    r2 :: object[1]
    r3 :: object_ptr
    r4 :: object
    r5 :: int
    r6, i, r7, r8 :: object
    r9 :: i32
    r10 :: bit
    r11 :: bool
    r12 :: object
    r13 :: str
    r14 :: object
    r15 :: str
    r16, r17, r18, r19 :: object
    r20 :: i32
    r21 :: bit
    r22 :: bool
    r23, r24 :: object
    r25 :: int
    r26, r27, r28, r29 :: object
    r30 :: int
    r31, dynode, r32, r33 :: object
    r34 :: i32
    r35 :: bit
    r36 :: bool
    r37, r38, r39, r40, r41, r42, r43, delta_voltage, r44, r45, r46, r47 :: object
    r48 :: str
    r49 :: object
    r50 :: str
    r51 :: object
    r52 :: object[1]
    r53 :: object_ptr
    r54, r55 :: object
    r56 :: int
    r57, r58 :: object
L0:
    r0 = box(float, 0.0)
    e = r0
    r1 = load_address PyLong_Type
    r2 = [photons]
    r3 = load_address r2
    r4 = _PyObject_Vectorcall(r1, r3, 1, 0)
    if is_error(r4) goto L33 (error at photontoElectrons:355) else goto L1
L1:
    r5 = 0
    inc_ref r5 :: int
    r6 = box(int, r5)
    i = r6
    dec_ref i
L2:
    inc_ref r5 :: int
    r7 = box(int, r5)
    r8 = PyObject_RichCompare(r7, r4, 0)
    dec_ref r7
    if is_error(r8) goto L34 (error at photontoElectrons:355) else goto L3
L3:
    r9 = PyObject_IsTrue(r8)
    dec_ref r8
    r10 = r9 >= 0 :: signed
    if not r10 goto L34 (error at photontoElectrons:355) else goto L4 :: bool
L4:
    r11 = truncate r9: i32 to builtins.bool
    if r11 goto L5 else goto L35 :: bool
L5:
    r12 = numpy :: module
    r13 = 'random'
    r14 = CPyObject_GetAttr(r12, r13)
    if is_error(r14) goto L34 (error at photontoElectrons:356) else goto L6
L6:
    r15 = 'random'
    r16 = CPyObject_GetAttr(r14, r15)
    dec_ref r14
    if is_error(r16) goto L34 (error at photontoElectrons:356) else goto L7
L7:
    r17 = _PyObject_Vectorcall(r16, 0, 0, 0)
    dec_ref r16
    if is_error(r17) goto L34 (error at photontoElectrons:356) else goto L8
L8:
    r18 = self.QE
    r19 = PyObject_RichCompare(r17, r18, 0)
    dec_ref r17
    dec_ref r18
    if is_error(r19) goto L34 (error at photontoElectrons:356) else goto L9
L9:
    r20 = PyObject_IsTrue(r19)
    dec_ref r19
    r21 = r20 >= 0 :: signed
    if not r21 goto L34 (error at photontoElectrons:356) else goto L10 :: bool
L10:
    r22 = truncate r20: i32 to builtins.bool
    if r22 goto L11 else goto L13 :: bool
L11:
    r23 = object 1
    r24 = PyNumber_InPlaceAdd(e, r23)
    dec_ref e
    if is_error(r24) goto L36 (error at photontoElectrons:357) else goto L12
L12:
    e = r24
L13:
    r25 = CPyTagged_Add(r5, 2)
    dec_ref r5 :: int
    inc_ref r25 :: int
    r5 = r25
    r26 = box(int, r25)
    i = r26
    dec_ref i
    goto L2
L14:
    r27 = self.n_dynodes
    r28 = object 1
    r29 = PyNumber_Subtract(r27, r28)
    dec_ref r27
    if is_error(r29) goto L33 (error at photontoElectrons:358) else goto L15
L15:
    r30 = 0
    inc_ref r30 :: int
    r31 = box(int, r30)
    dynode = r31
L16:
    inc_ref r30 :: int
    r32 = box(int, r30)
    r33 = PyObject_RichCompare(r32, r29, 0)
    dec_ref r32
    if is_error(r33) goto L37 (error at photontoElectrons:358) else goto L17
L17:
    r34 = PyObject_IsTrue(r33)
    dec_ref r33
    r35 = r34 >= 0 :: signed
    if not r35 goto L37 (error at photontoElectrons:358) else goto L18 :: bool
L18:
    r36 = truncate r34: i32 to builtins.bool
    if r36 goto L19 else goto L38 :: bool
L19:
    r37 = self.V
    r38 = object 1
    r39 = PyNumber_Add(dynode, r38)
    if is_error(r39) goto L39 (error at photontoElectrons:359) else goto L20
L20:
    r40 = PyObject_GetItem(r37, r39)
    dec_ref r37
    dec_ref r39
    if is_error(r40) goto L37 (error at photontoElectrons:359) else goto L21
L21:
    r41 = self.V
    r42 = PyObject_GetItem(r41, dynode)
    dec_ref r41
    dec_ref dynode
    if is_error(r42) goto L40 (error at photontoElectrons:359) else goto L22
L22:
    r43 = PyNumber_Subtract(r40, r42)
    dec_ref r40
    dec_ref r42
    if is_error(r43) goto L41 (error at photontoElectrons:359) else goto L23
L23:
    delta_voltage = r43
    r44 = PyNumber_Multiply(e, delta_voltage)
    dec_ref delta_voltage
    if is_error(r44) goto L41 (error at photontoElectrons:360) else goto L24
L24:
    r45 = self.E_per_electron
    r46 = PyNumber_TrueDivide(r44, r45)
    dec_ref r44
    dec_ref r45
    if is_error(r46) goto L41 (error at photontoElectrons:360) else goto L25
L25:
    r47 = numpy :: module
    r48 = 'random'
    r49 = CPyObject_GetAttr(r47, r48)
    if is_error(r49) goto L42 (error at photontoElectrons:360) else goto L26
L26:
    r50 = 'poisson'
    r51 = CPyObject_GetAttr(r49, r50)
    dec_ref r49
    if is_error(r51) goto L42 (error at photontoElectrons:360) else goto L27
L27:
    r52 = [r46]
    r53 = load_address r52
    r54 = _PyObject_Vectorcall(r51, r53, 1, 0)
    dec_ref r51
    if is_error(r54) goto L42 (error at photontoElectrons:360) else goto L28
L28:
    dec_ref r46
    r55 = PyNumber_InPlaceAdd(e, r54)
    dec_ref e
    dec_ref r54
    if is_error(r55) goto L43 (error at photontoElectrons:360) else goto L29
L29:
    e = r55
L30:
    r56 = CPyTagged_Add(r30, 2)
    dec_ref r30 :: int
    inc_ref r56 :: int
    r30 = r56
    r57 = box(int, r56)
    dynode = r57
    goto L16
L31:
    return e
L32:
    r58 = <error> :: object
    return r58
L33:
    dec_ref e
    goto L32
L34:
    dec_ref e
    dec_ref r4
    dec_ref r5 :: int
    goto L32
L35:
    dec_ref r4
    dec_ref r5 :: int
    goto L14
L36:
    dec_ref r4
    dec_ref r5 :: int
    goto L32
L37:
    dec_ref e
    dec_ref r29
    dec_ref r30 :: int
    dec_ref dynode
    goto L32
L38:
    dec_ref r29
    dec_ref r30 :: int
    dec_ref dynode
    goto L31
L39:
    dec_ref e
    dec_ref r29
    dec_ref r30 :: int
    dec_ref dynode
    dec_ref r37
    goto L32
L40:
    dec_ref e
    dec_ref r29
    dec_ref r30 :: int
    dec_ref r40
    goto L32
L41:
    dec_ref e
    dec_ref r29
    dec_ref r30 :: int
    goto L32
L42:
    dec_ref e
    dec_ref r29
    dec_ref r30 :: int
    dec_ref r46
    goto L32
L43:
    dec_ref r29
    dec_ref r30 :: int
    goto L32

def Simulation.particle_task(self, mult):
    self :: modTof.Simulation
    mult, r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13 :: object
    r14 :: list
    r15, r16, r17 :: ptr
    r18, r19, r20 :: object
    r21 :: list
    r22, r23, r24 :: ptr
    r25, r26, r27, r28, r29 :: object
L0:
    r0 = self.t_initial
    r1 = self.seperation_time
    r2 = PyNumber_Multiply(r1, mult)
    dec_ref r1
    if is_error(r2) goto L9 (error at particle_task:367) else goto L1
L1:
    r3 = PyNumber_Add(r0, r2)
    dec_ref r0
    dec_ref r2
    if is_error(r3) goto L8 (error at particle_task:367) else goto L2
L2:
    r4 = self.particle_init_angle_range
    r5 = self.T1z
    r6 = self.T1_width
    r7 = self.T4z
    r8 = self.T4_width
    r9 = self.T1_radius
    r10 = self.T4_radius
    r11 = self.T4_radius
    r12 = self.T4_radius
    r13 = PyNumber_Negative(r12)
    dec_ref r12
    if is_error(r13) goto L10 (error at particle_task:368) else goto L3
L3:
    r14 = PyList_New(2)
    if is_error(r14) goto L11 (error at particle_task:368) else goto L4
L4:
    r15 = get_element_ptr r14 ob_item :: PyListObject
    r16 = load_mem r15 :: ptr*
    set_mem r16, r11 :: builtins.object*
    r17 = r16 + 8
    set_mem r17, r13 :: builtins.object*
    r18 = self.T1_radius
    r19 = self.T1_radius
    r20 = PyNumber_Negative(r19)
    dec_ref r19
    if is_error(r20) goto L12 (error at particle_task:369) else goto L5
L5:
    r21 = PyList_New(2)
    if is_error(r21) goto L13 (error at particle_task:369) else goto L6
L6:
    r22 = get_element_ptr r21 ob_item :: PyListObject
    r23 = load_mem r22 :: ptr*
    set_mem r23, r18 :: builtins.object*
    r24 = r23 + 8
    set_mem r24, r20 :: builtins.object*
    r25 = self.mean_free_path_scints
    r26 = self.photons_produced_per_MeV
    r27 = self.pr_of_scintillation
    r28 = self.particle_path(r3, r4, r5, r6, r7, r8, r9, r10, r14, r21, r25, r26, r27)
    dec_ref r3
    dec_ref r4
    dec_ref r5
    dec_ref r6
    dec_ref r7
    dec_ref r8
    dec_ref r9
    dec_ref r10
    dec_ref r14
    dec_ref r21
    dec_ref r25
    dec_ref r26
    dec_ref r27
    if is_error(r28) goto L8 (error at particle_task:367) else goto L7
L7:
    return r28
L8:
    r29 = <error> :: object
    return r29
L9:
    dec_ref r0
    goto L8
L10:
    dec_ref r3
    dec_ref r4
    dec_ref r5
    dec_ref r6
    dec_ref r7
    dec_ref r8
    dec_ref r9
    dec_ref r10
    dec_ref r11
    goto L8
L11:
    dec_ref r3
    dec_ref r4
    dec_ref r5
    dec_ref r6
    dec_ref r7
    dec_ref r8
    dec_ref r9
    dec_ref r10
    dec_ref r11
    dec_ref r13
    goto L8
L12:
    dec_ref r3
    dec_ref r4
    dec_ref r5
    dec_ref r6
    dec_ref r7
    dec_ref r8
    dec_ref r9
    dec_ref r10
    dec_ref r14
    dec_ref r18
    goto L8
L13:
    dec_ref r3
    dec_ref r4
    dec_ref r5
    dec_ref r6
    dec_ref r7
    dec_ref r8
    dec_ref r9
    dec_ref r10
    dec_ref r14
    dec_ref r18
    dec_ref r20
    goto L8

def Simulation.scint_taskT1(self, xpoint, ypoint, zpoint, time_i):
    self :: modTof.Simulation
    xpoint, ypoint, zpoint, time_i :: object
    r0 :: tuple[object, object, object]
    r1 :: object
    r2 :: str
    r3, r4 :: object
    r5 :: object[1]
    r6 :: object_ptr
    r7, point_i, r8, r9, r10 :: object
    r11 :: list
    r12, r13, r14 :: ptr
    r15 :: object
    r16 :: str
    r17 :: object
    r18 :: object[1]
    r19 :: object_ptr
    r20, r21, r22, r23 :: object
    r24 :: list
    r25, r26, r27 :: ptr
    r28, r29, r30, r31, r32, r33, r34, r35, r36 :: object
L0:
    r0 = (xpoint, ypoint, zpoint)
    r1 = numpy :: module
    r2 = 'hstack'
    r3 = CPyObject_GetAttr(r1, r2)
    if is_error(r3) goto L10 (error at scint_taskT1:373) else goto L1
L1:
    r4 = box(tuple[object, object, object], r0)
    r5 = [r4]
    r6 = load_address r5
    r7 = _PyObject_Vectorcall(r3, r6, 1, 0)
    dec_ref r3
    if is_error(r7) goto L11 (error at scint_taskT1:373) else goto L2
L2:
    dec_ref r4
    point_i = r7
    r8 = self.T1_radius
    r9 = self.T1z
    r10 = self.T1top
    r11 = PyList_New(2)
    if is_error(r11) goto L12 (error at scint_taskT1:375) else goto L3
L3:
    r12 = get_element_ptr r11 ob_item :: PyListObject
    r13 = load_mem r12 :: ptr*
    set_mem r13, r9 :: builtins.object*
    r14 = r13 + 8
    set_mem r14, r10 :: builtins.object*
    r15 = numpy :: module
    r16 = 'array'
    r17 = CPyObject_GetAttr(r15, r16)
    if is_error(r17) goto L13 (error at scint_taskT1:375) else goto L4
L4:
    r18 = [r11]
    r19 = load_address r18
    r20 = _PyObject_Vectorcall(r17, r19, 1, 0)
    dec_ref r17
    if is_error(r20) goto L13 (error at scint_taskT1:375) else goto L5
L5:
    dec_ref r11
    r21 = self.T1_radius
    r22 = self.T1_radius
    r23 = PyNumber_Negative(r22)
    dec_ref r22
    if is_error(r23) goto L14 (error at scint_taskT1:376) else goto L6
L6:
    r24 = PyList_New(2)
    if is_error(r24) goto L15 (error at scint_taskT1:376) else goto L7
L7:
    r25 = get_element_ptr r24 ob_item :: PyListObject
    r26 = load_mem r25 :: ptr*
    set_mem r26, r21 :: builtins.object*
    r27 = r26 + 8
    set_mem r27, r23 :: builtins.object*
    r28 = self.PMT1_center
    r29 = self.PMT1_radius
    r30 = self.T1_corner_center
    r31 = self.T1_corner_radius
    r32 = self.max_simulated_reflections
    r33 = box(bool, 1)
    r34 = box(bool, 0)
    r35 = self.scintillator_monte_carlo(point_i, r33, r8, r20, r24, r28, r29, r30, r31, r32, time_i, r34)
    dec_ref point_i
    dec_ref r8
    dec_ref r20
    dec_ref r24
    dec_ref r28
    dec_ref r29
    dec_ref r30
    dec_ref r31
    dec_ref r32
    if is_error(r35) goto L9 (error at scint_taskT1:374) else goto L8
L8:
    return r35
L9:
    r36 = <error> :: object
    return r36
L10:
    dec_ref r0
    goto L9
L11:
    dec_ref r4
    goto L9
L12:
    dec_ref point_i
    dec_ref r8
    dec_ref r9
    dec_ref r10
    goto L9
L13:
    dec_ref point_i
    dec_ref r8
    dec_ref r11
    goto L9
L14:
    dec_ref point_i
    dec_ref r8
    dec_ref r20
    dec_ref r21
    goto L9
L15:
    dec_ref point_i
    dec_ref r8
    dec_ref r20
    dec_ref r21
    dec_ref r23
    goto L9

def Simulation.scint_taskT4(self, xpoint, ypoint, zpoint, time_i):
    self :: modTof.Simulation
    xpoint, ypoint, zpoint, time_i :: object
    r0 :: tuple[object, object, object]
    r1 :: object
    r2 :: str
    r3, r4 :: object
    r5 :: object[1]
    r6 :: object_ptr
    r7, point_i, r8, r9, r10 :: object
    r11 :: list
    r12, r13, r14 :: ptr
    r15 :: object
    r16 :: str
    r17 :: object
    r18 :: object[1]
    r19 :: object_ptr
    r20, r21, r22, r23, r24 :: object
    r25 :: list
    r26, r27, r28 :: ptr
    r29, r30, r31, r32, r33, r34, r35, r36, r37 :: object
L0:
    r0 = (xpoint, ypoint, zpoint)
    r1 = numpy :: module
    r2 = 'hstack'
    r3 = CPyObject_GetAttr(r1, r2)
    if is_error(r3) goto L11 (error at scint_taskT4:380) else goto L1
L1:
    r4 = box(tuple[object, object, object], r0)
    r5 = [r4]
    r6 = load_address r5
    r7 = _PyObject_Vectorcall(r3, r6, 1, 0)
    dec_ref r3
    if is_error(r7) goto L12 (error at scint_taskT4:380) else goto L2
L2:
    dec_ref r4
    point_i = r7
    r8 = self.T4_radius
    r9 = self.T4z
    r10 = self.T4top
    r11 = PyList_New(2)
    if is_error(r11) goto L13 (error at scint_taskT4:382) else goto L3
L3:
    r12 = get_element_ptr r11 ob_item :: PyListObject
    r13 = load_mem r12 :: ptr*
    set_mem r13, r9 :: builtins.object*
    r14 = r13 + 8
    set_mem r14, r10 :: builtins.object*
    r15 = numpy :: module
    r16 = 'array'
    r17 = CPyObject_GetAttr(r15, r16)
    if is_error(r17) goto L14 (error at scint_taskT4:382) else goto L4
L4:
    r18 = [r11]
    r19 = load_address r18
    r20 = _PyObject_Vectorcall(r17, r19, 1, 0)
    dec_ref r17
    if is_error(r20) goto L14 (error at scint_taskT4:382) else goto L5
L5:
    dec_ref r11
    r21 = self.T4_radius
    r22 = PyNumber_Negative(r21)
    dec_ref r21
    if is_error(r22) goto L15 (error at scint_taskT4:383) else goto L6
L6:
    r23 = self.T4_radius
    r24 = PyNumber_Positive(r23)
    dec_ref r23
    if is_error(r24) goto L16 (error at scint_taskT4:383) else goto L7
L7:
    r25 = PyList_New(2)
    if is_error(r25) goto L17 (error at scint_taskT4:383) else goto L8
L8:
    r26 = get_element_ptr r25 ob_item :: PyListObject
    r27 = load_mem r26 :: ptr*
    set_mem r27, r22 :: builtins.object*
    r28 = r27 + 8
    set_mem r28, r24 :: builtins.object*
    r29 = self.PMT4_center
    r30 = self.PMT4_radius
    r31 = self.T4_corner_center
    r32 = self.T4_corner_radius
    r33 = self.max_simulated_reflections
    r34 = box(bool, 1)
    r35 = box(bool, 0)
    r36 = self.scintillator_monte_carlo(point_i, r34, r8, r20, r25, r29, r30, r31, r32, r33, time_i, r35)
    dec_ref point_i
    dec_ref r8
    dec_ref r20
    dec_ref r25
    dec_ref r29
    dec_ref r30
    dec_ref r31
    dec_ref r32
    dec_ref r33
    if is_error(r36) goto L10 (error at scint_taskT4:381) else goto L9
L9:
    return r36
L10:
    r37 = <error> :: object
    return r37
L11:
    dec_ref r0
    goto L10
L12:
    dec_ref r4
    goto L10
L13:
    dec_ref point_i
    dec_ref r8
    dec_ref r9
    dec_ref r10
    goto L10
L14:
    dec_ref point_i
    dec_ref r8
    dec_ref r11
    goto L10
L15:
    dec_ref point_i
    dec_ref r8
    dec_ref r20
    goto L10
L16:
    dec_ref point_i
    dec_ref r8
    dec_ref r20
    dec_ref r22
    goto L10
L17:
    dec_ref point_i
    dec_ref r8
    dec_ref r20
    dec_ref r22
    dec_ref r24
    goto L10

def Simulation.run(self, arg, kwargs):
    self :: modTof.Simulation
    arg :: tuple
    kwargs, r0 :: dict
    r1, r2 :: object
    r3 :: bit
    r4 :: str
    r5 :: object
    r6 :: str
    r7 :: dict
    r8 :: str
    r9 :: object
    r10 :: i32
    r11 :: bit
    r12 :: dict
    r13 :: str
    r14, r15 :: object
    r16 :: i32
    r17 :: bit
    r18 :: bool
    r19, r20 :: object
    r21 :: object[1]
    r22 :: object_ptr
    r23 :: object
    r24 :: bool
    r25 :: str
    r26 :: object
    r27, r28, r29 :: str
    r30 :: object
    r31 :: str
    r32 :: object
    r33 :: object[1]
    r34 :: object_ptr
    r35, r36 :: object
    r37 :: bool
    r38 :: str
    r39 :: object
    r40, r41, r42 :: str
    r43 :: object
    r44 :: str
    r45 :: object
    r46 :: object[1]
    r47 :: object_ptr
    r48 :: object
    r49 :: str
    r50, r51 :: object
    r52 :: bool
    r53 :: dict
    r54 :: str
    r55, r56, logstarttime :: object
    r57 :: list
    times :: object
    r58 :: list
    points :: object
    r59 :: list
    photons :: object
    r60 :: list
    particleID, r61, i :: object
    r62 :: dict
    r63 :: str
    r64, r65, r66, r67 :: object
    r68 :: dict
    r69 :: str
    r70 :: object
    r71 :: object[1]
    r72 :: object_ptr
    r73, r74, r75 :: object
    r76 :: str
    r77 :: object
    r78 :: str
    r79 :: object
    r80 :: object[1]
    r81 :: object_ptr
    r82 :: object
    r83 :: bool
    pool__redef__ :: object
    r84 :: str
    r85, r86, r87 :: object
    r88 :: object[1]
    r89 :: object_ptr
    r90 :: object
    r91 :: str
    r92, res, r93, r94, r95, r96 :: object
    r97 :: bool
    time_i, r98 :: object
    r99 :: bool
    point_i, r100 :: object
    r101 :: bool
    photon_i, r102 :: object
    r103 :: bool
    r104 :: object
    r105 :: str
    r106 :: object
    r107 :: str
    r108 :: object
    r109 :: str
    r110 :: object
    r111 :: int
    r112, r113 :: object
    r114 :: str
    r115 :: object
    r116 :: object[2]
    r117 :: object_ptr
    r118 :: object
    r119 :: str
    r120, r121, r122 :: object
    r123 :: bit
    r124, r125 :: tuple[object, object, object]
    r126, r127, r128 :: object
    r129 :: object[4]
    r130 :: object_ptr
    r131 :: object
    r132 :: i32
    r133 :: bit
    r134 :: bool
    r135 :: bit
    r136, r137, r138 :: tuple[object, object, object]
    r139 :: object
    r140 :: object[4]
    r141 :: object_ptr
    r142 :: object
    r143 :: bit
    r144 :: dict
    r145 :: str
    r146, r147, logendparticle, r148 :: object
    r149 :: str
    r150 :: object
    r151 :: object[1]
    r152 :: object_ptr
    r153, N :: object
    r154 :: str
    r155 :: object
    r156 :: str
    r157 :: object
    r158 :: object[2]
    r159 :: object_ptr
    r160, r161 :: object
    r162 :: str
    r163 :: object
    r164 :: object[1]
    r165 :: object_ptr
    r166, r167 :: object
    r168 :: str
    r169 :: object
    r170 :: object[1]
    r171 :: object_ptr
    r172, r173 :: object
    r174 :: str
    r175 :: object
    r176 :: object[1]
    r177 :: object_ptr
    r178, r179 :: object
    r180 :: str
    r181 :: object
    r182 :: object[1]
    r183 :: object_ptr
    r184 :: object
    r185 :: list
    T1_input_times :: object
    r186 :: list
    T4_input_times :: object
    r187 :: list
    r188 :: bool
    r189 :: list
    r190 :: bool
    r191 :: list
    r192 :: bool
    r193 :: list
    r194 :: bool
    r195 :: list
    r196 :: bool
    r197 :: list
    r198 :: bool
    r199 :: list
    r200 :: bool
    r201 :: list
    r202 :: bool
    r203 :: list
    r204 :: bool
    r205 :: list
    r206 :: bool
    r207, r208, r209, r210, r211, r212, r213, r214, r215, r216 :: object
    r217 :: tuple[object, object]
    r218, r219, r220, r221, r222, T1points, r223, r224, r225, r226, r227, r228, r229, r230, r231, r232 :: object
    r233 :: tuple[object, object]
    r234, r235, r236, r237, r238, T1times, r239, r240, r241, r242, r243, r244, r245, r246, r247, r248 :: object
    r249 :: tuple[object, object]
    r250, r251, r252, r253, r254, T1photons, r255, r256, r257, r258, r259, r260, r261, r262, r263, r264 :: object
    r265 :: tuple[object, object]
    r266, r267, r268, r269, r270, T1part_ids, r271 :: object
    r272 :: str
    r273, r274 :: object
    r275 :: str
    r276, r277 :: object
    r278 :: object[3]
    r279 :: object_ptr
    r280, r281, r282, r283, r284, r285, r286, r287, r288, r289, r290, r291 :: object
    r292 :: tuple[object, object]
    r293, r294, r295, r296, r297, T4points, r298, r299, r300, r301, r302, r303, r304, r305, r306, r307 :: object
    r308 :: tuple[object, object]
    r309, r310, r311, r312, r313, T4times, r314, r315, r316, r317, r318, r319, r320, r321, r322, r323 :: object
    r324 :: tuple[object, object]
    r325, r326, r327, r328, r329, T4photons, r330, r331, r332, r333, r334, r335, r336, r337, r338, r339 :: object
    r340 :: tuple[object, object]
    r341, r342, r343, r344, r345, T4part_ids, r346 :: object
    r347 :: str
    r348, r349 :: object
    r350 :: str
    r351, r352 :: object
    r353 :: object[3]
    r354 :: object_ptr
    r355, r356 :: object
    r357 :: str
    r358 :: object
    r359 :: str
    r360 :: object
    r361 :: object[1]
    r362 :: object_ptr
    r363 :: object
    r364, r365 :: str
    r366 :: object
    r367 :: str
    r368 :: object
    r369 :: object[1]
    r370 :: object_ptr
    r371 :: object
    r372, r373 :: str
    r374 :: object
    r375 :: str
    r376 :: object
    r377 :: object[1]
    r378 :: object_ptr
    r379, r380, r381, r382, r383 :: object
    r384 :: str
    r385, r386 :: object
    r387 :: dict
    r388 :: str
    r389, r390, logstartphoton :: object
    r391 :: dict
    r392 :: str
    r393, r394 :: object
    r395 :: dict
    r396 :: str
    r397 :: object
    r398 :: object[1]
    r399 :: object_ptr
    r400, r401, r402 :: object
    r403 :: str
    r404 :: object
    r405 :: str
    r406 :: object
    r407 :: object[1]
    r408 :: object_ptr
    r409 :: object
    r410 :: bool
    pool :: object
    r411 :: str
    r412 :: object
    r413 :: str
    r414 :: object
    r415 :: object[1]
    r416 :: object_ptr
    r417 :: object
    r418 :: str
    r419, r420 :: object
    r421 :: str
    r422 :: object
    r423 :: tuple[object, object]
    r424, r425, r426 :: object
    r427 :: str
    r428, r429 :: object
    r430 :: str
    r431, r432 :: object
    r433 :: object[3]
    r434 :: object_ptr
    r435, r436 :: object
    r437 :: str
    r438, T1res :: object
    r439 :: str
    r440 :: object
    r441 :: str
    r442 :: object
    r443 :: object[1]
    r444 :: object_ptr
    r445 :: object
    r446 :: str
    r447 :: object
    r448 :: str
    r449 :: object
    r450 :: object[1]
    r451 :: object_ptr
    r452 :: object
    r453 :: str
    r454, r455 :: object
    r456 :: str
    r457 :: object
    r458 :: tuple[object, object]
    r459, r460, r461 :: object
    r462 :: str
    r463, r464 :: object
    r465 :: str
    r466, r467 :: object
    r468 :: object[3]
    r469 :: object_ptr
    r470, r471 :: object
    r472 :: str
    r473, T4res :: object
    r474 :: str
    r475 :: object
    r476 :: str
    r477 :: object
    r478 :: object[1]
    r479 :: object_ptr
    r480 :: object
    r481 :: str
    r482 :: object
    r483 :: str
    r484 :: object
    r485 :: object[1]
    r486 :: object_ptr
    r487, r488, r489, r490, r491, r492, r493 :: object
    r494 :: bool
    T1hit_PMT, r495 :: object
    r496 :: bool
    T1travel_time, r497 :: object
    r498 :: bool
    T1tot_dist, r499 :: object
    r500 :: bool
    T1endpt, r501 :: object
    r502 :: bool
    T1bounces, r503 :: object
    r504 :: bool
    T1prop, r505 :: object
    r506 :: bool
    T1part_id :: object
    r507 :: i32
    r508 :: bit
    r509 :: bool
    r510 :: str
    r511, r512 :: object
    r513 :: str
    r514, r515 :: object
    r516 :: str
    r517, r518 :: object
    r519 :: str
    r520, r521 :: object
    r522 :: str
    r523, r524 :: object
    r525 :: str
    r526 :: object
    r527, r528 :: bit
    r529, r530, r531, r532, r533, r534 :: object
    r535 :: bool
    T4hit_PMT, r536 :: object
    r537 :: bool
    T4travel_time, r538 :: object
    r539 :: bool
    T4tot_dist, r540 :: object
    r541 :: bool
    T4endpt, r542 :: object
    r543 :: bool
    T4bounces, r544 :: object
    r545 :: bool
    T4prop, r546 :: object
    r547 :: bool
    T4part_id :: object
    r548 :: i32
    r549 :: bit
    r550 :: bool
    r551 :: str
    r552, r553 :: object
    r554 :: str
    r555, r556 :: object
    r557 :: str
    r558, r559 :: object
    r560 :: str
    r561, r562 :: object
    r563 :: str
    r564, r565 :: object
    r566 :: str
    r567 :: object
    r568, r569 :: bit
    r570, r571 :: tuple[object, object, object]
    r572, r573, r574 :: object
    r575 :: object[4]
    r576 :: object_ptr
    r577 :: object
    r578 :: i32
    r579 :: bit
    r580 :: bool
    r581 :: bit
    r582, r583, r584 :: tuple[object, object, object]
    r585 :: object
    r586 :: object[4]
    r587 :: object_ptr
    r588 :: object
    r589 :: bit
    r590 :: dict
    r591 :: str
    r592, r593, logendtime :: object
    r594 :: str
    r595 :: object
    r596 :: str
    r597 :: object
    r598 :: object[1]
    r599 :: object_ptr
    r600, r601 :: object
    r602 :: dict
    r603 :: str
    r604 :: object
    r605 :: object[1]
    r606 :: object_ptr
    r607, r608, pgtime, r609 :: object
    r610 :: dict
    r611 :: str
    r612 :: object
    r613 :: object[1]
    r614 :: object_ptr
    r615, r616, phtime, r617 :: object
    r618 :: dict
    r619 :: str
    r620 :: object
    r621 :: object[1]
    r622 :: object_ptr
    r623, r624, ttime :: object
    r625, r626, r627, r628 :: str
    r629 :: object
    r630 :: str
    r631 :: object
    r632 :: object[1]
    r633 :: object_ptr
    r634 :: object
    r635, r636, r637, r638 :: str
    r639 :: object
    r640 :: str
    r641 :: object
    r642 :: object[1]
    r643 :: object_ptr
    r644 :: object
    r645, r646, r647, r648 :: str
    r649 :: object
    r650 :: str
    r651 :: object
    r652 :: object[1]
    r653 :: object_ptr
    r654 :: object
    r655 :: str
    r656 :: object
    r657 :: str
    r658 :: object
    r659 :: object[1]
    r660 :: object_ptr
    r661 :: object
    r662 :: str
    r663 :: int
    r664, r665 :: object
    r666 :: str
    r667 :: object
    r668 :: object[2]
    r669 :: object_ptr
    r670 :: object
    r671 :: str
    r672 :: object
    r673 :: str
    r674 :: object
    r675 :: object[1]
    r676 :: object_ptr
    r677 :: object
    r678 :: str
    r679 :: int
    r680 :: object
    r681, r682, r683 :: str
    r684 :: object
    r685 :: str
    r686 :: object
    r687 :: object[1]
    r688 :: object_ptr
    r689 :: object
    r690 :: int
    r691, r692 :: object
    r693, r694 :: str
    r695 :: object
    r696 :: list
    r697, r698, r699 :: ptr
    r700 :: str
    r701 :: object
    r702 :: str
    r703 :: object
    r704 :: object[5]
    r705 :: object_ptr
    r706 :: object
    r707 :: str
    r708 :: int
    r709, r710 :: object
    r711 :: str
    r712 :: object
    r713 :: object[2]
    r714 :: object_ptr
    r715 :: object
    r716 :: str
    r717 :: object
    r718 :: str
    r719 :: object
    r720 :: object[1]
    r721 :: object_ptr
    r722 :: object
    r723 :: str
    r724 :: int
    r725 :: object
    r726, r727, r728 :: str
    r729 :: object
    r730 :: str
    r731 :: object
    r732 :: object[1]
    r733 :: object_ptr
    r734 :: object
    r735 :: int
    r736, r737 :: object
    r738, r739 :: str
    r740 :: object
    r741 :: list
    r742, r743, r744 :: ptr
    r745 :: str
    r746 :: object
    r747 :: str
    r748 :: object
    r749 :: object[5]
    r750 :: object_ptr
    r751 :: object
    r752 :: str
    r753 :: object
    r754 :: str
    r755 :: object
    r756 :: object[1]
    r757 :: object_ptr
    r758, r759, r760, r761, r762, r763, r764, r765 :: object
    r766 :: str
    r767, r768 :: object
    r769 :: list
    signals_channelT1 :: object
    r770 :: list
    signals_channelT4 :: object
    r771 :: list
    output_times_channelT1 :: object
    r772 :: list
    output_times_channelT4 :: object
    r773 :: list
    signals :: object
    r774 :: list
    output_times, r775, r776, t, r777, r778, pmtSignal_i, r779, r780 :: object
    r781 :: str
    r782, r783, r784 :: object
    r785 :: str
    r786 :: object
    r787 :: str
    r788 :: object
    r789 :: str
    r790 :: object
    r791 :: bit
    r792, r793, r794, r795, r796, r797 :: object
    r798 :: str
    r799, r800, r801 :: object
    r802 :: str
    r803 :: object
    r804 :: str
    r805 :: object
    r806 :: str
    r807 :: object
    r808 :: bit
    r809 :: object
    r810 :: str
    r811 :: object
    r812 :: object[1]
    r813 :: object_ptr
    r814, r815, r816, r817, r818, r819, r820 :: object
    r821 :: bool
    r822 :: object
    r823 :: str
    r824 :: object
    r825 :: object[1]
    r826 :: object_ptr
    r827 :: object
    r828 :: bool
    r829 :: object
    r830 :: str
    r831 :: object
    r832 :: object[1]
    r833 :: object_ptr
    r834, r835, r836, r837, r838, r839, r840 :: object
    r841 :: bool
    r842 :: object
    r843 :: str
    r844 :: object
    r845 :: object[1]
    r846 :: object_ptr
    r847, r848, r849, r850, r851, r852, r853, r854, r855 :: object
    r856 :: bool
    r857 :: object
    r858 :: str
    r859 :: object
    r860 :: object[1]
    r861 :: object_ptr
    r862 :: object
    r863 :: bool
    r864 :: object
    r865 :: str
    r866 :: object
    r867 :: object[1]
    r868 :: object_ptr
    r869 :: object
    r870 :: bool
    r871 :: object
    r872 :: str
    r873 :: dict
    r874 :: object
    r875 :: str
    r876, r877, output_extra :: object
    r878 :: str
    r879, r880, output_both :: object
    r881 :: i32
    r882 :: bit
    r883 :: bool
    r884 :: i32
    r885 :: bit
    r886 :: bool
    r887 :: str
    r888 :: object
    r889 :: str
    r890 :: object
    r891 :: object[1]
    r892 :: object_ptr
    r893 :: object
    r894 :: str
    r895 :: object
    r896 :: str
    r897 :: object
    r898 :: str
    r899 :: object
    r900 :: str
    r901 :: object
    r902 :: str
    r903 :: object
    r904 :: str
    r905 :: object
    r906 :: dict
    r907 :: object
    r908 :: str
    r909 :: object
    r910 :: object[1]
    r911 :: object_ptr
    r912, dft1 :: object
    r913 :: str
    r914 :: object
    r915 :: str
    r916 :: object
    r917 :: str
    r918 :: object
    r919 :: str
    r920 :: object
    r921 :: str
    r922 :: object
    r923 :: str
    r924 :: object
    r925 :: dict
    r926 :: object
    r927 :: str
    r928 :: object
    r929 :: object[1]
    r930 :: object_ptr
    r931, dft4 :: object
    r932 :: str
    r933 :: object
    r934, r935, r936, r937 :: str
    r938 :: dict
    r939 :: str
    r940 :: object
    r941 :: str
    r942 :: object
    r943, r944 :: str
    r945 :: object
    r946, r947, r948, r949, r950 :: str
    r951 :: object
    r952 :: str
    r953 :: object
    r954, r955, r956, r957 :: str
    r958 :: dict
    r959 :: str
    r960 :: object
    r961 :: str
    r962 :: object
    r963, r964 :: str
    r965 :: object
    r966, r967, r968, r969, r970 :: str
    r971 :: object
    r972 :: i32
    r973 :: bit
    r974 :: bool
    r975 :: object
    r976 :: str
    r977 :: object
    r978 :: str
    r979 :: object
    r980 :: object[1]
    r981 :: object_ptr
    r982, r983, r984 :: object
    r985 :: list
    r986, r987, r988 :: ptr
    r989 :: short_int
    r990, r991 :: object
    r992 :: list
    r993, r994, r995 :: ptr
    r996 :: short_int
    r997 :: list
    r998, r999 :: object
    r1000, r1001, r1002 :: ptr
    r1003 :: short_int
    r1004 :: ptr
    r1005 :: native_int
    r1006 :: short_int
    r1007 :: bit
    r1008 :: ptr
    r1009 :: native_int
    r1010 :: short_int
    r1011 :: bit
    r1012 :: ptr
    r1013 :: native_int
    r1014 :: short_int
    r1015 :: bit
    r1016, time, r1017, signal, r1018, ch :: object
    r1019 :: str
    r1020 :: object
    r1021 :: str
    r1022 :: object
    r1023 :: object[1]
    r1024 :: object_ptr
    r1025 :: object
    r1026 :: list
    r1027 :: object
    r1028, r1029 :: ptr
    t_binned :: object
    r1030 :: list
    r1031 :: object
    r1032, r1033 :: ptr
    y_binned :: object
    r1034 :: short_int
    r1035, r1036, r1037, y, r1038, r1039, r1040, r1041, r1042, r1043, r1044 :: object
    r1045 :: i32
    r1046 :: bit
    r1047 :: bool
    r1048, r1049, lower_bound, r1050, r1051, r1052, r1053, r1054, r1055 :: object
    r1056 :: str
    r1057 :: object
    r1058 :: object[1]
    r1059 :: object_ptr
    r1060, r1061, r1062, r1063, r1064, r1065 :: object
    r1066 :: i32
    r1067 :: bit
    r1068 :: bool
    r1069, upper_bound, r1070 :: object
    r1071 :: str
    r1072 :: object
    r1073 :: object[1]
    r1074 :: object_ptr
    r1075, r1076 :: object
    r1077 :: i32
    r1078 :: bit
    r1079 :: bool
    r1080 :: object
    r1081 :: str
    r1082 :: object
    r1083 :: object[2]
    r1084 :: object_ptr
    r1085, r1086, r1087, r1088, r1089, r1090, r1091, r1092 :: object
    r1093 :: str
    r1094 :: object
    r1095 :: object[3]
    r1096 :: object_ptr
    r1097, r1098, r1099, r1100, r1101, cur_x, r1102, r1103, x, r1104 :: object
    r1105 :: str
    r1106 :: object
    r1107 :: object[1]
    r1108 :: object_ptr
    r1109, r1110 :: object
    r1111 :: i32
    r1112 :: bit
    r1113 :: bool
    r1114 :: str
    r1115 :: object
    r1116 :: str
    r1117, r1118, r1119 :: object
    r1120 :: str
    r1121 :: object
    r1122 :: object[2]
    r1123 :: object_ptr
    r1124, r1125, r1126, r1127, r1128 :: object
    r1129 :: i32
    r1130 :: bit
    r1131 :: bool
    r1132 :: object
    r1133 :: str
    r1134 :: object
    r1135 :: object[2]
    r1136 :: object_ptr
    r1137 :: object
    r1138 :: int
    r1139, r1140 :: object
    r1141 :: i32
    r1142 :: bit
    r1143 :: bool
    r1144 :: object
    r1145 :: str
    r1146 :: object
    r1147 :: object[2]
    r1148 :: object_ptr
    r1149, index, r1150, r1151, r1152, r1153, r1154, r1155, r1156, r1157 :: object
    r1158 :: i32
    r1159 :: bit
    r1160 :: bool
    r1161 :: str
    r1162 :: object
    r1163 :: str
    r1164, r1165 :: object
    r1166 :: bit
    r1167 :: list
    r1168 :: short_int
    r1169, i_2, r1170, r1171, t_2, r1172 :: object
    r1173 :: i32
    r1174 :: bit
    r1175 :: bool
    r1176 :: i32
    r1177 :: bit
    r1178 :: short_int
    r1179 :: object
    r1180 :: bit
    r1181, index_lower :: object
    r1182 :: list
    r1183 :: short_int
    r1184, i_3, r1185, r1186, t_3, r1187 :: object
    r1188 :: i32
    r1189 :: bit
    r1190 :: bool
    r1191 :: i32
    r1192 :: bit
    r1193 :: short_int
    r1194 :: object
    r1195 :: bit
    r1196, r1197, index_upper :: object
    r1198 :: dict
    r1199 :: str
    r1200, r1201, r1202, r1203, r1204, r1205 :: object
    r1206 :: str
    r1207 :: object
    r1208 :: object[3]
    r1209 :: object_ptr
    r1210, r1211, r1212, r1213, r1214, r1215, r1216, gaussian :: object
    r1217 :: short_int
    r1218, r1219, r1220, y_add, r1221, r1222, r1223, r1224, r1225 :: object
    r1226 :: i32
    r1227 :: bit
    r1228 :: bool
    r1229, r1230, r1231 :: object
    r1232 :: i32
    r1233 :: bit
    r1234, r1235 :: object
    r1236 :: i32
    r1237 :: bit
    r1238 :: short_int
    r1239 :: object
    r1240 :: bit
    r1241 :: short_int
    r1242 :: object
    r1243 :: bit
    r1244, r1245 :: str
    r1246 :: dict
    r1247 :: object
    r1248 :: str
    r1249 :: object
    r1250 :: object[1]
    r1251 :: object_ptr
    r1252 :: object
    r1253 :: str
    r1254 :: list
    r1255, r1256 :: ptr
    r1257 :: str
    r1258 :: object
    r1259 :: object[1]
    r1260 :: object_ptr
    r1261, r1262, df :: object
    r1263 :: str
    r1264 :: object
    r1265 :: str
    r1266 :: object
    r1267 :: object[1]
    r1268 :: object_ptr
    r1269 :: object
    r1270 :: list
    fill_data :: object
    r1271 :: str
    r1272 :: object
    r1273 :: str
    r1274, r1275, r1276, r1277, r1278, r1279, r1280 :: object
    r1281 :: list
    r1282 :: object
    r1283, r1284, r1285 :: ptr
    r1286 :: str
    r1287 :: object
    r1288 :: str
    r1289 :: object
    r1290 :: int
    r1291, r1292, r1293 :: object
    r1294 :: int
    r1295, r1296, r1297 :: object
    r1298 :: i32
    r1299 :: bit
    r1300 :: bool
    r1301 :: str
    r1302 :: object
    r1303 :: str
    r1304, r1305 :: object
    r1306 :: str
    r1307 :: object
    r1308 :: str
    r1309, r1310, r1311, r1312, r1313, r1314, r1315, r1316 :: object
    r1317 :: i32
    r1318 :: bit
    r1319 :: bool
    r1320 :: str
    r1321 :: object
    r1322 :: str
    r1323, r1324, r1325, r1326, r1327, r1328 :: object
    r1329 :: list
    r1330 :: object
    r1331, r1332, r1333 :: ptr
    r1334 :: str
    r1335 :: object
    r1336 :: str
    r1337 :: object
    r1338 :: str
    r1339, r1340, r1341, r1342, r1343, r1344, r1345, r1346 :: object
    r1347 :: list
    r1348 :: object
    r1349, r1350, r1351 :: ptr
    r1352 :: str
    r1353 :: object
    r1354 :: int
    r1355 :: object
    r1356 :: str
    r1357 :: object
    r1358 :: str
    r1359, r1360, r1361, r1362, r1363, r1364, r1365 :: object
    r1366 :: list
    r1367 :: object
    r1368, r1369, r1370 :: ptr
    r1371 :: str
    r1372, r1373 :: object
    r1374 :: str
    r1375 :: object
    r1376 :: object[1]
    r1377 :: object_ptr
    r1378 :: object
    r1379, r1380 :: str
    r1381 :: list
    r1382, r1383, r1384 :: ptr
    r1385 :: object
    r1386 :: str
    r1387 :: object
    r1388 :: object[2]
    r1389 :: object_ptr
    r1390, r1391, fill :: object
    r1392 :: list
    r1393, r1394, r1395 :: ptr
    r1396 :: object
    r1397 :: str
    r1398, r1399 :: object
    r1400 :: object[2]
    r1401 :: object_ptr
    r1402, r1403 :: object
    r1404 :: str
    r1405 :: list
    r1406, r1407 :: ptr
    r1408 :: str
    r1409 :: object
    r1410 :: object[1]
    r1411 :: object_ptr
    r1412, r1413 :: object
    r1414 :: str
    r1415, r1416 :: object
    r1417 :: object[1]
    r1418 :: object_ptr
    r1419, r1420 :: object
    r1421 :: str
    r1422, r1423, r1424 :: object
    r1425 :: str
    r1426 :: i32
    r1427 :: bit
    r1428, r1429 :: str
    r1430 :: list
    r1431, r1432, r1433 :: ptr
    r1434 :: object
    r1435 :: str
    r1436 :: object
    r1437, r1438, r1439, r1440, r1441, r1442, r1443, r1444 :: str
    r1445 :: dict
    r1446 :: str
    r1447 :: object
    r1448 :: str
    r1449 :: object
    r1450, r1451 :: str
    r1452 :: object
    r1453, r1454, r1455, r1456, r1457, r1458, r1459 :: str
    r1460, r1461, r1462 :: object
    r1463 :: object[5]
    r1464 :: object_ptr
    r1465, r1466 :: object
    r1467, r1468, r1469 :: short_int
    r1470 :: str
    r1471 :: object
    r1472 :: str
    r1473 :: object
    r1474 :: object[1]
    r1475 :: object_ptr
    r1476, r1477, r1478 :: object
L0:
    r0 = modTof.globals :: static
    r1 = gc :: module
    r2 = load_address _Py_NoneStruct
    r3 = r1 != r2
    if r3 goto L3 else goto L1 :: bool
L1:
    r4 = 'gc'
    r5 = PyImport_Import(r4)
    if is_error(r5) goto L720 (error at run:391) else goto L2
L2:
    gc = r5 :: module
    dec_ref r5
L3:
    r6 = 'gc'
    r7 = PyImport_GetModuleDict()
    r8 = 'gc'
    r9 = CPyDict_GetItem(r7, r8)
    if is_error(r9) goto L720 (error at run:391) else goto L4
L4:
    r10 = CPyDict_SetItem(r0, r6, r9)
    dec_ref r9
    r11 = r10 >= 0 :: signed
    if not r11 goto L720 (error at run:391) else goto L5 :: bool
L5:
    r12 = modTof.globals :: static
    r13 = 'freeze_support'
    r14 = CPyDict_GetItem(r12, r13)
    if is_error(r14) goto L720 (error at run:392) else goto L6
L6:
    r15 = _PyObject_Vectorcall(r14, 0, 0, 0)
    dec_ref r14
    if is_error(r15) goto L720 (error at run:392) else goto L721
L7:
    r16 = PyObject_IsTrue(arg)
    r17 = r16 >= 0 :: signed
    if not r17 goto L720 (error at run:390) else goto L8 :: bool
L8:
    r18 = truncate r16: i32 to builtins.bool
    if r18 goto L9 else goto L16 :: bool
L9:
    r19 = CPySequenceTuple_GetItem(arg, 0)
    if is_error(r19) goto L720 (error at run:394) else goto L10
L10:
    r20 = load_address PyLong_Type
    r21 = [r19]
    r22 = load_address r21
    r23 = _PyObject_Vectorcall(r20, r22, 1, 0)
    if is_error(r23) goto L722 (error at run:394) else goto L11
L11:
    dec_ref r19
    self.num_particles = r23
    r25 = 'Generating '
    r26 = self.num_particles
    r27 = PyObject_Str(r26)
    dec_ref r26
    if is_error(r27) goto L720 (error at run:395) else goto L12
L12:
    r28 = ' particles now...'
    r29 = CPyStr_Build(3, r25, r27, r28)
    dec_ref r27
    if is_error(r29) goto L720 (error at run:395) else goto L13
L13:
    r30 = builtins :: module
    r31 = 'print'
    r32 = CPyObject_GetAttr(r30, r31)
    if is_error(r32) goto L723 (error at run:395) else goto L14
L14:
    r33 = [r29]
    r34 = load_address r33
    r35 = _PyObject_Vectorcall(r32, r34, 1, 0)
    dec_ref r32
    if is_error(r35) goto L723 (error at run:395) else goto L724
L15:
    dec_ref r29
    goto L21
L16:
    r36 = object 1
    inc_ref r36
    self.num_particles = r36
    r38 = 'Generating '
    r39 = self.num_particles
    r40 = PyObject_Str(r39)
    dec_ref r39
    if is_error(r40) goto L720 (error at run:398) else goto L17
L17:
    r41 = ' particle now...'
    r42 = CPyStr_Build(3, r38, r40, r41)
    dec_ref r40
    if is_error(r42) goto L720 (error at run:398) else goto L18
L18:
    r43 = builtins :: module
    r44 = 'print'
    r45 = CPyObject_GetAttr(r43, r44)
    if is_error(r45) goto L725 (error at run:398) else goto L19
L19:
    r46 = [r42]
    r47 = load_address r46
    r48 = _PyObject_Vectorcall(r45, r47, 1, 0)
    dec_ref r45
    if is_error(r48) goto L725 (error at run:398) else goto L726
L20:
    dec_ref r42
L21:
    r49 = 'delta_t'
    r50 = self.seperation_time
    r51 = CPyDict_Get(kwargs, r49, r50)
    dec_ref r50
    if is_error(r51) goto L720 (error at run:399) else goto L22
L22:
    self.seperation_time = r51
    r53 = modTof.globals :: static
    r54 = 'perf_counter'
    r55 = CPyDict_GetItem(r53, r54)
    if is_error(r55) goto L720 (error at run:400) else goto L23
L23:
    r56 = _PyObject_Vectorcall(r55, 0, 0, 0)
    dec_ref r55
    if is_error(r56) goto L720 (error at run:400) else goto L24
L24:
    logstarttime = r56
    r57 = PyList_New(0)
    if is_error(r57) goto L727 (error at run:402) else goto L25
L25:
    times = r57
    r58 = PyList_New(0)
    if is_error(r58) goto L728 (error at run:403) else goto L26
L26:
    points = r58
    r59 = PyList_New(0)
    if is_error(r59) goto L729 (error at run:404) else goto L27
L27:
    photons = r59
    r60 = PyList_New(0)
    if is_error(r60) goto L730 (error at run:405) else goto L28
L28:
    particleID = r60
    r61 = object 0
    inc_ref r61
    i = r61
    dec_ref i
    r62 = modTof.globals :: static
    r63 = 'cpu_count'
    r64 = CPyDict_GetItem(r62, r63)
    if is_error(r64) goto L731 (error at run:407) else goto L29
L29:
    r65 = _PyObject_Vectorcall(r64, 0, 0, 0)
    dec_ref r64
    if is_error(r65) goto L731 (error at run:407) else goto L30
L30:
    r66 = object 1
    r67 = PyNumber_Subtract(r65, r66)
    dec_ref r65
    if is_error(r67) goto L731 (error at run:407) else goto L31
L31:
    r68 = modTof.globals :: static
    r69 = 'Pool'
    r70 = CPyDict_GetItem(r68, r69)
    if is_error(r70) goto L732 (error at run:407) else goto L32
L32:
    r71 = [r67]
    r72 = load_address r71
    r73 = ('processes',)
    r74 = _PyObject_Vectorcall(r70, r72, 0, r73)
    dec_ref r70
    if is_error(r74) goto L732 (error at run:407) else goto L33
L33:
    dec_ref r67
    r75 = PyObject_Type(r74)
    r76 = '__exit__'
    r77 = CPyObject_GetAttr(r75, r76)
    if is_error(r77) goto L733 (error at run:407) else goto L34
L34:
    r78 = '__enter__'
    r79 = CPyObject_GetAttr(r75, r78)
    dec_ref r75
    if is_error(r79) goto L734 (error at run:407) else goto L35
L35:
    r80 = [r74]
    r81 = load_address r80
    r82 = _PyObject_Vectorcall(r79, r81, 1, 0)
    dec_ref r79
    if is_error(r82) goto L734 (error at run:407) else goto L36
L36:
    r83 = 1
L37:
    pool__redef__ = r82
    r84 = 'particle_task'
    r85 = CPyObject_GetAttr(self, r84)
    if is_error(r85) goto L735 (error at run:408) else goto L38
L38:
    r86 = self.num_particles
    r87 = load_address PyRange_Type
    r88 = [r86]
    r89 = load_address r88
    r90 = _PyObject_Vectorcall(r87, r89, 1, 0)
    if is_error(r90) goto L736 (error at run:408) else goto L39
L39:
    dec_ref r86
    r91 = 'map'
    r92 = CPyObject_CallMethodObjArgs(pool__redef__, r91, r85, r90, 0)
    dec_ref pool__redef__
    dec_ref r85
    dec_ref r90
    if is_error(r92) goto L65 (error at run:408) else goto L40
L40:
    res = r92
    r93 = PyObject_GetIter(res)
    dec_ref res
    if is_error(r93) goto L65 (error at run:409) else goto L41
L41:
    r94 = PyIter_Next(r93)
    if is_error(r94) goto L737 else goto L42
L42:
    r95 = PyObject_GetIter(r94)
    dec_ref r94
    if is_error(r95) goto L738 (error at run:409) else goto L43
L43:
    r96 = PyIter_Next(r95)
    if is_error(r96) goto L739 else goto L46
L44:
    r97 = raise ValueError('not enough values to unpack')
    if not r97 goto L65 (error at run:409) else goto L740 :: bool
L45:
    unreachable
L46:
    time_i = r96
    r98 = PyIter_Next(r95)
    if is_error(r98) goto L741 else goto L49
L47:
    r99 = raise ValueError('not enough values to unpack')
    if not r99 goto L65 (error at run:409) else goto L742 :: bool
L48:
    unreachable
L49:
    point_i = r98
    r100 = PyIter_Next(r95)
    if is_error(r100) goto L743 else goto L52
L50:
    r101 = raise ValueError('not enough values to unpack')
    if not r101 goto L65 (error at run:409) else goto L744 :: bool
L51:
    unreachable
L52:
    photon_i = r100
    r102 = PyIter_Next(r95)
    dec_ref r95
    if is_error(r102) goto L55 else goto L745
L53:
    r103 = raise ValueError('too many values to unpack')
    if not r103 goto L65 (error at run:409) else goto L746 :: bool
L54:
    unreachable
L55:
    r104 = object 0
    inc_ref r104
    i = r104
    r105 = 'extend'
    r106 = CPyObject_CallMethodObjArgs(times, r105, time_i, 0)
    if is_error(r106) goto L747 (error at run:411) else goto L748
L56:
    r107 = 'extend'
    r108 = CPyObject_CallMethodObjArgs(points, r107, point_i, 0)
    dec_ref point_i
    if is_error(r108) goto L749 (error at run:412) else goto L750
L57:
    r109 = 'extend'
    r110 = CPyObject_CallMethodObjArgs(photons, r109, photon_i, 0)
    dec_ref photon_i
    if is_error(r110) goto L751 (error at run:413) else goto L752
L58:
    r111 = CPyObject_Size(time_i)
    dec_ref time_i
    if is_error(r111) goto L753 (error at run:414) else goto L59
L59:
    r112 = box(int, r111)
    r113 = numpy :: module
    r114 = 'repeat'
    r115 = CPyObject_GetAttr(r113, r114)
    if is_error(r115) goto L754 (error at run:414) else goto L60
L60:
    r116 = [i, r112]
    r117 = load_address r116
    r118 = _PyObject_Vectorcall(r115, r117, 2, 0)
    dec_ref r115
    if is_error(r118) goto L754 (error at run:414) else goto L61
L61:
    dec_ref r112
    r119 = 'extend'
    r120 = CPyObject_CallMethodObjArgs(particleID, r119, r118, 0)
    dec_ref r118
    if is_error(r120) goto L753 (error at run:414) else goto L755
L62:
    r121 = object 1
    r122 = PyNumber_InPlaceAdd(i, r121)
    dec_ref i
    if is_error(r122) goto L738 (error at run:415) else goto L63
L63:
    i = r122
    dec_ref i
    goto L41
L64:
    r123 = CPy_NoErrOccured()
    if not r123 goto L65 (error at run:409) else goto L73 :: bool
L65:
    r124 = CPy_CatchError()
    r83 = 0
    r125 = CPy_GetExcInfo()
    r126 = r125[0]
    r127 = r125[1]
    r128 = r125[2]
    dec_ref r125
    r129 = [r74, r126, r127, r128]
    r130 = load_address r129
    r131 = _PyObject_Vectorcall(r77, r130, 4, 0)
    if is_error(r131) goto L756 (error at run:407) else goto L66
L66:
    dec_ref r126
    dec_ref r127
    dec_ref r128
    r132 = PyObject_IsTrue(r131)
    dec_ref r131
    r133 = r132 >= 0 :: signed
    if not r133 goto L71 (error at run:407) else goto L67 :: bool
L67:
    r134 = truncate r132: i32 to builtins.bool
    if r134 goto L70 else goto L68 :: bool
L68:
    CPy_Reraise()
    if not 0 goto L71 else goto L757 :: bool
L69:
    unreachable
L70:
    CPy_RestoreExcInfo(r124)
    dec_ref r124
    goto L73
L71:
    CPy_RestoreExcInfo(r124)
    dec_ref r124
    r135 = CPy_KeepPropagating()
    if not r135 goto L74 else goto L758 :: bool
L72:
    unreachable
L73:
    r136 = <error> :: tuple[object, object, object]
    r137 = r136
    goto L75
L74:
    r138 = CPy_CatchError()
    r137 = r138
L75:
    if r83 goto L76 else goto L759 :: bool
L76:
    r139 = load_address _Py_NoneStruct
    r140 = [r74, r139, r139, r139]
    r141 = load_address r140
    r142 = _PyObject_Vectorcall(r77, r141, 4, 0)
    dec_ref r77
    if is_error(r142) goto L760 (error at run:407) else goto L761
L77:
    dec_ref r74
L78:
    if is_error(r137) goto L85 else goto L762
L79:
    CPy_Reraise()
    if not 0 goto L81 else goto L763 :: bool
L80:
    unreachable
L81:
    if is_error(r137) goto L83 else goto L82
L82:
    CPy_RestoreExcInfo(r137)
    xdec_ref r137
L83:
    r143 = CPy_KeepPropagating()
    if not r143 goto L720 else goto L84 :: bool
L84:
    unreachable
L85:
    r144 = modTof.globals :: static
    r145 = 'perf_counter'
    r146 = CPyDict_GetItem(r144, r145)
    if is_error(r146) goto L731 (error at run:416) else goto L86
L86:
    r147 = _PyObject_Vectorcall(r146, 0, 0, 0)
    dec_ref r146
    if is_error(r147) goto L731 (error at run:416) else goto L87
L87:
    logendparticle = r147
    r148 = numpy :: module
    r149 = 'sum'
    r150 = CPyObject_GetAttr(r148, r149)
    if is_error(r150) goto L764 (error at run:417) else goto L88
L88:
    r151 = [photons]
    r152 = load_address r151
    r153 = _PyObject_Vectorcall(r150, r152, 1, 0)
    dec_ref r150
    if is_error(r153) goto L764 (error at run:417) else goto L89
L89:
    N = r153
    r154 = 'Photons generated'
    r155 = builtins :: module
    r156 = 'print'
    r157 = CPyObject_GetAttr(r155, r156)
    if is_error(r157) goto L765 (error at run:418) else goto L90
L90:
    r158 = [r154, N]
    r159 = load_address r158
    r160 = _PyObject_Vectorcall(r157, r159, 2, 0)
    dec_ref r157
    if is_error(r160) goto L765 (error at run:418) else goto L766
L91:
    dec_ref N
    r161 = numpy :: module
    r162 = 'asarray'
    r163 = CPyObject_GetAttr(r161, r162)
    if is_error(r163) goto L764 (error at run:419) else goto L92
L92:
    r164 = [times]
    r165 = load_address r164
    r166 = _PyObject_Vectorcall(r163, r165, 1, 0)
    dec_ref r163
    if is_error(r166) goto L764 (error at run:419) else goto L93
L93:
    dec_ref times
    times = r166
    r167 = numpy :: module
    r168 = 'asarray'
    r169 = CPyObject_GetAttr(r167, r168)
    if is_error(r169) goto L764 (error at run:419) else goto L94
L94:
    r170 = [points]
    r171 = load_address r170
    r172 = _PyObject_Vectorcall(r169, r171, 1, 0)
    dec_ref r169
    if is_error(r172) goto L764 (error at run:419) else goto L95
L95:
    dec_ref points
    points = r172
    r173 = numpy :: module
    r174 = 'asarray'
    r175 = CPyObject_GetAttr(r173, r174)
    if is_error(r175) goto L764 (error at run:419) else goto L96
L96:
    r176 = [photons]
    r177 = load_address r176
    r178 = _PyObject_Vectorcall(r175, r177, 1, 0)
    dec_ref r175
    if is_error(r178) goto L764 (error at run:419) else goto L97
L97:
    dec_ref photons
    photons = r178
    r179 = numpy :: module
    r180 = 'asarray'
    r181 = CPyObject_GetAttr(r179, r180)
    if is_error(r181) goto L764 (error at run:419) else goto L98
L98:
    r182 = [particleID]
    r183 = load_address r182
    r184 = _PyObject_Vectorcall(r181, r183, 1, 0)
    dec_ref r181
    if is_error(r184) goto L764 (error at run:419) else goto L99
L99:
    dec_ref particleID
    particleID = r184
    r185 = PyList_New(0)
    if is_error(r185) goto L764 (error at run:427) else goto L100
L100:
    T1_input_times = r185
    r186 = PyList_New(0)
    if is_error(r186) goto L767 (error at run:428) else goto L101
L101:
    T4_input_times = r186
    r187 = PyList_New(0)
    if is_error(r187) goto L768 (error at run:430) else goto L102
L102:
    self.T1_prop_dist = r187; r188 = is_error
    if not r188 goto L768 (error at run:430) else goto L103 :: bool
L103:
    r189 = PyList_New(0)
    if is_error(r189) goto L768 (error at run:431) else goto L104
L104:
    self.T4_prop_dist = r189; r190 = is_error
    if not r190 goto L768 (error at run:431) else goto L105 :: bool
L105:
    r191 = PyList_New(0)
    if is_error(r191) goto L768 (error at run:432) else goto L106
L106:
    self.T1_endpoint_dist = r191; r192 = is_error
    if not r192 goto L768 (error at run:432) else goto L107 :: bool
L107:
    r193 = PyList_New(0)
    if is_error(r193) goto L768 (error at run:433) else goto L108
L108:
    self.T4_endpoint_dist = r193; r194 = is_error
    if not r194 goto L768 (error at run:433) else goto L109 :: bool
L109:
    r195 = PyList_New(0)
    if is_error(r195) goto L768 (error at run:434) else goto L110
L110:
    self.T1_prop_times = r195; r196 = is_error
    if not r196 goto L768 (error at run:434) else goto L111 :: bool
L111:
    r197 = PyList_New(0)
    if is_error(r197) goto L768 (error at run:435) else goto L112
L112:
    self.T4_prop_times = r197; r198 = is_error
    if not r198 goto L768 (error at run:435) else goto L113 :: bool
L113:
    r199 = PyList_New(0)
    if is_error(r199) goto L768 (error at run:436) else goto L114
L114:
    self.T1_interactions = r199; r200 = is_error
    if not r200 goto L768 (error at run:436) else goto L115 :: bool
L115:
    r201 = PyList_New(0)
    if is_error(r201) goto L768 (error at run:437) else goto L116
L116:
    self.T4_interactions = r201; r202 = is_error
    if not r202 goto L768 (error at run:437) else goto L117 :: bool
L117:
    r203 = PyList_New(0)
    if is_error(r203) goto L768 (error at run:438) else goto L118
L118:
    self.T1_part_ids = r203; r204 = is_error
    if not r204 goto L768 (error at run:438) else goto L119 :: bool
L119:
    r205 = PyList_New(0)
    if is_error(r205) goto L768 (error at run:439) else goto L120
L120:
    self.T4_part_ids = r205; r206 = is_error
    if not r206 goto L768 (error at run:439) else goto L121 :: bool
L121:
    r207 = load_address _Py_NoneStruct
    r208 = load_address _Py_NoneStruct
    r209 = load_address _Py_NoneStruct
    r210 = PySlice_New(r207, r208, r209)
    if is_error(r210) goto L768 (error at run:440) else goto L122
L122:
    r211 = PyObject_GetItem(points, r210)
    dec_ref r210
    if is_error(r211) goto L768 (error at run:440) else goto L123
L123:
    r212 = load_address _Py_NoneStruct
    r213 = load_address _Py_NoneStruct
    r214 = load_address _Py_NoneStruct
    r215 = PySlice_New(r212, r213, r214)
    if is_error(r215) goto L769 (error at run:-1) else goto L124
L124:
    r216 = object 2
    r217 = (r215, r216)
    dec_ref r215
    r218 = box(tuple[object, object], r217)
    r219 = PyObject_GetItem(points, r218)
    dec_ref r218
    if is_error(r219) goto L769 (error at run:440) else goto L125
L125:
    r220 = self.T1z
    r221 = PyObject_RichCompare(r219, r220, 5)
    dec_ref r219
    dec_ref r220
    if is_error(r221) goto L769 (error at run:440) else goto L126
L126:
    r222 = PyObject_GetItem(r211, r221)
    dec_ref r211
    dec_ref r221
    if is_error(r222) goto L768 (error at run:440) else goto L127
L127:
    T1points = r222
    r223 = load_address _Py_NoneStruct
    r224 = load_address _Py_NoneStruct
    r225 = load_address _Py_NoneStruct
    r226 = PySlice_New(r223, r224, r225)
    if is_error(r226) goto L770 (error at run:441) else goto L128
L128:
    r227 = PyObject_GetItem(times, r226)
    dec_ref r226
    if is_error(r227) goto L770 (error at run:441) else goto L129
L129:
    r228 = load_address _Py_NoneStruct
    r229 = load_address _Py_NoneStruct
    r230 = load_address _Py_NoneStruct
    r231 = PySlice_New(r228, r229, r230)
    if is_error(r231) goto L771 (error at run:-1) else goto L130
L130:
    r232 = object 2
    r233 = (r231, r232)
    dec_ref r231
    r234 = box(tuple[object, object], r233)
    r235 = PyObject_GetItem(points, r234)
    dec_ref r234
    if is_error(r235) goto L771 (error at run:441) else goto L131
L131:
    r236 = self.T1z
    r237 = PyObject_RichCompare(r235, r236, 5)
    dec_ref r235
    dec_ref r236
    if is_error(r237) goto L771 (error at run:441) else goto L132
L132:
    r238 = PyObject_GetItem(r227, r237)
    dec_ref r227
    dec_ref r237
    if is_error(r238) goto L770 (error at run:441) else goto L133
L133:
    T1times = r238
    r239 = load_address _Py_NoneStruct
    r240 = load_address _Py_NoneStruct
    r241 = load_address _Py_NoneStruct
    r242 = PySlice_New(r239, r240, r241)
    if is_error(r242) goto L772 (error at run:442) else goto L134
L134:
    r243 = PyObject_GetItem(photons, r242)
    dec_ref r242
    if is_error(r243) goto L772 (error at run:442) else goto L135
L135:
    r244 = load_address _Py_NoneStruct
    r245 = load_address _Py_NoneStruct
    r246 = load_address _Py_NoneStruct
    r247 = PySlice_New(r244, r245, r246)
    if is_error(r247) goto L773 (error at run:-1) else goto L136
L136:
    r248 = object 2
    r249 = (r247, r248)
    dec_ref r247
    r250 = box(tuple[object, object], r249)
    r251 = PyObject_GetItem(points, r250)
    dec_ref r250
    if is_error(r251) goto L773 (error at run:442) else goto L137
L137:
    r252 = self.T1z
    r253 = PyObject_RichCompare(r251, r252, 5)
    dec_ref r251
    dec_ref r252
    if is_error(r253) goto L773 (error at run:442) else goto L138
L138:
    r254 = PyObject_GetItem(r243, r253)
    dec_ref r243
    dec_ref r253
    if is_error(r254) goto L772 (error at run:442) else goto L139
L139:
    T1photons = r254
    r255 = load_address _Py_NoneStruct
    r256 = load_address _Py_NoneStruct
    r257 = load_address _Py_NoneStruct
    r258 = PySlice_New(r255, r256, r257)
    if is_error(r258) goto L774 (error at run:443) else goto L140
L140:
    r259 = PyObject_GetItem(particleID, r258)
    dec_ref r258
    if is_error(r259) goto L774 (error at run:443) else goto L141
L141:
    r260 = load_address _Py_NoneStruct
    r261 = load_address _Py_NoneStruct
    r262 = load_address _Py_NoneStruct
    r263 = PySlice_New(r260, r261, r262)
    if is_error(r263) goto L775 (error at run:-1) else goto L142
L142:
    r264 = object 2
    r265 = (r263, r264)
    dec_ref r263
    r266 = box(tuple[object, object], r265)
    r267 = PyObject_GetItem(points, r266)
    dec_ref r266
    if is_error(r267) goto L775 (error at run:443) else goto L143
L143:
    r268 = self.T1z
    r269 = PyObject_RichCompare(r267, r268, 5)
    dec_ref r267
    dec_ref r268
    if is_error(r269) goto L775 (error at run:443) else goto L144
L144:
    r270 = PyObject_GetItem(r259, r269)
    dec_ref r259
    dec_ref r269
    if is_error(r270) goto L774 (error at run:443) else goto L145
L145:
    T1part_ids = r270
    r271 = load_address PyLong_Type
    r272 = 'astype'
    r273 = CPyObject_CallMethodObjArgs(T1photons, r272, r271, 0)
    if is_error(r273) goto L776 (error at run:444) else goto L146
L146:
    r274 = numpy :: module
    r275 = 'repeat'
    r276 = CPyObject_GetAttr(r274, r275)
    if is_error(r276) goto L777 (error at run:444) else goto L147
L147:
    r277 = object 0
    r278 = [T1part_ids, r273, r277]
    r279 = load_address r278
    r280 = ('axis',)
    r281 = _PyObject_Vectorcall(r276, r279, 2, r280)
    dec_ref r276
    if is_error(r281) goto L777 (error at run:444) else goto L148
L148:
    dec_ref T1part_ids
    dec_ref r273
    T1part_ids = r281
    r282 = load_address _Py_NoneStruct
    r283 = load_address _Py_NoneStruct
    r284 = load_address _Py_NoneStruct
    r285 = PySlice_New(r282, r283, r284)
    if is_error(r285) goto L776 (error at run:445) else goto L149
L149:
    r286 = PyObject_GetItem(points, r285)
    dec_ref r285
    if is_error(r286) goto L776 (error at run:445) else goto L150
L150:
    r287 = load_address _Py_NoneStruct
    r288 = load_address _Py_NoneStruct
    r289 = load_address _Py_NoneStruct
    r290 = PySlice_New(r287, r288, r289)
    if is_error(r290) goto L778 (error at run:-1) else goto L151
L151:
    r291 = object 2
    r292 = (r290, r291)
    dec_ref r290
    r293 = box(tuple[object, object], r292)
    r294 = PyObject_GetItem(points, r293)
    dec_ref r293
    if is_error(r294) goto L778 (error at run:445) else goto L152
L152:
    r295 = self.T1z
    r296 = PyObject_RichCompare(r294, r295, 0)
    dec_ref r294
    dec_ref r295
    if is_error(r296) goto L778 (error at run:445) else goto L153
L153:
    r297 = PyObject_GetItem(r286, r296)
    dec_ref r286
    dec_ref r296
    if is_error(r297) goto L776 (error at run:445) else goto L154
L154:
    T4points = r297
    r298 = load_address _Py_NoneStruct
    r299 = load_address _Py_NoneStruct
    r300 = load_address _Py_NoneStruct
    r301 = PySlice_New(r298, r299, r300)
    if is_error(r301) goto L779 (error at run:446) else goto L155
L155:
    r302 = PyObject_GetItem(times, r301)
    dec_ref times
    dec_ref r301
    if is_error(r302) goto L780 (error at run:446) else goto L156
L156:
    r303 = load_address _Py_NoneStruct
    r304 = load_address _Py_NoneStruct
    r305 = load_address _Py_NoneStruct
    r306 = PySlice_New(r303, r304, r305)
    if is_error(r306) goto L781 (error at run:-1) else goto L157
L157:
    r307 = object 2
    r308 = (r306, r307)
    dec_ref r306
    r309 = box(tuple[object, object], r308)
    r310 = PyObject_GetItem(points, r309)
    dec_ref r309
    if is_error(r310) goto L781 (error at run:446) else goto L158
L158:
    r311 = self.T1z
    r312 = PyObject_RichCompare(r310, r311, 0)
    dec_ref r310
    dec_ref r311
    if is_error(r312) goto L781 (error at run:446) else goto L159
L159:
    r313 = PyObject_GetItem(r302, r312)
    dec_ref r302
    dec_ref r312
    if is_error(r313) goto L780 (error at run:446) else goto L160
L160:
    T4times = r313
    r314 = load_address _Py_NoneStruct
    r315 = load_address _Py_NoneStruct
    r316 = load_address _Py_NoneStruct
    r317 = PySlice_New(r314, r315, r316)
    if is_error(r317) goto L782 (error at run:447) else goto L161
L161:
    r318 = PyObject_GetItem(photons, r317)
    dec_ref photons
    dec_ref r317
    if is_error(r318) goto L783 (error at run:447) else goto L162
L162:
    r319 = load_address _Py_NoneStruct
    r320 = load_address _Py_NoneStruct
    r321 = load_address _Py_NoneStruct
    r322 = PySlice_New(r319, r320, r321)
    if is_error(r322) goto L784 (error at run:-1) else goto L163
L163:
    r323 = object 2
    r324 = (r322, r323)
    dec_ref r322
    r325 = box(tuple[object, object], r324)
    r326 = PyObject_GetItem(points, r325)
    dec_ref r325
    if is_error(r326) goto L784 (error at run:447) else goto L164
L164:
    r327 = self.T1z
    r328 = PyObject_RichCompare(r326, r327, 0)
    dec_ref r326
    dec_ref r327
    if is_error(r328) goto L784 (error at run:447) else goto L165
L165:
    r329 = PyObject_GetItem(r318, r328)
    dec_ref r318
    dec_ref r328
    if is_error(r329) goto L783 (error at run:447) else goto L166
L166:
    T4photons = r329
    r330 = load_address _Py_NoneStruct
    r331 = load_address _Py_NoneStruct
    r332 = load_address _Py_NoneStruct
    r333 = PySlice_New(r330, r331, r332)
    if is_error(r333) goto L785 (error at run:448) else goto L167
L167:
    r334 = PyObject_GetItem(particleID, r333)
    dec_ref particleID
    dec_ref r333
    if is_error(r334) goto L786 (error at run:448) else goto L168
L168:
    r335 = load_address _Py_NoneStruct
    r336 = load_address _Py_NoneStruct
    r337 = load_address _Py_NoneStruct
    r338 = PySlice_New(r335, r336, r337)
    if is_error(r338) goto L787 (error at run:-1) else goto L169
L169:
    r339 = object 2
    r340 = (r338, r339)
    dec_ref r338
    r341 = box(tuple[object, object], r340)
    r342 = PyObject_GetItem(points, r341)
    dec_ref points
    dec_ref r341
    if is_error(r342) goto L788 (error at run:448) else goto L170
L170:
    r343 = self.T1z
    r344 = PyObject_RichCompare(r342, r343, 0)
    dec_ref r342
    dec_ref r343
    if is_error(r344) goto L788 (error at run:448) else goto L171
L171:
    r345 = PyObject_GetItem(r334, r344)
    dec_ref r334
    dec_ref r344
    if is_error(r345) goto L789 (error at run:448) else goto L172
L172:
    T4part_ids = r345
    r346 = load_address PyLong_Type
    r347 = 'astype'
    r348 = CPyObject_CallMethodObjArgs(T4photons, r347, r346, 0)
    if is_error(r348) goto L790 (error at run:449) else goto L173
L173:
    r349 = numpy :: module
    r350 = 'repeat'
    r351 = CPyObject_GetAttr(r349, r350)
    if is_error(r351) goto L791 (error at run:449) else goto L174
L174:
    r352 = object 0
    r353 = [T4part_ids, r348, r352]
    r354 = load_address r353
    r355 = ('axis',)
    r356 = _PyObject_Vectorcall(r351, r354, 2, r355)
    dec_ref r351
    if is_error(r356) goto L791 (error at run:449) else goto L175
L175:
    dec_ref T4part_ids
    dec_ref r348
    T4part_ids = r356
    r357 = 'Photons in T1: '
    r358 = numpy :: module
    r359 = 'sum'
    r360 = CPyObject_GetAttr(r358, r359)
    if is_error(r360) goto L790 (error at run:450) else goto L176
L176:
    r361 = [T1photons]
    r362 = load_address r361
    r363 = _PyObject_Vectorcall(r360, r362, 1, 0)
    dec_ref r360
    if is_error(r363) goto L790 (error at run:450) else goto L177
L177:
    r364 = PyObject_Str(r363)
    dec_ref r363
    if is_error(r364) goto L790 (error at run:450) else goto L178
L178:
    r365 = ' and Photons in T4: '
    r366 = numpy :: module
    r367 = 'sum'
    r368 = CPyObject_GetAttr(r366, r367)
    if is_error(r368) goto L792 (error at run:450) else goto L179
L179:
    r369 = [T4photons]
    r370 = load_address r369
    r371 = _PyObject_Vectorcall(r368, r370, 1, 0)
    dec_ref r368
    if is_error(r371) goto L792 (error at run:450) else goto L180
L180:
    r372 = PyObject_Str(r371)
    dec_ref r371
    if is_error(r372) goto L792 (error at run:450) else goto L181
L181:
    r373 = CPyStr_Build(4, r357, r364, r365, r372)
    dec_ref r364
    dec_ref r372
    if is_error(r373) goto L790 (error at run:450) else goto L182
L182:
    r374 = builtins :: module
    r375 = 'print'
    r376 = CPyObject_GetAttr(r374, r375)
    if is_error(r376) goto L793 (error at run:450) else goto L183
L183:
    r377 = [r373]
    r378 = load_address r377
    r379 = _PyObject_Vectorcall(r376, r378, 1, 0)
    dec_ref r376
    if is_error(r379) goto L793 (error at run:450) else goto L794
L184:
    dec_ref r373
    r380 = <error> :: object
    times = r380
    xdec_ref times
    r381 = <error> :: object
    points = r381
    xdec_ref points
    r382 = <error> :: object
    photons = r382
    xdec_ref photons
    r383 = gc :: module
    r384 = 'collect'
    r385 = CPyObject_GetAttr(r383, r384)
    if is_error(r385) goto L790 (error at run:452) else goto L185
L185:
    r386 = _PyObject_Vectorcall(r385, 0, 0, 0)
    dec_ref r385
    if is_error(r386) goto L790 (error at run:452) else goto L795
L186:
    r387 = modTof.globals :: static
    r388 = 'perf_counter'
    r389 = CPyDict_GetItem(r387, r388)
    if is_error(r389) goto L790 (error at run:453) else goto L187
L187:
    r390 = _PyObject_Vectorcall(r389, 0, 0, 0)
    dec_ref r389
    if is_error(r390) goto L790 (error at run:453) else goto L188
L188:
    logstartphoton = r390
    r391 = modTof.globals :: static
    r392 = 'cpu_count'
    r393 = CPyDict_GetItem(r391, r392)
    if is_error(r393) goto L796 (error at run:456) else goto L189
L189:
    r394 = _PyObject_Vectorcall(r393, 0, 0, 0)
    dec_ref r393
    if is_error(r394) goto L796 (error at run:456) else goto L190
L190:
    r395 = modTof.globals :: static
    r396 = 'Pool'
    r397 = CPyDict_GetItem(r395, r396)
    if is_error(r397) goto L797 (error at run:456) else goto L191
L191:
    r398 = [r394]
    r399 = load_address r398
    r400 = ('processes',)
    r401 = _PyObject_Vectorcall(r397, r399, 0, r400)
    dec_ref r397
    if is_error(r401) goto L797 (error at run:456) else goto L192
L192:
    dec_ref r394
    r402 = PyObject_Type(r401)
    r403 = '__exit__'
    r404 = CPyObject_GetAttr(r402, r403)
    if is_error(r404) goto L798 (error at run:456) else goto L193
L193:
    r405 = '__enter__'
    r406 = CPyObject_GetAttr(r402, r405)
    dec_ref r402
    if is_error(r406) goto L799 (error at run:456) else goto L194
L194:
    r407 = [r401]
    r408 = load_address r407
    r409 = _PyObject_Vectorcall(r406, r408, 1, 0)
    dec_ref r406
    if is_error(r409) goto L799 (error at run:456) else goto L195
L195:
    r410 = 1
L196:
    pool = r409
    r411 = 'T1 Photon Propagation working...'
    r412 = builtins :: module
    r413 = 'print'
    r414 = CPyObject_GetAttr(r412, r413)
    if is_error(r414) goto L800 (error at run:457) else goto L197
L197:
    r415 = [r411]
    r416 = load_address r415
    r417 = _PyObject_Vectorcall(r414, r416, 1, 0)
    dec_ref r414
    if is_error(r417) goto L800 (error at run:457) else goto L801
L198:
    r418 = 'scint_taskT1'
    r419 = CPyObject_GetAttr(self, r418)
    if is_error(r419) goto L800 (error at run:458) else goto L199
L199:
    r420 = numpy :: module
    r421 = 'c_'
    r422 = CPyObject_GetAttr(r420, r421)
    if is_error(r422) goto L802 (error at run:458) else goto L200
L200:
    r423 = (T1points, T1times)
    dec_ref T1points
    dec_ref T1times
    r424 = box(tuple[object, object], r423)
    r425 = PyObject_GetItem(r422, r424)
    dec_ref r422
    dec_ref r424
    if is_error(r425) goto L803 (error at run:458) else goto L201
L201:
    r426 = load_address PyLong_Type
    r427 = 'astype'
    r428 = CPyObject_CallMethodObjArgs(T1photons, r427, r426, 0)
    if is_error(r428) goto L804 (error at run:458) else goto L202
L202:
    r429 = numpy :: module
    r430 = 'repeat'
    r431 = CPyObject_GetAttr(r429, r430)
    if is_error(r431) goto L805 (error at run:458) else goto L203
L203:
    r432 = object 0
    r433 = [r425, r428, r432]
    r434 = load_address r433
    r435 = ('axis',)
    r436 = _PyObject_Vectorcall(r431, r434, 2, r435)
    dec_ref r431
    if is_error(r436) goto L805 (error at run:458) else goto L204
L204:
    dec_ref r425
    dec_ref r428
    r437 = 'starmap'
    r438 = CPyObject_CallMethodObjArgs(pool, r437, r419, r436, 0)
    dec_ref r419
    dec_ref r436
    if is_error(r438) goto L806 (error at run:458) else goto L205
L205:
    T1res = r438
    r439 = 'Done!'
    r440 = builtins :: module
    r441 = 'print'
    r442 = CPyObject_GetAttr(r440, r441)
    if is_error(r442) goto L807 (error at run:459) else goto L206
L206:
    r443 = [r439]
    r444 = load_address r443
    r445 = _PyObject_Vectorcall(r442, r444, 1, 0)
    dec_ref r442
    if is_error(r445) goto L807 (error at run:459) else goto L808
L207:
    r446 = 'T4 Photon Propagation working...'
    r447 = builtins :: module
    r448 = 'print'
    r449 = CPyObject_GetAttr(r447, r448)
    if is_error(r449) goto L807 (error at run:460) else goto L208
L208:
    r450 = [r446]
    r451 = load_address r450
    r452 = _PyObject_Vectorcall(r449, r451, 1, 0)
    dec_ref r449
    if is_error(r452) goto L807 (error at run:460) else goto L809
L209:
    r453 = 'scint_taskT4'
    r454 = CPyObject_GetAttr(self, r453)
    if is_error(r454) goto L807 (error at run:461) else goto L210
L210:
    r455 = numpy :: module
    r456 = 'c_'
    r457 = CPyObject_GetAttr(r455, r456)
    if is_error(r457) goto L810 (error at run:461) else goto L211
L211:
    r458 = (T4points, T4times)
    dec_ref T4points
    dec_ref T4times
    r459 = box(tuple[object, object], r458)
    r460 = PyObject_GetItem(r457, r459)
    dec_ref r457
    dec_ref r459
    if is_error(r460) goto L811 (error at run:461) else goto L212
L212:
    r461 = load_address PyLong_Type
    r462 = 'astype'
    r463 = CPyObject_CallMethodObjArgs(T4photons, r462, r461, 0)
    if is_error(r463) goto L812 (error at run:461) else goto L213
L213:
    r464 = numpy :: module
    r465 = 'repeat'
    r466 = CPyObject_GetAttr(r464, r465)
    if is_error(r466) goto L813 (error at run:461) else goto L214
L214:
    r467 = object 0
    r468 = [r460, r463, r467]
    r469 = load_address r468
    r470 = ('axis',)
    r471 = _PyObject_Vectorcall(r466, r469, 2, r470)
    dec_ref r466
    if is_error(r471) goto L813 (error at run:461) else goto L215
L215:
    dec_ref r460
    dec_ref r463
    r472 = 'starmap'
    r473 = CPyObject_CallMethodObjArgs(pool, r472, r454, r471, 0)
    dec_ref pool
    dec_ref r454
    dec_ref r471
    if is_error(r473) goto L814 (error at run:461) else goto L216
L216:
    T4res = r473
    r474 = 'Done!'
    r475 = builtins :: module
    r476 = 'print'
    r477 = CPyObject_GetAttr(r475, r476)
    if is_error(r477) goto L815 (error at run:462) else goto L217
L217:
    r478 = [r474]
    r479 = load_address r478
    r480 = _PyObject_Vectorcall(r477, r479, 1, 0)
    dec_ref r477
    if is_error(r480) goto L815 (error at run:462) else goto L816
L218:
    r481 = 'Unzipping reuslts into arrays...'
    r482 = builtins :: module
    r483 = 'print'
    r484 = CPyObject_GetAttr(r482, r483)
    if is_error(r484) goto L815 (error at run:463) else goto L219
L219:
    r485 = [r481]
    r486 = load_address r485
    r487 = _PyObject_Vectorcall(r484, r486, 1, 0)
    dec_ref r484
    if is_error(r487) goto L815 (error at run:463) else goto L817
L220:
    r488 = PyObject_GetIter(T1res)
    dec_ref T1res
    if is_error(r488) goto L818 (error at run:464) else goto L221
L221:
    r489 = PyObject_GetIter(T1part_ids)
    dec_ref T1part_ids
    if is_error(r489) goto L819 (error at run:464) else goto L222
L222:
    r490 = PyIter_Next(r488)
    if is_error(r490) goto L820 else goto L223
L223:
    r491 = PyIter_Next(r489)
    if is_error(r491) goto L821 else goto L224
L224:
    r492 = PyObject_GetIter(r490)
    dec_ref r490
    if is_error(r492) goto L822 (error at run:464) else goto L225
L225:
    r493 = PyIter_Next(r492)
    if is_error(r493) goto L823 else goto L228
L226:
    r494 = raise ValueError('not enough values to unpack')
    if not r494 goto L302 (error at run:464) else goto L824 :: bool
L227:
    unreachable
L228:
    T1hit_PMT = r493
    r495 = PyIter_Next(r492)
    if is_error(r495) goto L825 else goto L231
L229:
    r496 = raise ValueError('not enough values to unpack')
    if not r496 goto L302 (error at run:464) else goto L826 :: bool
L230:
    unreachable
L231:
    T1travel_time = r495
    r497 = PyIter_Next(r492)
    if is_error(r497) goto L827 else goto L234
L232:
    r498 = raise ValueError('not enough values to unpack')
    if not r498 goto L302 (error at run:464) else goto L828 :: bool
L233:
    unreachable
L234:
    T1tot_dist = r497
    r499 = PyIter_Next(r492)
    if is_error(r499) goto L829 else goto L237
L235:
    r500 = raise ValueError('not enough values to unpack')
    if not r500 goto L302 (error at run:464) else goto L830 :: bool
L236:
    unreachable
L237:
    T1endpt = r499
    r501 = PyIter_Next(r492)
    if is_error(r501) goto L831 else goto L240
L238:
    r502 = raise ValueError('not enough values to unpack')
    if not r502 goto L302 (error at run:464) else goto L832 :: bool
L239:
    unreachable
L240:
    T1bounces = r501
    r503 = PyIter_Next(r492)
    if is_error(r503) goto L833 else goto L243
L241:
    r504 = raise ValueError('not enough values to unpack')
    if not r504 goto L302 (error at run:464) else goto L834 :: bool
L242:
    unreachable
L243:
    T1prop = r503
    r505 = PyIter_Next(r492)
    dec_ref r492
    if is_error(r505) goto L246 else goto L835
L244:
    r506 = raise ValueError('too many values to unpack')
    if not r506 goto L302 (error at run:464) else goto L836 :: bool
L245:
    unreachable
L246:
    T1part_id = r491
    r507 = PyObject_IsTrue(T1hit_PMT)
    dec_ref T1hit_PMT
    r508 = r507 >= 0 :: signed
    if not r508 goto L837 (error at run:464) else goto L247 :: bool
L247:
    r509 = truncate r507: i32 to builtins.bool
    if r509 goto L248 else goto L838 :: bool
L248:
    r510 = 'append'
    r511 = CPyObject_CallMethodObjArgs(T1_input_times, r510, T1travel_time, 0)
    dec_ref T1travel_time
    if is_error(r511) goto L839 (error at run:466) else goto L840
L249:
    r512 = self.T1_prop_dist
    if is_error(r512) goto L839 (error at run:467) else goto L250
L250:
    r513 = 'append'
    r514 = CPyObject_CallMethodObjArgs(r512, r513, T1tot_dist, 0)
    dec_ref r512
    dec_ref T1tot_dist
    if is_error(r514) goto L841 (error at run:467) else goto L842
L251:
    r515 = self.T1_endpoint_dist
    if is_error(r515) goto L841 (error at run:468) else goto L252
L252:
    r516 = 'append'
    r517 = CPyObject_CallMethodObjArgs(r515, r516, T1endpt, 0)
    dec_ref r515
    dec_ref T1endpt
    if is_error(r517) goto L843 (error at run:468) else goto L844
L253:
    r518 = self.T1_prop_times
    if is_error(r518) goto L843 (error at run:469) else goto L254
L254:
    r519 = 'append'
    r520 = CPyObject_CallMethodObjArgs(r518, r519, T1prop, 0)
    dec_ref r518
    dec_ref T1prop
    if is_error(r520) goto L845 (error at run:469) else goto L846
L255:
    r521 = self.T1_interactions
    if is_error(r521) goto L845 (error at run:470) else goto L256
L256:
    r522 = 'append'
    r523 = CPyObject_CallMethodObjArgs(r521, r522, T1bounces, 0)
    dec_ref r521
    dec_ref T1bounces
    if is_error(r523) goto L847 (error at run:470) else goto L848
L257:
    r524 = self.T1_part_ids
    if is_error(r524) goto L847 (error at run:471) else goto L258
L258:
    r525 = 'append'
    r526 = CPyObject_CallMethodObjArgs(r524, r525, T1part_id, 0)
    dec_ref r524
    dec_ref T1part_id
    if is_error(r526) goto L849 (error at run:471) else goto L850
L259:
    r527 = CPy_NoErrOccured()
    if not r527 goto L851 (error at run:464) else goto L260 :: bool
L260:
    r528 = CPy_NoErrOccured()
    if not r528 goto L851 (error at run:464) else goto L261 :: bool
L261:
    r529 = PyObject_GetIter(T4res)
    dec_ref T4res
    if is_error(r529) goto L852 (error at run:472) else goto L262
L262:
    r530 = PyObject_GetIter(T4part_ids)
    dec_ref T4part_ids
    if is_error(r530) goto L853 (error at run:472) else goto L263
L263:
    r531 = PyIter_Next(r529)
    if is_error(r531) goto L854 else goto L264
L264:
    r532 = PyIter_Next(r530)
    if is_error(r532) goto L855 else goto L265
L265:
    r533 = PyObject_GetIter(r531)
    dec_ref r531
    if is_error(r533) goto L856 (error at run:472) else goto L266
L266:
    r534 = PyIter_Next(r533)
    if is_error(r534) goto L857 else goto L269
L267:
    r535 = raise ValueError('not enough values to unpack')
    if not r535 goto L302 (error at run:472) else goto L858 :: bool
L268:
    unreachable
L269:
    T4hit_PMT = r534
    r536 = PyIter_Next(r533)
    if is_error(r536) goto L859 else goto L272
L270:
    r537 = raise ValueError('not enough values to unpack')
    if not r537 goto L302 (error at run:472) else goto L860 :: bool
L271:
    unreachable
L272:
    T4travel_time = r536
    r538 = PyIter_Next(r533)
    if is_error(r538) goto L861 else goto L275
L273:
    r539 = raise ValueError('not enough values to unpack')
    if not r539 goto L302 (error at run:472) else goto L862 :: bool
L274:
    unreachable
L275:
    T4tot_dist = r538
    r540 = PyIter_Next(r533)
    if is_error(r540) goto L863 else goto L278
L276:
    r541 = raise ValueError('not enough values to unpack')
    if not r541 goto L302 (error at run:472) else goto L864 :: bool
L277:
    unreachable
L278:
    T4endpt = r540
    r542 = PyIter_Next(r533)
    if is_error(r542) goto L865 else goto L281
L279:
    r543 = raise ValueError('not enough values to unpack')
    if not r543 goto L302 (error at run:472) else goto L866 :: bool
L280:
    unreachable
L281:
    T4bounces = r542
    r544 = PyIter_Next(r533)
    if is_error(r544) goto L867 else goto L284
L282:
    r545 = raise ValueError('not enough values to unpack')
    if not r545 goto L302 (error at run:472) else goto L868 :: bool
L283:
    unreachable
L284:
    T4prop = r544
    r546 = PyIter_Next(r533)
    dec_ref r533
    if is_error(r546) goto L287 else goto L869
L285:
    r547 = raise ValueError('too many values to unpack')
    if not r547 goto L302 (error at run:472) else goto L870 :: bool
L286:
    unreachable
L287:
    T4part_id = r532
    r548 = PyObject_IsTrue(T4hit_PMT)
    dec_ref T4hit_PMT
    r549 = r548 >= 0 :: signed
    if not r549 goto L871 (error at run:472) else goto L288 :: bool
L288:
    r550 = truncate r548: i32 to builtins.bool
    if r550 goto L289 else goto L872 :: bool
L289:
    r551 = 'append'
    r552 = CPyObject_CallMethodObjArgs(T4_input_times, r551, T4travel_time, 0)
    dec_ref T4travel_time
    if is_error(r552) goto L873 (error at run:474) else goto L874
L290:
    r553 = self.T4_prop_dist
    if is_error(r553) goto L873 (error at run:475) else goto L291
L291:
    r554 = 'append'
    r555 = CPyObject_CallMethodObjArgs(r553, r554, T4tot_dist, 0)
    dec_ref r553
    dec_ref T4tot_dist
    if is_error(r555) goto L875 (error at run:475) else goto L876
L292:
    r556 = self.T4_endpoint_dist
    if is_error(r556) goto L875 (error at run:476) else goto L293
L293:
    r557 = 'append'
    r558 = CPyObject_CallMethodObjArgs(r556, r557, T4endpt, 0)
    dec_ref r556
    dec_ref T4endpt
    if is_error(r558) goto L877 (error at run:476) else goto L878
L294:
    r559 = self.T4_prop_times
    if is_error(r559) goto L877 (error at run:477) else goto L295
L295:
    r560 = 'append'
    r561 = CPyObject_CallMethodObjArgs(r559, r560, T4prop, 0)
    dec_ref r559
    dec_ref T4prop
    if is_error(r561) goto L879 (error at run:477) else goto L880
L296:
    r562 = self.T4_interactions
    if is_error(r562) goto L879 (error at run:478) else goto L297
L297:
    r563 = 'append'
    r564 = CPyObject_CallMethodObjArgs(r562, r563, T4bounces, 0)
    dec_ref r562
    dec_ref T4bounces
    if is_error(r564) goto L881 (error at run:478) else goto L882
L298:
    r565 = self.T4_part_ids
    if is_error(r565) goto L881 (error at run:479) else goto L299
L299:
    r566 = 'append'
    r567 = CPyObject_CallMethodObjArgs(r565, r566, T4part_id, 0)
    dec_ref r565
    dec_ref T4part_id
    if is_error(r567) goto L883 (error at run:479) else goto L884
L300:
    r568 = CPy_NoErrOccured()
    if not r568 goto L302 (error at run:472) else goto L301 :: bool
L301:
    r569 = CPy_NoErrOccured()
    if not r569 goto L302 (error at run:472) else goto L310 :: bool
L302:
    r570 = CPy_CatchError()
    r410 = 0
    r571 = CPy_GetExcInfo()
    r572 = r571[0]
    r573 = r571[1]
    r574 = r571[2]
    dec_ref r571
    r575 = [r401, r572, r573, r574]
    r576 = load_address r575
    r577 = _PyObject_Vectorcall(r404, r576, 4, 0)
    if is_error(r577) goto L885 (error at run:456) else goto L303
L303:
    dec_ref r572
    dec_ref r573
    dec_ref r574
    r578 = PyObject_IsTrue(r577)
    dec_ref r577
    r579 = r578 >= 0 :: signed
    if not r579 goto L308 (error at run:456) else goto L304 :: bool
L304:
    r580 = truncate r578: i32 to builtins.bool
    if r580 goto L307 else goto L305 :: bool
L305:
    CPy_Reraise()
    if not 0 goto L308 else goto L886 :: bool
L306:
    unreachable
L307:
    CPy_RestoreExcInfo(r570)
    dec_ref r570
    goto L310
L308:
    CPy_RestoreExcInfo(r570)
    dec_ref r570
    r581 = CPy_KeepPropagating()
    if not r581 goto L311 else goto L887 :: bool
L309:
    unreachable
L310:
    r582 = <error> :: tuple[object, object, object]
    r583 = r582
    goto L312
L311:
    r584 = CPy_CatchError()
    r583 = r584
L312:
    if r410 goto L313 else goto L888 :: bool
L313:
    r585 = load_address _Py_NoneStruct
    r586 = [r401, r585, r585, r585]
    r587 = load_address r586
    r588 = _PyObject_Vectorcall(r404, r587, 4, 0)
    dec_ref r404
    if is_error(r588) goto L889 (error at run:456) else goto L890
L314:
    dec_ref r401
L315:
    if is_error(r583) goto L322 else goto L891
L316:
    CPy_Reraise()
    if not 0 goto L318 else goto L892 :: bool
L317:
    unreachable
L318:
    if is_error(r583) goto L320 else goto L319
L319:
    CPy_RestoreExcInfo(r583)
    xdec_ref r583
L320:
    r589 = CPy_KeepPropagating()
    if not r589 goto L720 else goto L321 :: bool
L321:
    unreachable
L322:
    r590 = modTof.globals :: static
    r591 = 'perf_counter'
    r592 = CPyDict_GetItem(r590, r591)
    if is_error(r592) goto L893 (error at run:480) else goto L323
L323:
    r593 = _PyObject_Vectorcall(r592, 0, 0, 0)
    dec_ref r592
    if is_error(r593) goto L893 (error at run:480) else goto L324
L324:
    logendtime = r593
    r594 = 'TIME ANALYSIS:'
    r595 = builtins :: module
    r596 = 'print'
    r597 = CPyObject_GetAttr(r595, r596)
    if is_error(r597) goto L894 (error at run:482) else goto L325
L325:
    r598 = [r594]
    r599 = load_address r598
    r600 = _PyObject_Vectorcall(r597, r599, 1, 0)
    dec_ref r597
    if is_error(r600) goto L894 (error at run:482) else goto L895
L326:
    r601 = PyNumber_Subtract(logendparticle, logstarttime)
    dec_ref logendparticle
    if is_error(r601) goto L896 (error at run:483) else goto L327
L327:
    r602 = modTof.globals :: static
    r603 = 'timedelta'
    r604 = CPyDict_GetItem(r602, r603)
    if is_error(r604) goto L897 (error at run:483) else goto L328
L328:
    r605 = [r601]
    r606 = load_address r605
    r607 = ('seconds',)
    r608 = _PyObject_Vectorcall(r604, r606, 0, r607)
    dec_ref r604
    if is_error(r608) goto L897 (error at run:483) else goto L329
L329:
    dec_ref r601
    pgtime = r608
    r609 = PyNumber_Subtract(logendtime, logstartphoton)
    dec_ref logstartphoton
    if is_error(r609) goto L898 (error at run:484) else goto L330
L330:
    r610 = modTof.globals :: static
    r611 = 'timedelta'
    r612 = CPyDict_GetItem(r610, r611)
    if is_error(r612) goto L899 (error at run:484) else goto L331
L331:
    r613 = [r609]
    r614 = load_address r613
    r615 = ('seconds',)
    r616 = _PyObject_Vectorcall(r612, r614, 0, r615)
    dec_ref r612
    if is_error(r616) goto L899 (error at run:484) else goto L332
L332:
    dec_ref r609
    phtime = r616
    r617 = PyNumber_Subtract(logendtime, logstarttime)
    dec_ref logendtime
    dec_ref logstarttime
    if is_error(r617) goto L900 (error at run:485) else goto L333
L333:
    r618 = modTof.globals :: static
    r619 = 'timedelta'
    r620 = CPyDict_GetItem(r618, r619)
    if is_error(r620) goto L901 (error at run:485) else goto L334
L334:
    r621 = [r617]
    r622 = load_address r621
    r623 = ('seconds',)
    r624 = _PyObject_Vectorcall(r620, r622, 0, r623)
    dec_ref r620
    if is_error(r624) goto L901 (error at run:485) else goto L335
L335:
    dec_ref r617
    ttime = r624
    r625 = 'Generation of Particles     '
    r626 = PyObject_Str(pgtime)
    dec_ref pgtime
    if is_error(r626) goto L902 (error at run:486) else goto L336
L336:
    r627 = PyObject_Str(r626)
    dec_ref r626
    if is_error(r627) goto L902 (error at run:486) else goto L337
L337:
    r628 = CPyStr_Build(2, r625, r627)
    dec_ref r627
    if is_error(r628) goto L902 (error at run:486) else goto L338
L338:
    r629 = builtins :: module
    r630 = 'print'
    r631 = CPyObject_GetAttr(r629, r630)
    if is_error(r631) goto L903 (error at run:486) else goto L339
L339:
    r632 = [r628]
    r633 = load_address r632
    r634 = _PyObject_Vectorcall(r631, r633, 1, 0)
    dec_ref r631
    if is_error(r634) goto L903 (error at run:486) else goto L904
L340:
    dec_ref r628
    r635 = 'Simulation of Photon Travel '
    r636 = PyObject_Str(phtime)
    dec_ref phtime
    if is_error(r636) goto L905 (error at run:487) else goto L341
L341:
    r637 = PyObject_Str(r636)
    dec_ref r636
    if is_error(r637) goto L905 (error at run:487) else goto L342
L342:
    r638 = CPyStr_Build(2, r635, r637)
    dec_ref r637
    if is_error(r638) goto L905 (error at run:487) else goto L343
L343:
    r639 = builtins :: module
    r640 = 'print'
    r641 = CPyObject_GetAttr(r639, r640)
    if is_error(r641) goto L906 (error at run:487) else goto L344
L344:
    r642 = [r638]
    r643 = load_address r642
    r644 = _PyObject_Vectorcall(r641, r643, 1, 0)
    dec_ref r641
    if is_error(r644) goto L906 (error at run:487) else goto L907
L345:
    dec_ref r638
    r645 = 'Total Time Elapsed:         '
    r646 = PyObject_Str(ttime)
    dec_ref ttime
    if is_error(r646) goto L908 (error at run:488) else goto L346
L346:
    r647 = PyObject_Str(r646)
    dec_ref r646
    if is_error(r647) goto L908 (error at run:488) else goto L347
L347:
    r648 = CPyStr_Build(2, r645, r647)
    dec_ref r647
    if is_error(r648) goto L908 (error at run:488) else goto L348
L348:
    r649 = builtins :: module
    r650 = 'print'
    r651 = CPyObject_GetAttr(r649, r650)
    if is_error(r651) goto L909 (error at run:488) else goto L349
L349:
    r652 = [r648]
    r653 = load_address r652
    r654 = _PyObject_Vectorcall(r651, r653, 1, 0)
    dec_ref r651
    if is_error(r654) goto L909 (error at run:488) else goto L910
L350:
    dec_ref r648
    r655 = 'RESULTS SUMMARY:'
    r656 = builtins :: module
    r657 = 'print'
    r658 = CPyObject_GetAttr(r656, r657)
    if is_error(r658) goto L908 (error at run:489) else goto L351
L351:
    r659 = [r655]
    r660 = load_address r659
    r661 = _PyObject_Vectorcall(r658, r660, 1, 0)
    dec_ref r658
    if is_error(r661) goto L908 (error at run:489) else goto L911
L352:
    r662 = 'HITS on T1'
    r663 = CPyObject_Size(T1_input_times)
    if is_error(r663) goto L908 (error at run:490) else goto L353
L353:
    r664 = box(int, r663)
    r665 = builtins :: module
    r666 = 'print'
    r667 = CPyObject_GetAttr(r665, r666)
    if is_error(r667) goto L912 (error at run:490) else goto L354
L354:
    r668 = [r662, r664]
    r669 = load_address r668
    r670 = _PyObject_Vectorcall(r667, r669, 2, 0)
    dec_ref r667
    if is_error(r670) goto L912 (error at run:490) else goto L913
L355:
    dec_ref r664
    r671 = 'RATIO T1   total photons'
    r672 = numpy :: module
    r673 = 'sum'
    r674 = CPyObject_GetAttr(r672, r673)
    if is_error(r674) goto L908 (error at run:491) else goto L356
L356:
    r675 = [T1photons]
    r676 = load_address r675
    r677 = _PyObject_Vectorcall(r674, r676, 1, 0)
    dec_ref r674
    if is_error(r677) goto L908 (error at run:491) else goto L357
L357:
    r678 = 'total incident photons'
    r679 = CPyObject_Size(T1_input_times)
    if is_error(r679) goto L914 (error at run:491) else goto L358
L358:
    r680 = box(int, r679)
    r681 = ''
    r682 = 'ratio='
    r683 = '{:{}}'
    r684 = numpy :: module
    r685 = 'sum'
    r686 = CPyObject_GetAttr(r684, r685)
    if is_error(r686) goto L915 (error at run:491) else goto L359
L359:
    r687 = [T1photons]
    r688 = load_address r687
    r689 = _PyObject_Vectorcall(r686, r688, 1, 0)
    dec_ref r686
    if is_error(r689) goto L915 (error at run:491) else goto L360
L360:
    dec_ref T1photons
    r690 = CPyObject_Size(T1_input_times)
    if is_error(r690) goto L916 (error at run:491) else goto L361
L361:
    r691 = box(int, r690)
    r692 = PyNumber_TrueDivide(r689, r691)
    dec_ref r689
    dec_ref r691
    if is_error(r692) goto L917 (error at run:491) else goto L362
L362:
    r693 = '.2f'
    r694 = 'format'
    r695 = CPyObject_CallMethodObjArgs(r683, r694, r692, r693, 0)
    dec_ref r692
    if is_error(r695) goto L917 (error at run:491) else goto L363
L363:
    r696 = PyList_New(2)
    if is_error(r696) goto L918 (error at run:491) else goto L364
L364:
    r697 = get_element_ptr r696 ob_item :: PyListObject
    r698 = load_mem r697 :: ptr*
    inc_ref r682
    set_mem r698, r682 :: builtins.object*
    r699 = r698 + 8
    set_mem r699, r695 :: builtins.object*
    r700 = PyUnicode_Join(r681, r696)
    dec_ref r696
    if is_error(r700) goto L917 (error at run:491) else goto L365
L365:
    r701 = builtins :: module
    r702 = 'print'
    r703 = CPyObject_GetAttr(r701, r702)
    if is_error(r703) goto L919 (error at run:491) else goto L366
L366:
    r704 = [r671, r677, r678, r680, r700]
    r705 = load_address r704
    r706 = _PyObject_Vectorcall(r703, r705, 5, 0)
    dec_ref r703
    if is_error(r706) goto L919 (error at run:491) else goto L920
L367:
    dec_ref r677
    dec_ref r680
    dec_ref r700
    r707 = 'HITS on T4'
    r708 = CPyObject_Size(T4_input_times)
    if is_error(r708) goto L921 (error at run:492) else goto L368
L368:
    r709 = box(int, r708)
    r710 = builtins :: module
    r711 = 'print'
    r712 = CPyObject_GetAttr(r710, r711)
    if is_error(r712) goto L922 (error at run:492) else goto L369
L369:
    r713 = [r707, r709]
    r714 = load_address r713
    r715 = _PyObject_Vectorcall(r712, r714, 2, 0)
    dec_ref r712
    if is_error(r715) goto L922 (error at run:492) else goto L923
L370:
    dec_ref r709
    r716 = 'RATIO T4   total photons '
    r717 = numpy :: module
    r718 = 'sum'
    r719 = CPyObject_GetAttr(r717, r718)
    if is_error(r719) goto L921 (error at run:493) else goto L371
L371:
    r720 = [T4photons]
    r721 = load_address r720
    r722 = _PyObject_Vectorcall(r719, r721, 1, 0)
    dec_ref r719
    if is_error(r722) goto L921 (error at run:493) else goto L372
L372:
    r723 = 'total incident photons'
    r724 = CPyObject_Size(T4_input_times)
    if is_error(r724) goto L924 (error at run:493) else goto L373
L373:
    r725 = box(int, r724)
    r726 = ''
    r727 = 'ratio='
    r728 = '{:{}}'
    r729 = numpy :: module
    r730 = 'sum'
    r731 = CPyObject_GetAttr(r729, r730)
    if is_error(r731) goto L925 (error at run:493) else goto L374
L374:
    r732 = [T4photons]
    r733 = load_address r732
    r734 = _PyObject_Vectorcall(r731, r733, 1, 0)
    dec_ref r731
    if is_error(r734) goto L925 (error at run:493) else goto L375
L375:
    dec_ref T4photons
    r735 = CPyObject_Size(T4_input_times)
    if is_error(r735) goto L926 (error at run:493) else goto L376
L376:
    r736 = box(int, r735)
    r737 = PyNumber_TrueDivide(r734, r736)
    dec_ref r734
    dec_ref r736
    if is_error(r737) goto L927 (error at run:493) else goto L377
L377:
    r738 = '.2f'
    r739 = 'format'
    r740 = CPyObject_CallMethodObjArgs(r728, r739, r737, r738, 0)
    dec_ref r737
    if is_error(r740) goto L927 (error at run:493) else goto L378
L378:
    r741 = PyList_New(2)
    if is_error(r741) goto L928 (error at run:493) else goto L379
L379:
    r742 = get_element_ptr r741 ob_item :: PyListObject
    r743 = load_mem r742 :: ptr*
    inc_ref r727
    set_mem r743, r727 :: builtins.object*
    r744 = r743 + 8
    set_mem r744, r740 :: builtins.object*
    r745 = PyUnicode_Join(r726, r741)
    dec_ref r741
    if is_error(r745) goto L927 (error at run:493) else goto L380
L380:
    r746 = builtins :: module
    r747 = 'print'
    r748 = CPyObject_GetAttr(r746, r747)
    if is_error(r748) goto L929 (error at run:493) else goto L381
L381:
    r749 = [r716, r722, r723, r725, r745]
    r750 = load_address r749
    r751 = _PyObject_Vectorcall(r748, r750, 5, 0)
    dec_ref r748
    if is_error(r751) goto L929 (error at run:493) else goto L930
L382:
    dec_ref r722
    dec_ref r725
    dec_ref r745
    r752 = 'DISTANCE: '
    r753 = builtins :: module
    r754 = 'print'
    r755 = CPyObject_GetAttr(r753, r754)
    if is_error(r755) goto L931 (error at run:494) else goto L383
L383:
    r756 = [r752]
    r757 = load_address r756
    r758 = _PyObject_Vectorcall(r755, r757, 1, 0)
    dec_ref r755
    if is_error(r758) goto L931 (error at run:494) else goto L932
L384:
    r759 = <error> :: object
    T1points = r759
    xdec_ref T1points
    r760 = <error> :: object
    T1times = r760
    xdec_ref T1times
    r761 = <error> :: object
    T1photons = r761
    xdec_ref T1photons
    r762 = <error> :: object
    T4points = r762
    xdec_ref T4points
    r763 = <error> :: object
    T4times = r763
    xdec_ref T4times
    r764 = <error> :: object
    T4photons = r764
    xdec_ref T4photons
    r765 = gc :: module
    r766 = 'collect'
    r767 = CPyObject_GetAttr(r765, r766)
    if is_error(r767) goto L931 (error at run:496) else goto L385
L385:
    r768 = _PyObject_Vectorcall(r767, 0, 0, 0)
    dec_ref r767
    if is_error(r768) goto L931 (error at run:496) else goto L933
L386:
    r769 = PyList_New(0)
    if is_error(r769) goto L931 (error at run:499) else goto L387
L387:
    signals_channelT1 = r769
    r770 = PyList_New(0)
    if is_error(r770) goto L934 (error at run:500) else goto L388
L388:
    signals_channelT4 = r770
    r771 = PyList_New(0)
    if is_error(r771) goto L935 (error at run:501) else goto L389
L389:
    output_times_channelT1 = r771
    r772 = PyList_New(0)
    if is_error(r772) goto L936 (error at run:502) else goto L390
L390:
    output_times_channelT4 = r772
    r773 = PyList_New(0)
    if is_error(r773) goto L937 (error at run:503) else goto L391
L391:
    signals = r773
    r774 = PyList_New(0)
    if is_error(r774) goto L938 (error at run:504) else goto L392
L392:
    output_times = r774
    r775 = PyObject_GetIter(T1_input_times)
    dec_ref T1_input_times
    if is_error(r775) goto L939 (error at run:505) else goto L393
L393:
    r776 = PyIter_Next(r775)
    if is_error(r776) goto L940 else goto L394
L394:
    t = r776
    r777 = object 1
    r778 = self.photontoElectrons(r777)
    if is_error(r778) goto L941 (error at run:506) else goto L395
L395:
    pmtSignal_i = r778
    r779 = self.pmt_electron_travel_time
    r780 = PyNumber_Add(r779, t)
    dec_ref r779
    if is_error(r780) goto L942 (error at run:507) else goto L396
L396:
    r781 = 'append'
    r782 = CPyObject_CallMethodObjArgs(output_times, r781, r780, 0)
    dec_ref r780
    if is_error(r782) goto L942 (error at run:507) else goto L943
L397:
    r783 = self.pmt_electron_travel_time
    r784 = PyNumber_Add(r783, t)
    dec_ref r783
    dec_ref t
    if is_error(r784) goto L944 (error at run:508) else goto L398
L398:
    r785 = 'append'
    r786 = CPyObject_CallMethodObjArgs(output_times_channelT1, r785, r784, 0)
    dec_ref r784
    if is_error(r786) goto L944 (error at run:508) else goto L945
L399:
    r787 = 'append'
    r788 = CPyObject_CallMethodObjArgs(signals, r787, pmtSignal_i, 0)
    if is_error(r788) goto L944 (error at run:509) else goto L946
L400:
    r789 = 'append'
    r790 = CPyObject_CallMethodObjArgs(signals_channelT1, r789, pmtSignal_i, 0)
    dec_ref pmtSignal_i
    if is_error(r790) goto L947 (error at run:510) else goto L948
L401:
    r791 = CPy_NoErrOccured()
    if not r791 goto L939 (error at run:505) else goto L402 :: bool
L402:
    r792 = PyObject_GetIter(T4_input_times)
    dec_ref T4_input_times
    if is_error(r792) goto L949 (error at run:511) else goto L403
L403:
    r793 = PyIter_Next(r792)
    if is_error(r793) goto L950 else goto L404
L404:
    t = r793
    r794 = object 1
    r795 = self.photontoElectrons(r794)
    if is_error(r795) goto L951 (error at run:512) else goto L405
L405:
    pmtSignal_i = r795
    r796 = self.pmt_electron_travel_time
    r797 = PyNumber_Add(r796, t)
    dec_ref r796
    if is_error(r797) goto L952 (error at run:513) else goto L406
L406:
    r798 = 'append'
    r799 = CPyObject_CallMethodObjArgs(output_times, r798, r797, 0)
    dec_ref r797
    if is_error(r799) goto L952 (error at run:513) else goto L953
L407:
    r800 = self.pmt_electron_travel_time
    r801 = PyNumber_Add(r800, t)
    dec_ref r800
    dec_ref t
    if is_error(r801) goto L954 (error at run:514) else goto L408
L408:
    r802 = 'append'
    r803 = CPyObject_CallMethodObjArgs(output_times_channelT4, r802, r801, 0)
    dec_ref r801
    if is_error(r803) goto L954 (error at run:514) else goto L955
L409:
    r804 = 'append'
    r805 = CPyObject_CallMethodObjArgs(signals, r804, pmtSignal_i, 0)
    if is_error(r805) goto L954 (error at run:515) else goto L956
L410:
    r806 = 'append'
    r807 = CPyObject_CallMethodObjArgs(signals_channelT4, r806, pmtSignal_i, 0)
    dec_ref pmtSignal_i
    if is_error(r807) goto L957 (error at run:516) else goto L958
L411:
    r808 = CPy_NoErrOccured()
    if not r808 goto L949 (error at run:511) else goto L412 :: bool
L412:
    r809 = numpy :: module
    r810 = 'array'
    r811 = CPyObject_GetAttr(r809, r810)
    if is_error(r811) goto L949 (error at run:519) else goto L413
L413:
    r812 = [signals]
    r813 = load_address r812
    r814 = _PyObject_Vectorcall(r811, r813, 1, 0)
    dec_ref r811
    if is_error(r814) goto L949 (error at run:519) else goto L414
L414:
    dec_ref signals
    r815 = self.q
    r816 = PyNumber_Multiply(r814, r815)
    dec_ref r814
    dec_ref r815
    if is_error(r816) goto L959 (error at run:519) else goto L415
L415:
    r817 = box(float, 1e-12)
    r818 = PyNumber_TrueDivide(r816, r817)
    dec_ref r816
    dec_ref r817
    if is_error(r818) goto L959 (error at run:519) else goto L416
L416:
    r819 = self.artificial_gain
    r820 = PyNumber_Multiply(r818, r819)
    dec_ref r818
    dec_ref r819
    if is_error(r820) goto L959 (error at run:519) else goto L417
L417:
    self.signals = r820; r821 = is_error
    if not r821 goto L959 (error at run:519) else goto L418 :: bool
L418:
    r822 = numpy :: module
    r823 = 'array'
    r824 = CPyObject_GetAttr(r822, r823)
    if is_error(r824) goto L959 (error at run:520) else goto L419
L419:
    r825 = [output_times]
    r826 = load_address r825
    r827 = _PyObject_Vectorcall(r824, r826, 1, 0)
    dec_ref r824
    if is_error(r827) goto L959 (error at run:520) else goto L420
L420:
    dec_ref output_times
    self.output_times = r827; r828 = is_error
    if not r828 goto L960 (error at run:520) else goto L421 :: bool
L421:
    r829 = numpy :: module
    r830 = 'array'
    r831 = CPyObject_GetAttr(r829, r830)
    if is_error(r831) goto L960 (error at run:521) else goto L422
L422:
    r832 = [signals_channelT1]
    r833 = load_address r832
    r834 = _PyObject_Vectorcall(r831, r833, 1, 0)
    dec_ref r831
    if is_error(r834) goto L960 (error at run:521) else goto L423
L423:
    dec_ref signals_channelT1
    r835 = self.q
    r836 = PyNumber_Multiply(r834, r835)
    dec_ref r834
    dec_ref r835
    if is_error(r836) goto L961 (error at run:521) else goto L424
L424:
    r837 = box(float, 1e-12)
    r838 = PyNumber_TrueDivide(r836, r837)
    dec_ref r836
    dec_ref r837
    if is_error(r838) goto L961 (error at run:521) else goto L425
L425:
    r839 = self.artificial_gain
    r840 = PyNumber_Multiply(r838, r839)
    dec_ref r838
    dec_ref r839
    if is_error(r840) goto L961 (error at run:521) else goto L426
L426:
    self.signals_channelT1 = r840; r841 = is_error
    if not r841 goto L961 (error at run:521) else goto L427 :: bool
L427:
    r842 = numpy :: module
    r843 = 'array'
    r844 = CPyObject_GetAttr(r842, r843)
    if is_error(r844) goto L961 (error at run:522) else goto L428
L428:
    r845 = [signals_channelT4]
    r846 = load_address r845
    r847 = _PyObject_Vectorcall(r844, r846, 1, 0)
    dec_ref r844
    if is_error(r847) goto L961 (error at run:522) else goto L429
L429:
    dec_ref signals_channelT4
    r848 = self.q
    r849 = PyNumber_Multiply(r847, r848)
    dec_ref r847
    dec_ref r848
    if is_error(r849) goto L962 (error at run:522) else goto L430
L430:
    r850 = box(float, 1e-12)
    r851 = PyNumber_TrueDivide(r849, r850)
    dec_ref r849
    dec_ref r850
    if is_error(r851) goto L962 (error at run:522) else goto L431
L431:
    r852 = self.artificial_gain
    r853 = PyNumber_Multiply(r851, r852)
    dec_ref r851
    dec_ref r852
    if is_error(r853) goto L962 (error at run:522) else goto L432
L432:
    r854 = box(float, 0.6)
    r855 = PyNumber_Multiply(r853, r854)
    dec_ref r853
    dec_ref r854
    if is_error(r855) goto L962 (error at run:522) else goto L433
L433:
    self.signals_channelT4 = r855; r856 = is_error
    if not r856 goto L962 (error at run:522) else goto L434 :: bool
L434:
    r857 = numpy :: module
    r858 = 'array'
    r859 = CPyObject_GetAttr(r857, r858)
    if is_error(r859) goto L962 (error at run:523) else goto L435
L435:
    r860 = [output_times_channelT1]
    r861 = load_address r860
    r862 = _PyObject_Vectorcall(r859, r861, 1, 0)
    dec_ref r859
    if is_error(r862) goto L962 (error at run:523) else goto L436
L436:
    dec_ref output_times_channelT1
    self.output_times_channelT1 = r862; r863 = is_error
    if not r863 goto L963 (error at run:523) else goto L437 :: bool
L437:
    r864 = numpy :: module
    r865 = 'array'
    r866 = CPyObject_GetAttr(r864, r865)
    if is_error(r866) goto L963 (error at run:524) else goto L438
L438:
    r867 = [output_times_channelT4]
    r868 = load_address r867
    r869 = _PyObject_Vectorcall(r866, r868, 1, 0)
    dec_ref r866
    if is_error(r869) goto L963 (error at run:524) else goto L439
L439:
    dec_ref output_times_channelT4
    self.output_times_channelT4 = r869; r870 = is_error
    if not r870 goto L720 (error at run:524) else goto L440 :: bool
L440:
    r871 = ('norm',)
    r872 = 'scipy.stats'
    r873 = modTof.globals :: static
    r874 = CPyImport_ImportFromMany(r872, r871, r871, r873)
    if is_error(r874) goto L720 (error at run:528) else goto L441
L441:
    scipy.stats = r874 :: module
    dec_ref r874
    r875 = 'extra_data_only'
    r876 = box(bool, 0)
    r877 = CPyDict_Get(kwargs, r875, r876)
    if is_error(r877) goto L720 (error at run:529) else goto L442
L442:
    output_extra = r877
    r878 = 'output_both'
    r879 = box(bool, 0)
    r880 = CPyDict_Get(kwargs, r878, r879)
    if is_error(r880) goto L964 (error at run:530) else goto L443
L443:
    output_both = r880
    r881 = PyObject_IsTrue(output_extra)
    dec_ref output_extra
    r882 = r881 >= 0 :: signed
    if not r882 goto L965 (error at run:529) else goto L444 :: bool
L444:
    r883 = truncate r881: i32 to builtins.bool
    if r883 goto L447 else goto L445 :: bool
L445:
    r884 = PyObject_IsTrue(output_both)
    r885 = r884 >= 0 :: signed
    if not r885 goto L965 (error at run:530) else goto L446 :: bool
L446:
    r886 = truncate r884: i32 to builtins.bool
    if r886 goto L447 else goto L966 :: bool
L447:
    r887 = 'Exporting Extra Data...'
    r888 = builtins :: module
    r889 = 'print'
    r890 = CPyObject_GetAttr(r888, r889)
    if is_error(r890) goto L965 (error at run:533) else goto L448
L448:
    r891 = [r887]
    r892 = load_address r891
    r893 = _PyObject_Vectorcall(r890, r892, 1, 0)
    dec_ref r890
    if is_error(r893) goto L965 (error at run:533) else goto L967
L449:
    r894 = 'T1_part_ids'
    r895 = self.T1_part_ids
    if is_error(r895) goto L965 (error at run:534) else goto L450
L450:
    r896 = 'time'
    r897 = self.output_times_channelT1
    if is_error(r897) goto L968 (error at run:534) else goto L451
L451:
    r898 = 'T1_prop_dist'
    r899 = self.T1_prop_dist
    if is_error(r899) goto L969 (error at run:534) else goto L452
L452:
    r900 = 'T1_endpoint_dist'
    r901 = self.T1_endpoint_dist
    if is_error(r901) goto L970 (error at run:534) else goto L453
L453:
    r902 = 'T1_prop_times'
    r903 = self.T1_prop_times
    if is_error(r903) goto L971 (error at run:534) else goto L454
L454:
    r904 = 'T1_interactions'
    r905 = self.T1_interactions
    if is_error(r905) goto L972 (error at run:534) else goto L455
L455:
    r906 = CPyDict_Build(6, r894, r895, r896, r897, r898, r899, r900, r901, r902, r903, r904, r905)
    dec_ref r895
    dec_ref r897
    dec_ref r899
    dec_ref r901
    dec_ref r903
    dec_ref r905
    if is_error(r906) goto L965 (error at run:534) else goto L456
L456:
    r907 = pandas :: module
    r908 = 'DataFrame'
    r909 = CPyObject_GetAttr(r907, r908)
    if is_error(r909) goto L973 (error at run:534) else goto L457
L457:
    r910 = [r906]
    r911 = load_address r910
    r912 = _PyObject_Vectorcall(r909, r911, 1, 0)
    dec_ref r909
    if is_error(r912) goto L973 (error at run:534) else goto L458
L458:
    dec_ref r906
    dft1 = r912
    r913 = 'T4_part_ids'
    r914 = self.T4_part_ids
    if is_error(r914) goto L974 (error at run:535) else goto L459
L459:
    r915 = 'time'
    r916 = self.output_times_channelT4
    if is_error(r916) goto L975 (error at run:535) else goto L460
L460:
    r917 = 'T4_prop_dist'
    r918 = self.T4_prop_dist
    if is_error(r918) goto L976 (error at run:535) else goto L461
L461:
    r919 = 'T4_endpoint_dist'
    r920 = self.T4_endpoint_dist
    if is_error(r920) goto L977 (error at run:535) else goto L462
L462:
    r921 = 'T4_prop_times'
    r922 = self.T4_prop_times
    if is_error(r922) goto L978 (error at run:535) else goto L463
L463:
    r923 = 'T4_interactions'
    r924 = self.T4_interactions
    if is_error(r924) goto L979 (error at run:535) else goto L464
L464:
    r925 = CPyDict_Build(6, r913, r914, r915, r916, r917, r918, r919, r920, r921, r922, r923, r924)
    dec_ref r914
    dec_ref r916
    dec_ref r918
    dec_ref r920
    dec_ref r922
    dec_ref r924
    if is_error(r925) goto L974 (error at run:535) else goto L465
L465:
    r926 = pandas :: module
    r927 = 'DataFrame'
    r928 = CPyObject_GetAttr(r926, r927)
    if is_error(r928) goto L980 (error at run:535) else goto L466
L466:
    r929 = [r925]
    r930 = load_address r929
    r931 = _PyObject_Vectorcall(r928, r930, 1, 0)
    dec_ref r928
    if is_error(r931) goto L980 (error at run:535) else goto L467
L467:
    dec_ref r925
    dft4 = r931
    r932 = 'monte_carlo_extradata'
    r933 = self.num_particles
    r934 = PyObject_Str(r933)
    dec_ref r933
    if is_error(r934) goto L981 (error at run:536) else goto L468
L468:
    r935 = PyUnicode_Concat(r932, r934)
    dec_ref r934
    if is_error(r935) goto L981 (error at run:536) else goto L469
L469:
    r936 = 'chT1_'
    r937 = PyUnicode_Concat(r935, r936)
    dec_ref r935
    if is_error(r937) goto L981 (error at run:536) else goto L470
L470:
    r938 = modTof.globals :: static
    r939 = 'datetime'
    r940 = CPyDict_GetItem(r938, r939)
    if is_error(r940) goto L982 (error at run:536) else goto L471
L471:
    r941 = 'now'
    r942 = CPyObject_CallMethodObjArgs(r940, r941, 0)
    dec_ref r940
    if is_error(r942) goto L982 (error at run:536) else goto L472
L472:
    r943 = '%m_%d_%Y'
    r944 = 'strftime'
    r945 = CPyObject_CallMethodObjArgs(r942, r944, r943, 0)
    dec_ref r942
    if is_error(r945) goto L982 (error at run:536) else goto L473
L473:
    r946 = PyObject_Str(r945)
    dec_ref r945
    if is_error(r946) goto L982 (error at run:536) else goto L474
L474:
    r947 = PyUnicode_Concat(r937, r946)
    dec_ref r937
    dec_ref r946
    if is_error(r947) goto L981 (error at run:536) else goto L475
L475:
    r948 = '.txt'
    r949 = PyUnicode_Concat(r947, r948)
    dec_ref r947
    if is_error(r949) goto L981 (error at run:536) else goto L476
L476:
    r950 = 'to_csv'
    r951 = CPyObject_CallMethodObjArgs(dft1, r950, r949, 0)
    dec_ref dft1
    dec_ref r949
    if is_error(r951) goto L983 (error at run:536) else goto L984
L477:
    r952 = 'monte_carlo_extradata'
    r953 = self.num_particles
    r954 = PyObject_Str(r953)
    dec_ref r953
    if is_error(r954) goto L983 (error at run:537) else goto L478
L478:
    r955 = PyUnicode_Concat(r952, r954)
    dec_ref r954
    if is_error(r955) goto L983 (error at run:537) else goto L479
L479:
    r956 = 'chT4_'
    r957 = PyUnicode_Concat(r955, r956)
    dec_ref r955
    if is_error(r957) goto L983 (error at run:537) else goto L480
L480:
    r958 = modTof.globals :: static
    r959 = 'datetime'
    r960 = CPyDict_GetItem(r958, r959)
    if is_error(r960) goto L985 (error at run:537) else goto L481
L481:
    r961 = 'now'
    r962 = CPyObject_CallMethodObjArgs(r960, r961, 0)
    dec_ref r960
    if is_error(r962) goto L985 (error at run:537) else goto L482
L482:
    r963 = '%m_%d_%Y'
    r964 = 'strftime'
    r965 = CPyObject_CallMethodObjArgs(r962, r964, r963, 0)
    dec_ref r962
    if is_error(r965) goto L985 (error at run:537) else goto L483
L483:
    r966 = PyObject_Str(r965)
    dec_ref r965
    if is_error(r966) goto L985 (error at run:537) else goto L484
L484:
    r967 = PyUnicode_Concat(r957, r966)
    dec_ref r957
    dec_ref r966
    if is_error(r967) goto L983 (error at run:537) else goto L485
L485:
    r968 = '.txt'
    r969 = PyUnicode_Concat(r967, r968)
    dec_ref r967
    if is_error(r969) goto L983 (error at run:537) else goto L486
L486:
    r970 = 'to_csv'
    r971 = CPyObject_CallMethodObjArgs(dft4, r970, r969, 0)
    dec_ref dft4
    dec_ref r969
    if is_error(r971) goto L965 (error at run:537) else goto L986
L487:
    r972 = PyObject_IsTrue(output_both)
    dec_ref output_both
    r973 = r972 >= 0 :: signed
    if not r973 goto L720 (error at run:530) else goto L488 :: bool
L488:
    r974 = truncate r972: i32 to builtins.bool
    if r974 goto L490 else goto L489 :: bool
L489:
    r975 = box(None, 1)
    inc_ref r975
    return r975
L490:
    r976 = 'Exporing to 2 channels...'
    r977 = builtins :: module
    r978 = 'print'
    r979 = CPyObject_GetAttr(r977, r978)
    if is_error(r979) goto L720 (error at run:540) else goto L491
L491:
    r980 = [r976]
    r981 = load_address r980
    r982 = _PyObject_Vectorcall(r979, r981, 1, 0)
    dec_ref r979
    if is_error(r982) goto L720 (error at run:540) else goto L987
L492:
    r983 = self.output_times_channelT1
    if is_error(r983) goto L720 (error at run:542) else goto L493
L493:
    r984 = self.output_times_channelT4
    if is_error(r984) goto L988 (error at run:542) else goto L494
L494:
    r985 = PyList_New(2)
    if is_error(r985) goto L989 (error at run:542) else goto L495
L495:
    r986 = get_element_ptr r985 ob_item :: PyListObject
    r987 = load_mem r986 :: ptr*
    set_mem r987, r983 :: builtins.object*
    r988 = r987 + 8
    set_mem r988, r984 :: builtins.object*
    r989 = 0
    r990 = self.signals_channelT1
    if is_error(r990) goto L990 (error at run:542) else goto L496
L496:
    r991 = self.signals_channelT4
    if is_error(r991) goto L991 (error at run:542) else goto L497
L497:
    r992 = PyList_New(2)
    if is_error(r992) goto L992 (error at run:542) else goto L498
L498:
    r993 = get_element_ptr r992 ob_item :: PyListObject
    r994 = load_mem r993 :: ptr*
    set_mem r994, r990 :: builtins.object*
    r995 = r994 + 8
    set_mem r995, r991 :: builtins.object*
    r996 = 0
    r997 = PyList_New(2)
    if is_error(r997) goto L993 (error at run:542) else goto L499
L499:
    r998 = object 1
    r999 = object 4
    r1000 = get_element_ptr r997 ob_item :: PyListObject
    r1001 = load_mem r1000 :: ptr*
    inc_ref r998
    set_mem r1001, r998 :: builtins.object*
    r1002 = r1001 + 8
    inc_ref r999
    set_mem r1002, r999 :: builtins.object*
    r1003 = 0
L500:
    r1004 = get_element_ptr r985 ob_size :: PyVarObject
    r1005 = load_mem r1004 :: native_int*
    r1006 = r1005 << 1
    r1007 = r989 < r1006 :: signed
    if r1007 goto L501 else goto L994 :: bool
L501:
    r1008 = get_element_ptr r992 ob_size :: PyVarObject
    r1009 = load_mem r1008 :: native_int*
    r1010 = r1009 << 1
    r1011 = r996 < r1010 :: signed
    if r1011 goto L502 else goto L994 :: bool
L502:
    r1012 = get_element_ptr r997 ob_size :: PyVarObject
    r1013 = load_mem r1012 :: native_int*
    r1014 = r1013 << 1
    r1015 = r1003 < r1014 :: signed
    if r1015 goto L503 else goto L994 :: bool
L503:
    r1016 = CPyList_GetItemUnsafe(r985, r989)
    time = r1016
    r1017 = CPyList_GetItemUnsafe(r992, r996)
    signal = r1017
    r1018 = CPyList_GetItemUnsafe(r997, r1003)
    ch = r1018
    r1019 = 'Smoothing Signals...'
    r1020 = builtins :: module
    r1021 = 'print'
    r1022 = CPyObject_GetAttr(r1020, r1021)
    if is_error(r1022) goto L995 (error at run:549) else goto L504
L504:
    r1023 = [r1019]
    r1024 = load_address r1023
    r1025 = _PyObject_Vectorcall(r1022, r1024, 1, 0)
    dec_ref r1022
    if is_error(r1025) goto L995 (error at run:549) else goto L996
L505:
    r1026 = PyList_New(1)
    if is_error(r1026) goto L995 (error at run:550) else goto L506
L506:
    r1027 = box(float, 0.0)
    r1028 = get_element_ptr r1026 ob_item :: PyListObject
    r1029 = load_mem r1028 :: ptr*
    set_mem r1029, r1027 :: builtins.object*
    t_binned = r1026
    r1030 = PyList_New(1)
    if is_error(r1030) goto L997 (error at run:551) else goto L507
L507:
    r1031 = box(float, 0.0)
    r1032 = get_element_ptr r1030 ob_item :: PyListObject
    r1033 = load_mem r1032 :: ptr*
    set_mem r1033, r1031 :: builtins.object*
    y_binned = r1030
    r1034 = 0
    r1035 = object 0
    inc_ref r1035
    i = r1035
    r1036 = PyObject_GetIter(signal)
    dec_ref signal
    if is_error(r1036) goto L998 (error at run:552) else goto L508
L508:
    r1037 = PyIter_Next(r1036)
    if is_error(r1037) goto L999 else goto L509
L509:
    y = r1037
    r1038 = PyObject_GetItem(time, i)
    if is_error(r1038) goto L1000 (error at run:554) else goto L510
L510:
    r1039 = self.sigma_smoothing
    r1040 = object 2
    r1041 = PyNumber_Multiply(r1040, r1039)
    dec_ref r1039
    if is_error(r1041) goto L1001 (error at run:554) else goto L511
L511:
    r1042 = PyNumber_Subtract(r1038, r1041)
    dec_ref r1038
    dec_ref r1041
    if is_error(r1042) goto L1000 (error at run:554) else goto L512
L512:
    r1043 = object 0
    r1044 = PyObject_RichCompare(r1043, r1042, 4)
    if is_error(r1044) goto L1002 (error at run:554) else goto L513
L513:
    r1045 = PyObject_IsTrue(r1044)
    dec_ref r1044
    r1046 = r1045 >= 0 :: signed
    if not r1046 goto L1002 (error at run:554) else goto L514 :: bool
L514:
    r1047 = truncate r1045: i32 to builtins.bool
    if r1047 goto L1003 else goto L516 :: bool
L515:
    r1048 = object 0
    inc_ref r1048
    r1049 = r1048
    goto L517
L516:
    r1049 = r1042
L517:
    lower_bound = r1049
    r1050 = PyObject_GetItem(time, i)
    if is_error(r1050) goto L1004 (error at run:555) else goto L518
L518:
    r1051 = self.sigma_smoothing
    r1052 = object 2
    r1053 = PyNumber_Multiply(r1052, r1051)
    dec_ref r1051
    if is_error(r1053) goto L1005 (error at run:555) else goto L519
L519:
    r1054 = PyNumber_Add(r1050, r1053)
    dec_ref r1050
    dec_ref r1053
    if is_error(r1054) goto L1004 (error at run:555) else goto L520
L520:
    r1055 = builtins :: module
    r1056 = 'max'
    r1057 = CPyObject_GetAttr(r1055, r1056)
    if is_error(r1057) goto L1006 (error at run:555) else goto L521
L521:
    r1058 = [time]
    r1059 = load_address r1058
    r1060 = _PyObject_Vectorcall(r1057, r1059, 1, 0)
    dec_ref r1057
    if is_error(r1060) goto L1006 (error at run:555) else goto L522
L522:
    r1061 = self.sigma_smoothing
    r1062 = object 2
    r1063 = PyNumber_Multiply(r1062, r1061)
    dec_ref r1061
    if is_error(r1063) goto L1007 (error at run:555) else goto L523
L523:
    r1064 = PyNumber_Add(r1060, r1063)
    dec_ref r1060
    dec_ref r1063
    if is_error(r1064) goto L1006 (error at run:555) else goto L524
L524:
    r1065 = PyObject_RichCompare(r1064, r1054, 0)
    if is_error(r1065) goto L1008 (error at run:555) else goto L525
L525:
    r1066 = PyObject_IsTrue(r1065)
    dec_ref r1065
    r1067 = r1066 >= 0 :: signed
    if not r1067 goto L1008 (error at run:555) else goto L526 :: bool
L526:
    r1068 = truncate r1066: i32 to builtins.bool
    if r1068 goto L1009 else goto L1010 :: bool
L527:
    r1069 = r1064
    goto L529
L528:
    r1069 = r1054
L529:
    upper_bound = r1069
    r1070 = builtins :: module
    r1071 = 'max'
    r1072 = CPyObject_GetAttr(r1070, r1071)
    if is_error(r1072) goto L1011 (error at run:557) else goto L530
L530:
    r1073 = [t_binned]
    r1074 = load_address r1073
    r1075 = _PyObject_Vectorcall(r1072, r1074, 1, 0)
    dec_ref r1072
    if is_error(r1075) goto L1011 (error at run:557) else goto L531
L531:
    r1076 = PyObject_RichCompare(lower_bound, r1075, 0)
    dec_ref r1075
    if is_error(r1076) goto L1011 (error at run:557) else goto L532
L532:
    r1077 = PyObject_IsTrue(r1076)
    dec_ref r1076
    r1078 = r1077 >= 0 :: signed
    if not r1078 goto L1011 (error at run:557) else goto L533 :: bool
L533:
    r1079 = truncate r1077: i32 to builtins.bool
    if r1079 goto L534 else goto L540 :: bool
L534:
    r1080 = numpy :: module
    r1081 = 'digitize'
    r1082 = CPyObject_GetAttr(r1080, r1081)
    if is_error(r1082) goto L1011 (error at run:558) else goto L535
L535:
    r1083 = [lower_bound, t_binned]
    r1084 = load_address r1083
    r1085 = _PyObject_Vectorcall(r1082, r1084, 2, 0)
    dec_ref r1082
    if is_error(r1085) goto L1011 (error at run:558) else goto L536
L536:
    dec_ref lower_bound
    r1086 = PyObject_GetItem(t_binned, r1085)
    dec_ref r1085
    if is_error(r1086) goto L1012 (error at run:558) else goto L537
L537:
    r1087 = self.output_bin_width
    r1088 = object 2
    r1089 = PyNumber_TrueDivide(r1087, r1088)
    dec_ref r1087
    if is_error(r1089) goto L1013 (error at run:558) else goto L538
L538:
    r1090 = PyNumber_Add(r1086, r1089)
    dec_ref r1086
    dec_ref r1089
    if is_error(r1090) goto L1012 (error at run:558) else goto L539
L539:
    lower_bound = r1090
L540:
    r1091 = self.output_bin_width
    r1092 = numpy :: module
    r1093 = 'arange'
    r1094 = CPyObject_GetAttr(r1092, r1093)
    if is_error(r1094) goto L1014 (error at run:559) else goto L541
L541:
    r1095 = [lower_bound, upper_bound, r1091]
    r1096 = load_address r1095
    r1097 = _PyObject_Vectorcall(r1094, r1096, 3, 0)
    dec_ref r1094
    if is_error(r1097) goto L1014 (error at run:559) else goto L542
L542:
    dec_ref r1091
    r1098 = self.output_bin_width
    r1099 = object 2
    r1100 = PyNumber_TrueDivide(r1098, r1099)
    dec_ref r1098
    if is_error(r1100) goto L1015 (error at run:559) else goto L543
L543:
    r1101 = PyNumber_Add(r1097, r1100)
    dec_ref r1097
    dec_ref r1100
    if is_error(r1101) goto L1011 (error at run:559) else goto L544
L544:
    cur_x = r1101
    r1102 = PyObject_GetIter(cur_x)
    dec_ref cur_x
    if is_error(r1102) goto L1011 (error at run:562) else goto L545
L545:
    r1103 = PyIter_Next(r1102)
    if is_error(r1103) goto L1016 else goto L546
L546:
    x = r1103
    r1104 = builtins :: module
    r1105 = 'max'
    r1106 = CPyObject_GetAttr(r1104, r1105)
    if is_error(r1106) goto L1017 (error at run:563) else goto L547
L547:
    r1107 = [t_binned]
    r1108 = load_address r1107
    r1109 = _PyObject_Vectorcall(r1106, r1108, 1, 0)
    dec_ref r1106
    if is_error(r1109) goto L1017 (error at run:563) else goto L548
L548:
    r1110 = PyObject_RichCompare(x, r1109, 4)
    dec_ref r1109
    if is_error(r1110) goto L1017 (error at run:563) else goto L549
L549:
    r1111 = PyObject_IsTrue(r1110)
    dec_ref r1110
    r1112 = r1111 >= 0 :: signed
    if not r1112 goto L1017 (error at run:563) else goto L550 :: bool
L550:
    r1113 = truncate r1111: i32 to builtins.bool
    if r1113 goto L551 else goto L553 :: bool
L551:
    r1114 = 'append'
    r1115 = CPyObject_CallMethodObjArgs(t_binned, r1114, x, 0)
    dec_ref x
    if is_error(r1115) goto L1018 (error at run:564) else goto L1019
L552:
    r1116 = 'append'
    r1117 = object 0
    r1118 = CPyObject_CallMethodObjArgs(y_binned, r1116, r1117, 0)
    if is_error(r1118) goto L1018 (error at run:565) else goto L1020
L553:
    r1119 = numpy :: module
    r1120 = 'digitize'
    r1121 = CPyObject_GetAttr(r1119, r1120)
    if is_error(r1121) goto L1017 (error at run:566) else goto L554
L554:
    r1122 = [x, t_binned]
    r1123 = load_address r1122
    r1124 = _PyObject_Vectorcall(r1121, r1123, 2, 0)
    dec_ref r1121
    if is_error(r1124) goto L1017 (error at run:566) else goto L555
L555:
    r1125 = object 1
    r1126 = PyNumber_Subtract(r1124, r1125)
    dec_ref r1124
    if is_error(r1126) goto L1017 (error at run:566) else goto L556
L556:
    r1127 = object 0
    r1128 = PyObject_RichCompare(r1126, r1127, 4)
    dec_ref r1126
    if is_error(r1128) goto L1017 (error at run:566) else goto L557
L557:
    r1129 = PyObject_IsTrue(r1128)
    dec_ref r1128
    r1130 = r1129 >= 0 :: signed
    if not r1130 goto L1017 (error at run:566) else goto L558 :: bool
L558:
    r1131 = truncate r1129: i32 to builtins.bool
    if r1131 goto L559 else goto L1021 :: bool
L559:
    r1132 = numpy :: module
    r1133 = 'digitize'
    r1134 = CPyObject_GetAttr(r1132, r1133)
    if is_error(r1134) goto L1017 (error at run:566) else goto L560
L560:
    r1135 = [x, t_binned]
    r1136 = load_address r1135
    r1137 = _PyObject_Vectorcall(r1134, r1136, 2, 0)
    dec_ref r1134
    if is_error(r1137) goto L1017 (error at run:566) else goto L561
L561:
    r1138 = CPyObject_Size(t_binned)
    if is_error(r1138) goto L1022 (error at run:566) else goto L562
L562:
    r1139 = box(int, r1138)
    r1140 = PyObject_RichCompare(r1137, r1139, 0)
    dec_ref r1137
    dec_ref r1139
    if is_error(r1140) goto L1017 (error at run:566) else goto L563
L563:
    r1141 = PyObject_IsTrue(r1140)
    dec_ref r1140
    r1142 = r1141 >= 0 :: signed
    if not r1142 goto L1017 (error at run:566) else goto L564 :: bool
L564:
    r1143 = truncate r1141: i32 to builtins.bool
    if r1143 goto L565 else goto L1021 :: bool
L565:
    r1144 = numpy :: module
    r1145 = 'digitize'
    r1146 = CPyObject_GetAttr(r1144, r1145)
    if is_error(r1146) goto L1017 (error at run:567) else goto L566
L566:
    r1147 = [x, t_binned]
    r1148 = load_address r1147
    r1149 = _PyObject_Vectorcall(r1146, r1148, 2, 0)
    dec_ref r1146
    if is_error(r1149) goto L1017 (error at run:567) else goto L567
L567:
    index = r1149
    r1150 = PyObject_GetItem(t_binned, index)
    if is_error(r1150) goto L1023 (error at run:568) else goto L568
L568:
    r1151 = object 1
    r1152 = PyNumber_Subtract(index, r1151)
    if is_error(r1152) goto L1024 (error at run:568) else goto L569
L569:
    r1153 = PyObject_GetItem(t_binned, r1152)
    dec_ref r1152
    if is_error(r1153) goto L1024 (error at run:568) else goto L570
L570:
    r1154 = PyNumber_Subtract(r1150, r1153)
    dec_ref r1150
    dec_ref r1153
    if is_error(r1154) goto L1023 (error at run:568) else goto L571
L571:
    r1155 = PyNumber_Absolute(r1154)
    dec_ref r1154
    if is_error(r1155) goto L1023 (error at run:568) else goto L572
L572:
    r1156 = self.output_bin_width
    r1157 = PyObject_RichCompare(r1155, r1156, 4)
    dec_ref r1155
    dec_ref r1156
    if is_error(r1157) goto L1023 (error at run:568) else goto L573
L573:
    r1158 = PyObject_IsTrue(r1157)
    dec_ref r1157
    r1159 = r1158 >= 0 :: signed
    if not r1159 goto L1023 (error at run:568) else goto L574 :: bool
L574:
    r1160 = truncate r1158: i32 to builtins.bool
    if r1160 goto L575 else goto L1025 :: bool
L575:
    r1161 = 'insert'
    r1162 = CPyObject_CallMethodObjArgs(t_binned, r1161, index, x, 0)
    dec_ref x
    if is_error(r1162) goto L1026 (error at run:569) else goto L1027
L576:
    r1163 = 'insert'
    r1164 = object 0
    r1165 = CPyObject_CallMethodObjArgs(y_binned, r1163, index, r1164, 0)
    dec_ref index
    if is_error(r1165) goto L1018 (error at run:570) else goto L1028
L577:
    r1166 = CPy_NoErrOccured()
    if not r1166 goto L1011 (error at run:562) else goto L578 :: bool
L578:
    r1167 = PyList_New(0)
    if is_error(r1167) goto L1011 (error at run:572) else goto L579
L579:
    r1168 = 0
    r1169 = object 0
    inc_ref r1169
    i_2 = r1169
    r1170 = PyObject_GetIter(t_binned)
    if is_error(r1170) goto L1029 (error at run:572) else goto L580
L580:
    r1171 = PyIter_Next(r1170)
    if is_error(r1171) goto L1030 else goto L581
L581:
    t_2 = r1171
    r1172 = PyObject_RichCompare(t_2, lower_bound, 5)
    dec_ref t_2
    if is_error(r1172) goto L1031 (error at run:572) else goto L582
L582:
    r1173 = PyObject_IsTrue(r1172)
    dec_ref r1172
    r1174 = r1173 >= 0 :: signed
    if not r1174 goto L1031 (error at run:572) else goto L583 :: bool
L583:
    r1175 = truncate r1173: i32 to builtins.bool
    if r1175 goto L584 else goto L1032 :: bool
L584:
    r1176 = PyList_Append(r1167, i_2)
    dec_ref i_2
    r1177 = r1176 >= 0 :: signed
    if not r1177 goto L1033 (error at run:572) else goto L585 :: bool
L585:
    r1178 = r1168 + 2
    r1168 = r1178
    r1179 = box(short_int, r1178)
    i_2 = r1179
    goto L580
L586:
    r1180 = CPy_NoErrOccured()
    if not r1180 goto L1034 (error at run:572) else goto L587 :: bool
L587:
    r1181 = CPyList_GetItemShort(r1167, 0)
    dec_ref r1167
    if is_error(r1181) goto L1012 (error at run:572) else goto L588
L588:
    index_lower = r1181
    r1182 = PyList_New(0)
    if is_error(r1182) goto L1035 (error at run:573) else goto L589
L589:
    r1183 = 0
    r1184 = object 0
    inc_ref r1184
    i_3 = r1184
    r1185 = PyObject_GetIter(t_binned)
    if is_error(r1185) goto L1036 (error at run:573) else goto L590
L590:
    r1186 = PyIter_Next(r1185)
    if is_error(r1186) goto L1037 else goto L591
L591:
    t_3 = r1186
    r1187 = PyObject_RichCompare(t_3, upper_bound, 1)
    dec_ref t_3
    if is_error(r1187) goto L1038 (error at run:573) else goto L592
L592:
    r1188 = PyObject_IsTrue(r1187)
    dec_ref r1187
    r1189 = r1188 >= 0 :: signed
    if not r1189 goto L1038 (error at run:573) else goto L593 :: bool
L593:
    r1190 = truncate r1188: i32 to builtins.bool
    if r1190 goto L594 else goto L1039 :: bool
L594:
    r1191 = PyList_Append(r1182, i_3)
    dec_ref i_3
    r1192 = r1191 >= 0 :: signed
    if not r1192 goto L1040 (error at run:573) else goto L595 :: bool
L595:
    r1193 = r1183 + 2
    r1183 = r1193
    r1194 = box(short_int, r1193)
    i_3 = r1194
    goto L590
L596:
    r1195 = CPy_NoErrOccured()
    if not r1195 goto L1041 (error at run:573) else goto L597 :: bool
L597:
    r1196 = object -1
    r1197 = PyObject_GetItem(r1182, r1196)
    dec_ref r1182
    if is_error(r1197) goto L1042 (error at run:573) else goto L598
L598:
    index_upper = r1197
    r1198 = modTof.globals :: static
    r1199 = 'norm'
    r1200 = CPyDict_GetItem(r1198, r1199)
    if is_error(r1200) goto L1043 (error at run:575) else goto L599
L599:
    r1201 = load_address _Py_NoneStruct
    r1202 = PySlice_New(index_lower, index_upper, r1201)
    dec_ref index_upper
    if is_error(r1202) goto L1044 (error at run:575) else goto L600
L600:
    r1203 = PyObject_GetItem(t_binned, r1202)
    dec_ref r1202
    if is_error(r1203) goto L1044 (error at run:575) else goto L601
L601:
    r1204 = PyObject_GetItem(time, i)
    dec_ref i
    if is_error(r1204) goto L1045 (error at run:575) else goto L602
L602:
    r1205 = self.sigma_smoothing
    r1206 = 'pdf'
    r1207 = CPyObject_GetAttr(r1200, r1206)
    dec_ref r1200
    if is_error(r1207) goto L1046 (error at run:575) else goto L603
L603:
    r1208 = [r1203, r1204, r1205]
    r1209 = load_address r1208
    r1210 = ('loc', 'scale')
    r1211 = _PyObject_Vectorcall(r1207, r1209, 1, r1210)
    dec_ref r1207
    if is_error(r1211) goto L1046 (error at run:575) else goto L604
L604:
    dec_ref r1203
    dec_ref r1204
    dec_ref r1205
    r1212 = self.sigma_smoothing
    r1213 = PyNumber_Multiply(r1211, r1212)
    dec_ref r1211
    dec_ref r1212
    if is_error(r1213) goto L1047 (error at run:575) else goto L605
L605:
    r1214 = PyNumber_Multiply(r1213, y)
    dec_ref r1213
    dec_ref y
    if is_error(r1214) goto L1048 (error at run:575) else goto L606
L606:
    r1215 = object 4
    r1216 = PyNumber_TrueDivide(r1214, r1215)
    dec_ref r1214
    if is_error(r1216) goto L1048 (error at run:575) else goto L607
L607:
    gaussian = r1216
    r1217 = 0
    r1218 = object 0
    inc_ref r1218
    i = r1218
    r1219 = PyObject_GetIter(gaussian)
    dec_ref gaussian
    if is_error(r1219) goto L1049 (error at run:577) else goto L608
L608:
    r1220 = PyIter_Next(r1219)
    if is_error(r1220) goto L1050 else goto L609
L609:
    y_add = r1220
    r1221 = PyNumber_Add(index_lower, i)
    if is_error(r1221) goto L1051 (error at run:578) else goto L610
L610:
    r1222 = PyObject_GetItem(y_binned, r1221)
    dec_ref r1221
    if is_error(r1222) goto L1051 (error at run:578) else goto L611
L611:
    r1223 = PyNumber_Add(r1222, y_add)
    dec_ref r1222
    if is_error(r1223) goto L1051 (error at run:578) else goto L612
L612:
    r1224 = self.max_pmt_current_output
    r1225 = PyObject_RichCompare(r1223, r1224, 0)
    dec_ref r1223
    dec_ref r1224
    if is_error(r1225) goto L1051 (error at run:578) else goto L613
L613:
    r1226 = PyObject_IsTrue(r1225)
    dec_ref r1225
    r1227 = r1226 >= 0 :: signed
    if not r1227 goto L1051 (error at run:578) else goto L614 :: bool
L614:
    r1228 = truncate r1226: i32 to builtins.bool
    if r1228 goto L615 else goto L1052 :: bool
L615:
    r1229 = PyNumber_Add(index_lower, i)
    dec_ref i
    if is_error(r1229) goto L1053 (error at run:579) else goto L616
L616:
    r1230 = PyObject_GetItem(y_binned, r1229)
    if is_error(r1230) goto L1054 (error at run:579) else goto L617
L617:
    r1231 = PyNumber_InPlaceAdd(r1230, y_add)
    dec_ref r1230
    dec_ref y_add
    if is_error(r1231) goto L1055 (error at run:579) else goto L618
L618:
    r1232 = PyObject_SetItem(y_binned, r1229, r1231)
    dec_ref r1229
    dec_ref r1231
    r1233 = r1232 >= 0 :: signed
    if not r1233 goto L1056 (error at run:579) else goto L621 :: bool
L619:
    r1234 = self.max_pmt_current_output
    r1235 = PyNumber_Add(index_lower, i)
    dec_ref i
    if is_error(r1235) goto L1057 (error at run:581) else goto L620
L620:
    r1236 = PyObject_SetItem(y_binned, r1235, r1234)
    dec_ref r1235
    dec_ref r1234
    r1237 = r1236 >= 0 :: signed
    if not r1237 goto L1056 (error at run:581) else goto L621 :: bool
L621:
    r1238 = r1217 + 2
    r1217 = r1238
    r1239 = box(short_int, r1238)
    i = r1239
    goto L608
L622:
    r1240 = CPy_NoErrOccured()
    if not r1240 goto L1058 (error at run:577) else goto L623 :: bool
L623:
    r1241 = r1034 + 2
    r1034 = r1241
    r1242 = box(short_int, r1241)
    i = r1242
    goto L508
L624:
    r1243 = CPy_NoErrOccured()
    if not r1243 goto L1059 (error at run:552) else goto L625 :: bool
L625:
    r1244 = 'time'
    r1245 = 'current'
    r1246 = CPyDict_Build(2, r1244, t_binned, r1245, y_binned)
    dec_ref t_binned
    dec_ref y_binned
    if is_error(r1246) goto L1060 (error at run:583) else goto L626
L626:
    r1247 = pandas :: module
    r1248 = 'DataFrame'
    r1249 = CPyObject_GetAttr(r1247, r1248)
    if is_error(r1249) goto L1061 (error at run:583) else goto L627
L627:
    r1250 = [r1246]
    r1251 = load_address r1250
    r1252 = _PyObject_Vectorcall(r1249, r1251, 1, 0)
    dec_ref r1249
    if is_error(r1252) goto L1061 (error at run:583) else goto L628
L628:
    dec_ref r1246
    r1253 = 'time'
    r1254 = PyList_New(1)
    if is_error(r1254) goto L1062 (error at run:583) else goto L629
L629:
    r1255 = get_element_ptr r1254 ob_item :: PyListObject
    r1256 = load_mem r1255 :: ptr*
    inc_ref r1253
    set_mem r1256, r1253 :: builtins.object*
    r1257 = 'sort_values'
    r1258 = CPyObject_GetAttr(r1252, r1257)
    dec_ref r1252
    if is_error(r1258) goto L1063 (error at run:583) else goto L630
L630:
    r1259 = [r1254]
    r1260 = load_address r1259
    r1261 = ('by',)
    r1262 = _PyObject_Vectorcall(r1258, r1260, 0, r1261)
    dec_ref r1258
    if is_error(r1262) goto L1063 (error at run:583) else goto L631
L631:
    dec_ref r1254
    df = r1262
    r1263 = 'Formatting PWL dataframe...'
    r1264 = builtins :: module
    r1265 = 'print'
    r1266 = CPyObject_GetAttr(r1264, r1265)
    if is_error(r1266) goto L1064 (error at run:584) else goto L632
L632:
    r1267 = [r1263]
    r1268 = load_address r1267
    r1269 = _PyObject_Vectorcall(r1266, r1268, 1, 0)
    dec_ref r1266
    if is_error(r1269) goto L1064 (error at run:584) else goto L1065
L633:
    r1270 = PyList_New(0)
    if is_error(r1270) goto L1064 (error at run:585) else goto L634
L634:
    fill_data = r1270
    r1271 = 'time'
    r1272 = PyObject_GetItem(df, r1271)
    if is_error(r1272) goto L1066 (error at run:587) else goto L635
L635:
    r1273 = 'iloc'
    r1274 = CPyObject_GetAttr(r1272, r1273)
    dec_ref r1272
    if is_error(r1274) goto L1066 (error at run:587) else goto L636
L636:
    r1275 = object 0
    r1276 = PyObject_GetItem(r1274, r1275)
    dec_ref r1274
    if is_error(r1276) goto L1066 (error at run:587) else goto L637
L637:
    r1277 = self.output_bin_width
    r1278 = object 5
    r1279 = PyNumber_TrueDivide(r1277, r1278)
    dec_ref r1277
    if is_error(r1279) goto L1067 (error at run:587) else goto L638
L638:
    r1280 = PyNumber_Subtract(r1276, r1279)
    dec_ref r1276
    dec_ref r1279
    if is_error(r1280) goto L1066 (error at run:587) else goto L639
L639:
    r1281 = PyList_New(2)
    if is_error(r1281) goto L1068 (error at run:587) else goto L640
L640:
    r1282 = object 0
    r1283 = get_element_ptr r1281 ob_item :: PyListObject
    r1284 = load_mem r1283 :: ptr*
    set_mem r1284, r1280 :: builtins.object*
    r1285 = r1284 + 8
    inc_ref r1282
    set_mem r1285, r1282 :: builtins.object*
    r1286 = 'append'
    r1287 = CPyObject_CallMethodObjArgs(fill_data, r1286, r1281, 0)
    dec_ref r1281
    if is_error(r1287) goto L1066 (error at run:587) else goto L1069
L641:
    r1288 = 'time'
    r1289 = PyObject_GetItem(df, r1288)
    if is_error(r1289) goto L1066 (error at run:588) else goto L642
L642:
    r1290 = CPyObject_Size(r1289)
    dec_ref r1289
    if is_error(r1290) goto L1066 (error at run:588) else goto L643
L643:
    r1291 = box(int, r1290)
    r1292 = object 1
    r1293 = PyNumber_Subtract(r1291, r1292)
    dec_ref r1291
    if is_error(r1293) goto L1066 (error at run:588) else goto L644
L644:
    r1294 = 0
    inc_ref r1294 :: int
    r1295 = box(int, r1294)
    i = r1295
L645:
    inc_ref r1294 :: int
    r1296 = box(int, r1294)
    r1297 = PyObject_RichCompare(r1296, r1293, 0)
    dec_ref r1296
    if is_error(r1297) goto L1070 (error at run:588) else goto L646
L646:
    r1298 = PyObject_IsTrue(r1297)
    dec_ref r1297
    r1299 = r1298 >= 0 :: signed
    if not r1299 goto L1070 (error at run:588) else goto L647 :: bool
L647:
    r1300 = truncate r1298: i32 to builtins.bool
    if r1300 goto L648 else goto L1071 :: bool
L648:
    r1301 = 'time'
    r1302 = PyObject_GetItem(df, r1301)
    if is_error(r1302) goto L1070 (error at run:589) else goto L649
L649:
    r1303 = 'iloc'
    r1304 = CPyObject_GetAttr(r1302, r1303)
    dec_ref r1302
    if is_error(r1304) goto L1070 (error at run:589) else goto L650
L650:
    r1305 = PyObject_GetItem(r1304, i)
    dec_ref r1304
    if is_error(r1305) goto L1070 (error at run:589) else goto L651
L651:
    r1306 = 'time'
    r1307 = PyObject_GetItem(df, r1306)
    if is_error(r1307) goto L1072 (error at run:589) else goto L652
L652:
    r1308 = 'iloc'
    r1309 = CPyObject_GetAttr(r1307, r1308)
    dec_ref r1307
    if is_error(r1309) goto L1072 (error at run:589) else goto L653
L653:
    r1310 = object 1
    r1311 = PyNumber_Add(i, r1310)
    if is_error(r1311) goto L1073 (error at run:589) else goto L654
L654:
    r1312 = PyObject_GetItem(r1309, r1311)
    dec_ref r1309
    dec_ref r1311
    if is_error(r1312) goto L1072 (error at run:589) else goto L655
L655:
    r1313 = PyNumber_Subtract(r1305, r1312)
    dec_ref r1305
    dec_ref r1312
    if is_error(r1313) goto L1070 (error at run:589) else goto L656
L656:
    r1314 = PyNumber_Absolute(r1313)
    dec_ref r1313
    if is_error(r1314) goto L1070 (error at run:589) else goto L657
L657:
    r1315 = self.output_bin_width
    r1316 = PyObject_RichCompare(r1314, r1315, 4)
    dec_ref r1314
    dec_ref r1315
    if is_error(r1316) goto L1070 (error at run:589) else goto L658
L658:
    r1317 = PyObject_IsTrue(r1316)
    dec_ref r1316
    r1318 = r1317 >= 0 :: signed
    if not r1318 goto L1070 (error at run:589) else goto L659 :: bool
L659:
    r1319 = truncate r1317: i32 to builtins.bool
    if r1319 goto L660 else goto L1074 :: bool
L660:
    r1320 = 'time'
    r1321 = PyObject_GetItem(df, r1320)
    if is_error(r1321) goto L1070 (error at run:590) else goto L661
L661:
    r1322 = 'iloc'
    r1323 = CPyObject_GetAttr(r1321, r1322)
    dec_ref r1321
    if is_error(r1323) goto L1070 (error at run:590) else goto L662
L662:
    r1324 = PyObject_GetItem(r1323, i)
    dec_ref r1323
    if is_error(r1324) goto L1070 (error at run:590) else goto L663
L663:
    r1325 = self.output_bin_width
    r1326 = object 5
    r1327 = PyNumber_TrueDivide(r1325, r1326)
    dec_ref r1325
    if is_error(r1327) goto L1075 (error at run:590) else goto L664
L664:
    r1328 = PyNumber_Add(r1324, r1327)
    dec_ref r1324
    dec_ref r1327
    if is_error(r1328) goto L1070 (error at run:590) else goto L665
L665:
    r1329 = PyList_New(2)
    if is_error(r1329) goto L1076 (error at run:590) else goto L666
L666:
    r1330 = object 0
    r1331 = get_element_ptr r1329 ob_item :: PyListObject
    r1332 = load_mem r1331 :: ptr*
    set_mem r1332, r1328 :: builtins.object*
    r1333 = r1332 + 8
    inc_ref r1330
    set_mem r1333, r1330 :: builtins.object*
    r1334 = 'append'
    r1335 = CPyObject_CallMethodObjArgs(fill_data, r1334, r1329, 0)
    dec_ref r1329
    if is_error(r1335) goto L1070 (error at run:590) else goto L1077
L667:
    r1336 = 'time'
    r1337 = PyObject_GetItem(df, r1336)
    if is_error(r1337) goto L1070 (error at run:591) else goto L668
L668:
    r1338 = 'iloc'
    r1339 = CPyObject_GetAttr(r1337, r1338)
    dec_ref r1337
    if is_error(r1339) goto L1070 (error at run:591) else goto L669
L669:
    r1340 = object 1
    r1341 = PyNumber_Add(i, r1340)
    dec_ref i
    if is_error(r1341) goto L1078 (error at run:591) else goto L670
L670:
    r1342 = PyObject_GetItem(r1339, r1341)
    dec_ref r1339
    dec_ref r1341
    if is_error(r1342) goto L1079 (error at run:591) else goto L671
L671:
    r1343 = self.output_bin_width
    r1344 = object 5
    r1345 = PyNumber_TrueDivide(r1343, r1344)
    dec_ref r1343
    if is_error(r1345) goto L1080 (error at run:591) else goto L672
L672:
    r1346 = PyNumber_Subtract(r1342, r1345)
    dec_ref r1342
    dec_ref r1345
    if is_error(r1346) goto L1079 (error at run:591) else goto L673
L673:
    r1347 = PyList_New(2)
    if is_error(r1347) goto L1081 (error at run:591) else goto L674
L674:
    r1348 = object 0
    r1349 = get_element_ptr r1347 ob_item :: PyListObject
    r1350 = load_mem r1349 :: ptr*
    set_mem r1350, r1346 :: builtins.object*
    r1351 = r1350 + 8
    inc_ref r1348
    set_mem r1351, r1348 :: builtins.object*
    r1352 = 'append'
    r1353 = CPyObject_CallMethodObjArgs(fill_data, r1352, r1347, 0)
    dec_ref r1347
    if is_error(r1353) goto L1079 (error at run:591) else goto L1082
L675:
    r1354 = CPyTagged_Add(r1294, 2)
    dec_ref r1294 :: int
    inc_ref r1354 :: int
    r1294 = r1354
    r1355 = box(int, r1354)
    i = r1355
    goto L645
L676:
    r1356 = 'time'
    r1357 = PyObject_GetItem(df, r1356)
    if is_error(r1357) goto L1066 (error at run:592) else goto L677
L677:
    r1358 = 'iloc'
    r1359 = CPyObject_GetAttr(r1357, r1358)
    dec_ref r1357
    if is_error(r1359) goto L1066 (error at run:592) else goto L678
L678:
    r1360 = object -1
    r1361 = PyObject_GetItem(r1359, r1360)
    dec_ref r1359
    if is_error(r1361) goto L1066 (error at run:592) else goto L679
L679:
    r1362 = self.output_bin_width
    r1363 = object 5
    r1364 = PyNumber_TrueDivide(r1362, r1363)
    dec_ref r1362
    if is_error(r1364) goto L1083 (error at run:592) else goto L680
L680:
    r1365 = PyNumber_Add(r1361, r1364)
    dec_ref r1361
    dec_ref r1364
    if is_error(r1365) goto L1066 (error at run:592) else goto L681
L681:
    r1366 = PyList_New(2)
    if is_error(r1366) goto L1084 (error at run:592) else goto L682
L682:
    r1367 = object 0
    r1368 = get_element_ptr r1366 ob_item :: PyListObject
    r1369 = load_mem r1368 :: ptr*
    set_mem r1369, r1365 :: builtins.object*
    r1370 = r1369 + 8
    inc_ref r1367
    set_mem r1370, r1367 :: builtins.object*
    r1371 = 'append'
    r1372 = CPyObject_CallMethodObjArgs(fill_data, r1371, r1366, 0)
    dec_ref r1366
    if is_error(r1372) goto L1066 (error at run:592) else goto L1085
L683:
    r1373 = numpy :: module
    r1374 = 'array'
    r1375 = CPyObject_GetAttr(r1373, r1374)
    if is_error(r1375) goto L1066 (error at run:593) else goto L684
L684:
    r1376 = [fill_data]
    r1377 = load_address r1376
    r1378 = _PyObject_Vectorcall(r1375, r1377, 1, 0)
    dec_ref r1375
    if is_error(r1378) goto L1066 (error at run:593) else goto L685
L685:
    dec_ref fill_data
    fill_data = r1378
    r1379 = 'time'
    r1380 = 'current'
    r1381 = PyList_New(2)
    if is_error(r1381) goto L1066 (error at run:594) else goto L686
L686:
    r1382 = get_element_ptr r1381 ob_item :: PyListObject
    r1383 = load_mem r1382 :: ptr*
    inc_ref r1379
    set_mem r1383, r1379 :: builtins.object*
    r1384 = r1383 + 8
    inc_ref r1380
    set_mem r1384, r1380 :: builtins.object*
    r1385 = pandas :: module
    r1386 = 'DataFrame'
    r1387 = CPyObject_GetAttr(r1385, r1386)
    if is_error(r1387) goto L1086 (error at run:594) else goto L687
L687:
    r1388 = [fill_data, r1381]
    r1389 = load_address r1388
    r1390 = ('columns',)
    r1391 = _PyObject_Vectorcall(r1387, r1389, 1, r1390)
    dec_ref r1387
    if is_error(r1391) goto L1086 (error at run:594) else goto L688
L688:
    dec_ref fill_data
    dec_ref r1381
    fill = r1391
    r1392 = PyList_New(2)
    if is_error(r1392) goto L1087 (error at run:595) else goto L689
L689:
    r1393 = get_element_ptr r1392 ob_item :: PyListObject
    r1394 = load_mem r1393 :: ptr*
    set_mem r1394, fill :: builtins.object*
    r1395 = r1394 + 8
    set_mem r1395, df :: builtins.object*
    r1396 = pandas :: module
    r1397 = 'concat'
    r1398 = CPyObject_GetAttr(r1396, r1397)
    if is_error(r1398) goto L1088 (error at run:595) else goto L690
L690:
    r1399 = box(bool, 1)
    r1400 = [r1392, r1399]
    r1401 = load_address r1400
    r1402 = ('ignore_index',)
    r1403 = _PyObject_Vectorcall(r1398, r1401, 1, r1402)
    dec_ref r1398
    if is_error(r1403) goto L1088 (error at run:595) else goto L691
L691:
    dec_ref r1392
    r1404 = 'time'
    r1405 = PyList_New(1)
    if is_error(r1405) goto L1089 (error at run:595) else goto L692
L692:
    r1406 = get_element_ptr r1405 ob_item :: PyListObject
    r1407 = load_mem r1406 :: ptr*
    inc_ref r1404
    set_mem r1407, r1404 :: builtins.object*
    r1408 = 'sort_values'
    r1409 = CPyObject_GetAttr(r1403, r1408)
    dec_ref r1403
    if is_error(r1409) goto L1090 (error at run:595) else goto L693
L693:
    r1410 = [r1405]
    r1411 = load_address r1410
    r1412 = ('by',)
    r1413 = _PyObject_Vectorcall(r1409, r1411, 0, r1412)
    dec_ref r1409
    if is_error(r1413) goto L1090 (error at run:595) else goto L694
L694:
    dec_ref r1405
    r1414 = 'reset_index'
    r1415 = CPyObject_GetAttr(r1413, r1414)
    dec_ref r1413
    if is_error(r1415) goto L1060 (error at run:595) else goto L695
L695:
    r1416 = box(bool, 1)
    r1417 = [r1416]
    r1418 = load_address r1417
    r1419 = ('drop',)
    r1420 = _PyObject_Vectorcall(r1415, r1418, 0, r1419)
    dec_ref r1415
    if is_error(r1420) goto L1060 (error at run:595) else goto L696
L696:
    df = r1420
    r1421 = 'time'
    r1422 = PyObject_GetItem(df, r1421)
    if is_error(r1422) goto L1064 (error at run:596) else goto L697
L697:
    r1423 = box(float, 1000000000000.0)
    r1424 = PyNumber_TrueDivide(r1422, r1423)
    dec_ref r1422
    dec_ref r1423
    if is_error(r1424) goto L1064 (error at run:596) else goto L698
L698:
    r1425 = 'time'
    r1426 = PyObject_SetItem(df, r1425, r1424)
    dec_ref r1424
    r1427 = r1426 >= 0 :: signed
    if not r1427 goto L1064 (error at run:596) else goto L699 :: bool
L699:
    r1428 = 'time'
    r1429 = 'current'
    r1430 = PyList_New(2)
    if is_error(r1430) goto L1064 (error at run:597) else goto L700
L700:
    r1431 = get_element_ptr r1430 ob_item :: PyListObject
    r1432 = load_mem r1431 :: ptr*
    inc_ref r1428
    set_mem r1432, r1428 :: builtins.object*
    r1433 = r1432 + 8
    inc_ref r1429
    set_mem r1433, r1429 :: builtins.object*
    r1434 = PyObject_GetItem(df, r1430)
    dec_ref df
    dec_ref r1430
    if is_error(r1434) goto L1060 (error at run:597) else goto L701
L701:
    df = r1434
    r1435 = 'monte_carlo_input'
    r1436 = self.num_particles
    r1437 = PyObject_Str(r1436)
    dec_ref r1436
    if is_error(r1437) goto L1064 (error at run:598) else goto L702
L702:
    r1438 = PyUnicode_Concat(r1435, r1437)
    dec_ref r1437
    if is_error(r1438) goto L1064 (error at run:598) else goto L703
L703:
    r1439 = 'ch'
    r1440 = PyUnicode_Concat(r1438, r1439)
    dec_ref r1438
    if is_error(r1440) goto L1064 (error at run:598) else goto L704
L704:
    r1441 = PyObject_Str(ch)
    dec_ref ch
    if is_error(r1441) goto L1091 (error at run:598) else goto L705
L705:
    r1442 = PyUnicode_Concat(r1440, r1441)
    dec_ref r1440
    dec_ref r1441
    if is_error(r1442) goto L1092 (error at run:598) else goto L706
L706:
    r1443 = '_'
    r1444 = PyUnicode_Concat(r1442, r1443)
    dec_ref r1442
    if is_error(r1444) goto L1092 (error at run:598) else goto L707
L707:
    r1445 = modTof.globals :: static
    r1446 = 'datetime'
    r1447 = CPyDict_GetItem(r1445, r1446)
    if is_error(r1447) goto L1093 (error at run:598) else goto L708
L708:
    r1448 = 'now'
    r1449 = CPyObject_CallMethodObjArgs(r1447, r1448, 0)
    dec_ref r1447
    if is_error(r1449) goto L1093 (error at run:598) else goto L709
L709:
    r1450 = '%m_%d_%Y'
    r1451 = 'strftime'
    r1452 = CPyObject_CallMethodObjArgs(r1449, r1451, r1450, 0)
    dec_ref r1449
    if is_error(r1452) goto L1093 (error at run:598) else goto L710
L710:
    r1453 = PyObject_Str(r1452)
    dec_ref r1452
    if is_error(r1453) goto L1093 (error at run:598) else goto L711
L711:
    r1454 = PyUnicode_Concat(r1444, r1453)
    dec_ref r1444
    dec_ref r1453
    if is_error(r1454) goto L1092 (error at run:598) else goto L712
L712:
    r1455 = '.txt'
    r1456 = PyUnicode_Concat(r1454, r1455)
    dec_ref r1454
    if is_error(r1456) goto L1092 (error at run:598) else goto L713
L713:
    r1457 = '%.13f'
    r1458 = ' '
    r1459 = 'to_csv'
    r1460 = CPyObject_GetAttr(df, r1459)
    dec_ref df
    if is_error(r1460) goto L1094 (error at run:598) else goto L714
L714:
    r1461 = box(bool, 0)
    r1462 = box(bool, 0)
    r1463 = [r1456, r1457, r1461, r1462, r1458]
    r1464 = load_address r1463
    r1465 = ('float_format', 'header', 'index', 'sep')
    r1466 = _PyObject_Vectorcall(r1460, r1464, 1, r1465)
    dec_ref r1460
    if is_error(r1466) goto L1094 (error at run:598) else goto L1095
L715:
    dec_ref r1456
L716:
    r1467 = r989 + 2
    r989 = r1467
    r1468 = r996 + 2
    r996 = r1468
    r1469 = r1003 + 2
    r1003 = r1469
    goto L500
L717:
    r1470 = 'Done!'
    r1471 = builtins :: module
    r1472 = 'print'
    r1473 = CPyObject_GetAttr(r1471, r1472)
    if is_error(r1473) goto L720 (error at run:599) else goto L718
L718:
    r1474 = [r1470]
    r1475 = load_address r1474
    r1476 = _PyObject_Vectorcall(r1473, r1475, 1, 0)
    dec_ref r1473
    if is_error(r1476) goto L720 (error at run:599) else goto L1096
L719:
    r1477 = box(None, 1)
    inc_ref r1477
    return r1477
L720:
    r1478 = <error> :: object
    return r1478
L721:
    dec_ref r15
    goto L7
L722:
    dec_ref r19
    goto L720
L723:
    dec_ref r29
    goto L720
L724:
    dec_ref r35
    goto L15
L725:
    dec_ref r42
    goto L720
L726:
    dec_ref r48
    goto L20
L727:
    dec_ref logstarttime
    goto L720
L728:
    dec_ref logstarttime
    dec_ref times
    goto L720
L729:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    goto L720
L730:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    goto L720
L731:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    goto L720
L732:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref r67
    goto L720
L733:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref r74
    dec_ref r75
    goto L720
L734:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref r74
    dec_ref r77
    goto L720
L735:
    dec_ref pool__redef__
    goto L65
L736:
    dec_ref pool__redef__
    dec_ref r85
    dec_ref r86
    goto L65
L737:
    dec_ref r93
    goto L64
L738:
    dec_ref r93
    goto L65
L739:
    dec_ref r93
    dec_ref r95
    goto L44
L740:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref r74
    dec_ref r77
    goto L45
L741:
    dec_ref r93
    dec_ref r95
    dec_ref time_i
    goto L47
L742:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref r74
    dec_ref r77
    goto L48
L743:
    dec_ref r93
    dec_ref r95
    dec_ref time_i
    dec_ref point_i
    goto L50
L744:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref r74
    dec_ref r77
    goto L51
L745:
    dec_ref r93
    dec_ref time_i
    dec_ref point_i
    dec_ref photon_i
    dec_ref r102
    goto L53
L746:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref r74
    dec_ref r77
    goto L54
L747:
    dec_ref i
    dec_ref r93
    dec_ref time_i
    dec_ref point_i
    dec_ref photon_i
    goto L65
L748:
    dec_ref r106
    goto L56
L749:
    dec_ref i
    dec_ref r93
    dec_ref time_i
    dec_ref photon_i
    goto L65
L750:
    dec_ref r108
    goto L57
L751:
    dec_ref i
    dec_ref r93
    dec_ref time_i
    goto L65
L752:
    dec_ref r110
    goto L58
L753:
    dec_ref i
    dec_ref r93
    goto L65
L754:
    dec_ref i
    dec_ref r93
    dec_ref r112
    goto L65
L755:
    dec_ref r120
    goto L62
L756:
    dec_ref r126
    dec_ref r127
    dec_ref r128
    goto L71
L757:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref r74
    dec_ref r77
    dec_ref r124
    goto L69
L758:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref r74
    dec_ref r77
    goto L72
L759:
    dec_ref r74
    dec_ref r77
    goto L78
L760:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref r74
    goto L81
L761:
    dec_ref r142
    goto L77
L762:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    goto L79
L763:
    xdec_ref r137
    goto L80
L764:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref logendparticle
    goto L720
L765:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref logendparticle
    dec_ref N
    goto L720
L766:
    dec_ref r160
    goto L91
L767:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref logendparticle
    dec_ref T1_input_times
    goto L720
L768:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    goto L720
L769:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref r211
    goto L720
L770:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    goto L720
L771:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref r227
    goto L720
L772:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    goto L720
L773:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref r243
    goto L720
L774:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    goto L720
L775:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    dec_ref r259
    goto L720
L776:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    dec_ref T1part_ids
    goto L720
L777:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    dec_ref T1part_ids
    dec_ref r273
    goto L720
L778:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    dec_ref T1part_ids
    dec_ref r286
    goto L720
L779:
    dec_ref logstarttime
    dec_ref times
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    dec_ref T1part_ids
    dec_ref T4points
    goto L720
L780:
    dec_ref logstarttime
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    dec_ref T1part_ids
    dec_ref T4points
    goto L720
L781:
    dec_ref logstarttime
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref r302
    goto L720
L782:
    dec_ref logstarttime
    dec_ref points
    dec_ref photons
    dec_ref particleID
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    goto L720
L783:
    dec_ref logstarttime
    dec_ref points
    dec_ref particleID
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    goto L720
L784:
    dec_ref logstarttime
    dec_ref points
    dec_ref particleID
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    dec_ref r318
    goto L720
L785:
    dec_ref logstarttime
    dec_ref points
    dec_ref particleID
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    dec_ref T4photons
    goto L720
L786:
    dec_ref logstarttime
    dec_ref points
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    dec_ref T4photons
    goto L720
L787:
    dec_ref logstarttime
    dec_ref points
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    dec_ref T4photons
    dec_ref r334
    goto L720
L788:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    dec_ref T4photons
    dec_ref r334
    goto L720
L789:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    dec_ref T4photons
    goto L720
L790:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    dec_ref T4photons
    dec_ref T4part_ids
    goto L720
L791:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    dec_ref T4photons
    dec_ref T4part_ids
    dec_ref r348
    goto L720
L792:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    dec_ref T4photons
    dec_ref T4part_ids
    dec_ref r364
    goto L720
L793:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    dec_ref T4photons
    dec_ref T4part_ids
    dec_ref r373
    goto L720
L794:
    dec_ref r379
    goto L184
L795:
    dec_ref r386
    goto L186
L796:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    dec_ref T4photons
    dec_ref T4part_ids
    dec_ref logstartphoton
    goto L720
L797:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    dec_ref T4photons
    dec_ref T4part_ids
    dec_ref logstartphoton
    dec_ref r394
    goto L720
L798:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    dec_ref T4photons
    dec_ref T4part_ids
    dec_ref logstartphoton
    dec_ref r401
    dec_ref r402
    goto L720
L799:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1points
    dec_ref T1times
    dec_ref T1photons
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    dec_ref T4photons
    dec_ref T4part_ids
    dec_ref logstartphoton
    dec_ref r401
    dec_ref r404
    goto L720
L800:
    dec_ref T1points
    dec_ref T1times
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    dec_ref T4part_ids
    dec_ref pool
    goto L302
L801:
    dec_ref r417
    goto L198
L802:
    dec_ref T1points
    dec_ref T1times
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    dec_ref T4part_ids
    dec_ref pool
    dec_ref r419
    goto L302
L803:
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    dec_ref T4part_ids
    dec_ref pool
    dec_ref r419
    goto L302
L804:
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    dec_ref T4part_ids
    dec_ref pool
    dec_ref r419
    dec_ref r425
    goto L302
L805:
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    dec_ref T4part_ids
    dec_ref pool
    dec_ref r419
    dec_ref r425
    dec_ref r428
    goto L302
L806:
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    dec_ref T4part_ids
    dec_ref pool
    goto L302
L807:
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    dec_ref T4part_ids
    dec_ref pool
    dec_ref T1res
    goto L302
L808:
    dec_ref r445
    goto L207
L809:
    dec_ref r452
    goto L209
L810:
    dec_ref T1part_ids
    dec_ref T4points
    dec_ref T4times
    dec_ref T4part_ids
    dec_ref pool
    dec_ref T1res
    dec_ref r454
    goto L302
L811:
    dec_ref T1part_ids
    dec_ref T4part_ids
    dec_ref pool
    dec_ref T1res
    dec_ref r454
    goto L302
L812:
    dec_ref T1part_ids
    dec_ref T4part_ids
    dec_ref pool
    dec_ref T1res
    dec_ref r454
    dec_ref r460
    goto L302
L813:
    dec_ref T1part_ids
    dec_ref T4part_ids
    dec_ref pool
    dec_ref T1res
    dec_ref r454
    dec_ref r460
    dec_ref r463
    goto L302
L814:
    dec_ref T1part_ids
    dec_ref T4part_ids
    dec_ref T1res
    goto L302
L815:
    dec_ref T1part_ids
    dec_ref T4part_ids
    dec_ref T1res
    dec_ref T4res
    goto L302
L816:
    dec_ref r480
    goto L218
L817:
    dec_ref r487
    goto L220
L818:
    dec_ref T1part_ids
    dec_ref T4part_ids
    dec_ref T4res
    goto L302
L819:
    dec_ref T4part_ids
    dec_ref T4res
    dec_ref r488
    goto L302
L820:
    dec_ref r488
    dec_ref r489
    goto L259
L821:
    dec_ref r488
    dec_ref r489
    dec_ref r490
    goto L259
L822:
    dec_ref T4part_ids
    dec_ref T4res
    dec_ref r488
    dec_ref r489
    dec_ref r491
    goto L302
L823:
    dec_ref T4part_ids
    dec_ref T4res
    dec_ref r488
    dec_ref r489
    dec_ref r491
    dec_ref r492
    goto L226
L824:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logstartphoton
    dec_ref r401
    dec_ref r404
    goto L227
L825:
    dec_ref T4part_ids
    dec_ref T4res
    dec_ref r488
    dec_ref r489
    dec_ref r491
    dec_ref r492
    dec_ref T1hit_PMT
    goto L229
L826:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logstartphoton
    dec_ref r401
    dec_ref r404
    goto L230
L827:
    dec_ref T4part_ids
    dec_ref T4res
    dec_ref r488
    dec_ref r489
    dec_ref r491
    dec_ref r492
    dec_ref T1hit_PMT
    dec_ref T1travel_time
    goto L232
L828:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logstartphoton
    dec_ref r401
    dec_ref r404
    goto L233
L829:
    dec_ref T4part_ids
    dec_ref T4res
    dec_ref r488
    dec_ref r489
    dec_ref r491
    dec_ref r492
    dec_ref T1hit_PMT
    dec_ref T1travel_time
    dec_ref T1tot_dist
    goto L235
L830:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logstartphoton
    dec_ref r401
    dec_ref r404
    goto L236
L831:
    dec_ref T4part_ids
    dec_ref T4res
    dec_ref r488
    dec_ref r489
    dec_ref r491
    dec_ref r492
    dec_ref T1hit_PMT
    dec_ref T1travel_time
    dec_ref T1tot_dist
    dec_ref T1endpt
    goto L238
L832:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logstartphoton
    dec_ref r401
    dec_ref r404
    goto L239
L833:
    dec_ref T4part_ids
    dec_ref T4res
    dec_ref r488
    dec_ref r489
    dec_ref r491
    dec_ref r492
    dec_ref T1hit_PMT
    dec_ref T1travel_time
    dec_ref T1tot_dist
    dec_ref T1endpt
    dec_ref T1bounces
    goto L241
L834:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logstartphoton
    dec_ref r401
    dec_ref r404
    goto L242
L835:
    dec_ref T4part_ids
    dec_ref T4res
    dec_ref r488
    dec_ref r489
    dec_ref r491
    dec_ref T1hit_PMT
    dec_ref T1travel_time
    dec_ref T1tot_dist
    dec_ref T1endpt
    dec_ref T1bounces
    dec_ref T1prop
    dec_ref r505
    goto L244
L836:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logstartphoton
    dec_ref r401
    dec_ref r404
    goto L245
L837:
    dec_ref T4part_ids
    dec_ref T4res
    dec_ref r488
    dec_ref r489
    dec_ref T1travel_time
    dec_ref T1tot_dist
    dec_ref T1endpt
    dec_ref T1bounces
    dec_ref T1prop
    dec_ref T1part_id
    goto L302
L838:
    dec_ref T1travel_time
    dec_ref T1tot_dist
    dec_ref T1endpt
    dec_ref T1bounces
    dec_ref T1prop
    dec_ref T1part_id
    goto L222
L839:
    dec_ref T4part_ids
    dec_ref T4res
    dec_ref r488
    dec_ref r489
    dec_ref T1tot_dist
    dec_ref T1endpt
    dec_ref T1bounces
    dec_ref T1prop
    dec_ref T1part_id
    goto L302
L840:
    dec_ref r511
    goto L249
L841:
    dec_ref T4part_ids
    dec_ref T4res
    dec_ref r488
    dec_ref r489
    dec_ref T1endpt
    dec_ref T1bounces
    dec_ref T1prop
    dec_ref T1part_id
    goto L302
L842:
    dec_ref r514
    goto L251
L843:
    dec_ref T4part_ids
    dec_ref T4res
    dec_ref r488
    dec_ref r489
    dec_ref T1bounces
    dec_ref T1prop
    dec_ref T1part_id
    goto L302
L844:
    dec_ref r517
    goto L253
L845:
    dec_ref T4part_ids
    dec_ref T4res
    dec_ref r488
    dec_ref r489
    dec_ref T1bounces
    dec_ref T1part_id
    goto L302
L846:
    dec_ref r520
    goto L255
L847:
    dec_ref T4part_ids
    dec_ref T4res
    dec_ref r488
    dec_ref r489
    dec_ref T1part_id
    goto L302
L848:
    dec_ref r523
    goto L257
L849:
    dec_ref T4part_ids
    dec_ref T4res
    dec_ref r488
    dec_ref r489
    goto L302
L850:
    dec_ref r526
    goto L222
L851:
    dec_ref T4part_ids
    dec_ref T4res
    goto L302
L852:
    dec_ref T4part_ids
    goto L302
L853:
    dec_ref r529
    goto L302
L854:
    dec_ref r529
    dec_ref r530
    goto L300
L855:
    dec_ref r529
    dec_ref r530
    dec_ref r531
    goto L300
L856:
    dec_ref r529
    dec_ref r530
    dec_ref r532
    goto L302
L857:
    dec_ref r529
    dec_ref r530
    dec_ref r532
    dec_ref r533
    goto L267
L858:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logstartphoton
    dec_ref r401
    dec_ref r404
    goto L268
L859:
    dec_ref r529
    dec_ref r530
    dec_ref r532
    dec_ref r533
    dec_ref T4hit_PMT
    goto L270
L860:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logstartphoton
    dec_ref r401
    dec_ref r404
    goto L271
L861:
    dec_ref r529
    dec_ref r530
    dec_ref r532
    dec_ref r533
    dec_ref T4hit_PMT
    dec_ref T4travel_time
    goto L273
L862:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logstartphoton
    dec_ref r401
    dec_ref r404
    goto L274
L863:
    dec_ref r529
    dec_ref r530
    dec_ref r532
    dec_ref r533
    dec_ref T4hit_PMT
    dec_ref T4travel_time
    dec_ref T4tot_dist
    goto L276
L864:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logstartphoton
    dec_ref r401
    dec_ref r404
    goto L277
L865:
    dec_ref r529
    dec_ref r530
    dec_ref r532
    dec_ref r533
    dec_ref T4hit_PMT
    dec_ref T4travel_time
    dec_ref T4tot_dist
    dec_ref T4endpt
    goto L279
L866:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logstartphoton
    dec_ref r401
    dec_ref r404
    goto L280
L867:
    dec_ref r529
    dec_ref r530
    dec_ref r532
    dec_ref r533
    dec_ref T4hit_PMT
    dec_ref T4travel_time
    dec_ref T4tot_dist
    dec_ref T4endpt
    dec_ref T4bounces
    goto L282
L868:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logstartphoton
    dec_ref r401
    dec_ref r404
    goto L283
L869:
    dec_ref r529
    dec_ref r530
    dec_ref r532
    dec_ref T4hit_PMT
    dec_ref T4travel_time
    dec_ref T4tot_dist
    dec_ref T4endpt
    dec_ref T4bounces
    dec_ref T4prop
    dec_ref r546
    goto L285
L870:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logstartphoton
    dec_ref r401
    dec_ref r404
    goto L286
L871:
    dec_ref r529
    dec_ref r530
    dec_ref T4travel_time
    dec_ref T4tot_dist
    dec_ref T4endpt
    dec_ref T4bounces
    dec_ref T4prop
    dec_ref T4part_id
    goto L302
L872:
    dec_ref T4travel_time
    dec_ref T4tot_dist
    dec_ref T4endpt
    dec_ref T4bounces
    dec_ref T4prop
    dec_ref T4part_id
    goto L263
L873:
    dec_ref r529
    dec_ref r530
    dec_ref T4tot_dist
    dec_ref T4endpt
    dec_ref T4bounces
    dec_ref T4prop
    dec_ref T4part_id
    goto L302
L874:
    dec_ref r552
    goto L290
L875:
    dec_ref r529
    dec_ref r530
    dec_ref T4endpt
    dec_ref T4bounces
    dec_ref T4prop
    dec_ref T4part_id
    goto L302
L876:
    dec_ref r555
    goto L292
L877:
    dec_ref r529
    dec_ref r530
    dec_ref T4bounces
    dec_ref T4prop
    dec_ref T4part_id
    goto L302
L878:
    dec_ref r558
    goto L294
L879:
    dec_ref r529
    dec_ref r530
    dec_ref T4bounces
    dec_ref T4part_id
    goto L302
L880:
    dec_ref r561
    goto L296
L881:
    dec_ref r529
    dec_ref r530
    dec_ref T4part_id
    goto L302
L882:
    dec_ref r564
    goto L298
L883:
    dec_ref r529
    dec_ref r530
    goto L302
L884:
    dec_ref r567
    goto L263
L885:
    dec_ref r572
    dec_ref r573
    dec_ref r574
    goto L308
L886:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logstartphoton
    dec_ref r401
    dec_ref r404
    dec_ref r570
    goto L306
L887:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logstartphoton
    dec_ref r401
    dec_ref r404
    goto L309
L888:
    dec_ref r401
    dec_ref r404
    goto L315
L889:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logstartphoton
    dec_ref r401
    goto L318
L890:
    dec_ref r588
    goto L314
L891:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logstartphoton
    goto L316
L892:
    xdec_ref r583
    goto L317
L893:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logstartphoton
    goto L720
L894:
    dec_ref logstarttime
    dec_ref logendparticle
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logstartphoton
    dec_ref logendtime
    goto L720
L895:
    dec_ref r600
    goto L326
L896:
    dec_ref logstarttime
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logstartphoton
    dec_ref logendtime
    goto L720
L897:
    dec_ref logstarttime
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logstartphoton
    dec_ref logendtime
    dec_ref r601
    goto L720
L898:
    dec_ref logstarttime
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logendtime
    dec_ref pgtime
    goto L720
L899:
    dec_ref logstarttime
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref logendtime
    dec_ref pgtime
    dec_ref r609
    goto L720
L900:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref pgtime
    dec_ref phtime
    goto L720
L901:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref pgtime
    dec_ref phtime
    dec_ref r617
    goto L720
L902:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref phtime
    dec_ref ttime
    goto L720
L903:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref phtime
    dec_ref ttime
    dec_ref r628
    goto L720
L904:
    dec_ref r634
    goto L340
L905:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref ttime
    goto L720
L906:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref ttime
    dec_ref r638
    goto L720
L907:
    dec_ref r644
    goto L345
L908:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    goto L720
L909:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref r648
    goto L720
L910:
    dec_ref r654
    goto L350
L911:
    dec_ref r661
    goto L352
L912:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref r664
    goto L720
L913:
    dec_ref r670
    goto L355
L914:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref r677
    goto L720
L915:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T1photons
    dec_ref T4photons
    dec_ref r677
    dec_ref r680
    goto L720
L916:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T4photons
    dec_ref r677
    dec_ref r680
    dec_ref r689
    goto L720
L917:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T4photons
    dec_ref r677
    dec_ref r680
    goto L720
L918:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T4photons
    dec_ref r677
    dec_ref r680
    dec_ref r695
    goto L720
L919:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T4photons
    dec_ref r677
    dec_ref r680
    dec_ref r700
    goto L720
L920:
    dec_ref r706
    goto L367
L921:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T4photons
    goto L720
L922:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T4photons
    dec_ref r709
    goto L720
L923:
    dec_ref r715
    goto L370
L924:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T4photons
    dec_ref r722
    goto L720
L925:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref T4photons
    dec_ref r722
    dec_ref r725
    goto L720
L926:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref r722
    dec_ref r725
    dec_ref r734
    goto L720
L927:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref r722
    dec_ref r725
    goto L720
L928:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref r722
    dec_ref r725
    dec_ref r740
    goto L720
L929:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref r722
    dec_ref r725
    dec_ref r745
    goto L720
L930:
    dec_ref r751
    goto L382
L931:
    dec_ref T1_input_times
    dec_ref T4_input_times
    goto L720
L932:
    dec_ref r758
    goto L384
L933:
    dec_ref r768
    goto L386
L934:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref signals_channelT1
    goto L720
L935:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref signals_channelT1
    dec_ref signals_channelT4
    goto L720
L936:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref signals_channelT1
    dec_ref signals_channelT4
    dec_ref output_times_channelT1
    goto L720
L937:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref signals_channelT1
    dec_ref signals_channelT4
    dec_ref output_times_channelT1
    dec_ref output_times_channelT4
    goto L720
L938:
    dec_ref T1_input_times
    dec_ref T4_input_times
    dec_ref signals_channelT1
    dec_ref signals_channelT4
    dec_ref output_times_channelT1
    dec_ref output_times_channelT4
    dec_ref signals
    goto L720
L939:
    dec_ref T4_input_times
    dec_ref signals_channelT1
    dec_ref signals_channelT4
    dec_ref output_times_channelT1
    dec_ref output_times_channelT4
    dec_ref signals
    dec_ref output_times
    goto L720
L940:
    dec_ref r775
    goto L401
L941:
    dec_ref T4_input_times
    dec_ref signals_channelT1
    dec_ref signals_channelT4
    dec_ref output_times_channelT1
    dec_ref output_times_channelT4
    dec_ref signals
    dec_ref output_times
    dec_ref r775
    dec_ref t
    goto L720
L942:
    dec_ref T4_input_times
    dec_ref signals_channelT1
    dec_ref signals_channelT4
    dec_ref output_times_channelT1
    dec_ref output_times_channelT4
    dec_ref signals
    dec_ref output_times
    dec_ref r775
    dec_ref t
    dec_ref pmtSignal_i
    goto L720
L943:
    dec_ref r782
    goto L397
L944:
    dec_ref T4_input_times
    dec_ref signals_channelT1
    dec_ref signals_channelT4
    dec_ref output_times_channelT1
    dec_ref output_times_channelT4
    dec_ref signals
    dec_ref output_times
    dec_ref r775
    dec_ref pmtSignal_i
    goto L720
L945:
    dec_ref r786
    goto L399
L946:
    dec_ref r788
    goto L400
L947:
    dec_ref T4_input_times
    dec_ref signals_channelT1
    dec_ref signals_channelT4
    dec_ref output_times_channelT1
    dec_ref output_times_channelT4
    dec_ref signals
    dec_ref output_times
    dec_ref r775
    goto L720
L948:
    dec_ref r790
    goto L393
L949:
    dec_ref signals_channelT1
    dec_ref signals_channelT4
    dec_ref output_times_channelT1
    dec_ref output_times_channelT4
    dec_ref signals
    dec_ref output_times
    goto L720
L950:
    dec_ref r792
    goto L411
L951:
    dec_ref signals_channelT1
    dec_ref signals_channelT4
    dec_ref output_times_channelT1
    dec_ref output_times_channelT4
    dec_ref signals
    dec_ref output_times
    dec_ref t
    dec_ref r792
    goto L720
L952:
    dec_ref signals_channelT1
    dec_ref signals_channelT4
    dec_ref output_times_channelT1
    dec_ref output_times_channelT4
    dec_ref signals
    dec_ref output_times
    dec_ref t
    dec_ref pmtSignal_i
    dec_ref r792
    goto L720
L953:
    dec_ref r799
    goto L407
L954:
    dec_ref signals_channelT1
    dec_ref signals_channelT4
    dec_ref output_times_channelT1
    dec_ref output_times_channelT4
    dec_ref signals
    dec_ref output_times
    dec_ref pmtSignal_i
    dec_ref r792
    goto L720
L955:
    dec_ref r803
    goto L409
L956:
    dec_ref r805
    goto L410
L957:
    dec_ref signals_channelT1
    dec_ref signals_channelT4
    dec_ref output_times_channelT1
    dec_ref output_times_channelT4
    dec_ref signals
    dec_ref output_times
    dec_ref r792
    goto L720
L958:
    dec_ref r807
    goto L403
L959:
    dec_ref signals_channelT1
    dec_ref signals_channelT4
    dec_ref output_times_channelT1
    dec_ref output_times_channelT4
    dec_ref output_times
    goto L720
L960:
    dec_ref signals_channelT1
    dec_ref signals_channelT4
    dec_ref output_times_channelT1
    dec_ref output_times_channelT4
    goto L720
L961:
    dec_ref signals_channelT4
    dec_ref output_times_channelT1
    dec_ref output_times_channelT4
    goto L720
L962:
    dec_ref output_times_channelT1
    dec_ref output_times_channelT4
    goto L720
L963:
    dec_ref output_times_channelT4
    goto L720
L964:
    dec_ref output_extra
    goto L720
L965:
    dec_ref output_both
    goto L720
L966:
    dec_ref output_both
    goto L490
L967:
    dec_ref r893
    goto L449
L968:
    dec_ref output_both
    dec_ref r895
    goto L720
L969:
    dec_ref output_both
    dec_ref r895
    dec_ref r897
    goto L720
L970:
    dec_ref output_both
    dec_ref r895
    dec_ref r897
    dec_ref r899
    goto L720
L971:
    dec_ref output_both
    dec_ref r895
    dec_ref r897
    dec_ref r899
    dec_ref r901
    goto L720
L972:
    dec_ref output_both
    dec_ref r895
    dec_ref r897
    dec_ref r899
    dec_ref r901
    dec_ref r903
    goto L720
L973:
    dec_ref output_both
    dec_ref r906
    goto L720
L974:
    dec_ref output_both
    dec_ref dft1
    goto L720
L975:
    dec_ref output_both
    dec_ref dft1
    dec_ref r914
    goto L720
L976:
    dec_ref output_both
    dec_ref dft1
    dec_ref r914
    dec_ref r916
    goto L720
L977:
    dec_ref output_both
    dec_ref dft1
    dec_ref r914
    dec_ref r916
    dec_ref r918
    goto L720
L978:
    dec_ref output_both
    dec_ref dft1
    dec_ref r914
    dec_ref r916
    dec_ref r918
    dec_ref r920
    goto L720
L979:
    dec_ref output_both
    dec_ref dft1
    dec_ref r914
    dec_ref r916
    dec_ref r918
    dec_ref r920
    dec_ref r922
    goto L720
L980:
    dec_ref output_both
    dec_ref dft1
    dec_ref r925
    goto L720
L981:
    dec_ref output_both
    dec_ref dft1
    dec_ref dft4
    goto L720
L982:
    dec_ref output_both
    dec_ref dft1
    dec_ref dft4
    dec_ref r937
    goto L720
L983:
    dec_ref output_both
    dec_ref dft4
    goto L720
L984:
    dec_ref r951
    goto L477
L985:
    dec_ref output_both
    dec_ref dft4
    dec_ref r957
    goto L720
L986:
    dec_ref r971
    goto L487
L987:
    dec_ref r982
    goto L492
L988:
    dec_ref r983
    goto L720
L989:
    dec_ref r983
    dec_ref r984
    goto L720
L990:
    dec_ref r985
    goto L720
L991:
    dec_ref r985
    dec_ref r990
    goto L720
L992:
    dec_ref r985
    dec_ref r990
    dec_ref r991
    goto L720
L993:
    dec_ref r985
    dec_ref r992
    goto L720
L994:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    goto L717
L995:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref signal
    dec_ref ch
    goto L720
L996:
    dec_ref r1025
    goto L505
L997:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref signal
    dec_ref ch
    dec_ref t_binned
    goto L720
L998:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    goto L720
L999:
    dec_ref i
    dec_ref time
    dec_ref r1036
    goto L624
L1000:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    goto L720
L1001:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref r1038
    goto L720
L1002:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref r1042
    goto L720
L1003:
    dec_ref r1042
    goto L515
L1004:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref lower_bound
    goto L720
L1005:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref lower_bound
    dec_ref r1050
    goto L720
L1006:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref lower_bound
    dec_ref r1054
    goto L720
L1007:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref lower_bound
    dec_ref r1054
    dec_ref r1060
    goto L720
L1008:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref lower_bound
    dec_ref r1054
    dec_ref r1064
    goto L720
L1009:
    dec_ref r1054
    goto L527
L1010:
    dec_ref r1064
    goto L528
L1011:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref lower_bound
    dec_ref upper_bound
    goto L720
L1012:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref upper_bound
    goto L720
L1013:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref upper_bound
    dec_ref r1086
    goto L720
L1014:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref lower_bound
    dec_ref upper_bound
    dec_ref r1091
    goto L720
L1015:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref lower_bound
    dec_ref upper_bound
    dec_ref r1097
    goto L720
L1016:
    dec_ref r1102
    goto L577
L1017:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref lower_bound
    dec_ref upper_bound
    dec_ref r1102
    dec_ref x
    goto L720
L1018:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref lower_bound
    dec_ref upper_bound
    dec_ref r1102
    goto L720
L1019:
    dec_ref r1115
    goto L552
L1020:
    dec_ref r1118
    goto L545
L1021:
    dec_ref x
    goto L545
L1022:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref lower_bound
    dec_ref upper_bound
    dec_ref r1102
    dec_ref x
    dec_ref r1137
    goto L720
L1023:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref lower_bound
    dec_ref upper_bound
    dec_ref r1102
    dec_ref x
    dec_ref index
    goto L720
L1024:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref lower_bound
    dec_ref upper_bound
    dec_ref r1102
    dec_ref x
    dec_ref index
    dec_ref r1150
    goto L720
L1025:
    dec_ref x
    dec_ref index
    goto L545
L1026:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref lower_bound
    dec_ref upper_bound
    dec_ref r1102
    dec_ref index
    goto L720
L1027:
    dec_ref r1162
    goto L576
L1028:
    dec_ref r1165
    goto L545
L1029:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref lower_bound
    dec_ref upper_bound
    dec_ref r1167
    dec_ref i_2
    goto L720
L1030:
    dec_ref lower_bound
    dec_ref i_2
    dec_ref r1170
    goto L586
L1031:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref lower_bound
    dec_ref upper_bound
    dec_ref r1167
    dec_ref i_2
    dec_ref r1170
    goto L720
L1032:
    dec_ref i_2
    goto L585
L1033:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref lower_bound
    dec_ref upper_bound
    dec_ref r1167
    dec_ref r1170
    goto L720
L1034:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref upper_bound
    dec_ref r1167
    goto L720
L1035:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref upper_bound
    dec_ref index_lower
    goto L720
L1036:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref upper_bound
    dec_ref index_lower
    dec_ref r1182
    dec_ref i_3
    goto L720
L1037:
    dec_ref upper_bound
    dec_ref i_3
    dec_ref r1185
    goto L596
L1038:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref upper_bound
    dec_ref index_lower
    dec_ref r1182
    dec_ref i_3
    dec_ref r1185
    goto L720
L1039:
    dec_ref i_3
    goto L595
L1040:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref upper_bound
    dec_ref index_lower
    dec_ref r1182
    dec_ref r1185
    goto L720
L1041:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref index_lower
    dec_ref r1182
    goto L720
L1042:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref index_lower
    goto L720
L1043:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref index_lower
    dec_ref index_upper
    goto L720
L1044:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref index_lower
    dec_ref r1200
    goto L720
L1045:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref index_lower
    dec_ref r1200
    dec_ref r1203
    goto L720
L1046:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref index_lower
    dec_ref r1203
    dec_ref r1204
    dec_ref r1205
    goto L720
L1047:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref y
    dec_ref index_lower
    goto L720
L1048:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref index_lower
    goto L720
L1049:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref index_lower
    goto L720
L1050:
    dec_ref i
    dec_ref index_lower
    dec_ref r1219
    goto L622
L1051:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref index_lower
    dec_ref r1219
    dec_ref y_add
    goto L720
L1052:
    dec_ref y_add
    goto L619
L1053:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref index_lower
    dec_ref r1219
    dec_ref y_add
    goto L720
L1054:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref index_lower
    dec_ref r1219
    dec_ref y_add
    dec_ref r1229
    goto L720
L1055:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref index_lower
    dec_ref r1219
    dec_ref r1229
    goto L720
L1056:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref index_lower
    dec_ref r1219
    goto L720
L1057:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    dec_ref index_lower
    dec_ref r1219
    dec_ref r1234
    goto L720
L1058:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref time
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    dec_ref r1036
    goto L720
L1059:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref t_binned
    dec_ref y_binned
    goto L720
L1060:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    goto L720
L1061:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref r1246
    goto L720
L1062:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref r1252
    goto L720
L1063:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref r1254
    goto L720
L1064:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref df
    goto L720
L1065:
    dec_ref r1269
    goto L633
L1066:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref df
    dec_ref fill_data
    goto L720
L1067:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref df
    dec_ref fill_data
    dec_ref r1276
    goto L720
L1068:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref df
    dec_ref fill_data
    dec_ref r1280
    goto L720
L1069:
    dec_ref r1287
    goto L641
L1070:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref df
    dec_ref fill_data
    dec_ref r1293
    dec_ref r1294 :: int
    goto L720
L1071:
    dec_ref i
    dec_ref r1293
    dec_ref r1294 :: int
    goto L676
L1072:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref df
    dec_ref fill_data
    dec_ref r1293
    dec_ref r1294 :: int
    dec_ref r1305
    goto L720
L1073:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref df
    dec_ref fill_data
    dec_ref r1293
    dec_ref r1294 :: int
    dec_ref r1305
    dec_ref r1309
    goto L720
L1074:
    dec_ref i
    goto L675
L1075:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref df
    dec_ref fill_data
    dec_ref r1293
    dec_ref r1294 :: int
    dec_ref r1324
    goto L720
L1076:
    dec_ref i
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref df
    dec_ref fill_data
    dec_ref r1293
    dec_ref r1294 :: int
    dec_ref r1328
    goto L720
L1077:
    dec_ref r1335
    goto L667
L1078:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref df
    dec_ref fill_data
    dec_ref r1293
    dec_ref r1294 :: int
    dec_ref r1339
    goto L720
L1079:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref df
    dec_ref fill_data
    dec_ref r1293
    dec_ref r1294 :: int
    goto L720
L1080:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref df
    dec_ref fill_data
    dec_ref r1293
    dec_ref r1294 :: int
    dec_ref r1342
    goto L720
L1081:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref df
    dec_ref fill_data
    dec_ref r1293
    dec_ref r1294 :: int
    dec_ref r1346
    goto L720
L1082:
    dec_ref r1353
    goto L675
L1083:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref df
    dec_ref fill_data
    dec_ref r1361
    goto L720
L1084:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref df
    dec_ref fill_data
    dec_ref r1365
    goto L720
L1085:
    dec_ref r1372
    goto L683
L1086:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref df
    dec_ref fill_data
    dec_ref r1381
    goto L720
L1087:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref df
    dec_ref fill
    goto L720
L1088:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref r1392
    goto L720
L1089:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref r1403
    goto L720
L1090:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref ch
    dec_ref r1405
    goto L720
L1091:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref df
    dec_ref r1440
    goto L720
L1092:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref df
    goto L720
L1093:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref df
    dec_ref r1444
    goto L720
L1094:
    dec_ref r985
    dec_ref r992
    dec_ref r997
    dec_ref r1456
    goto L720
L1095:
    dec_ref r1466
    goto L715
L1096:
    dec_ref r1476
    goto L719

def Simulation.time_at_thresh(self, rawtime, rawVoltage, num, thresh, ch):
    self :: modTof.Simulation
    rawtime, rawVoltage, num, thresh, ch :: object
    r0 :: list
    out, r1 :: object
    r2 :: str
    r3 :: object
    r4 :: object[1]
    r5 :: object_ptr
    r6, grad, r7, r8, r9, r10, r11, limit, r12, dtime, r13, dtvoltage, r14 :: object
    r15 :: str
    r16 :: object
    r17 :: object[1]
    r18 :: object_ptr
    r19, tdiff, r20, first_particle, r21, r22, r23, r24, r25, condition_0, r26, r27, r28, r29, r30, r31, condition, r32, count, r33, start_index :: object
    r34 :: int
    r35 :: object
    r36 :: int
    r37, i, r38, r39 :: object
    r40 :: i32
    r41 :: bit
    r42 :: bool
    r43, r44, r45 :: object
    r46 :: i32
    r47 :: bit
    r48 :: bool
    r49 :: object
    r50 :: str
    r51 :: object
    r52 :: object[1]
    r53 :: object_ptr
    r54, r55 :: object
    r56 :: i32
    r57 :: bit
    r58 :: bool
    r59 :: object
    r60 :: i32
    r61 :: bit
    r62 :: bool
    r63 :: i32
    r64 :: bit
    r65 :: bool
    r66, r67, r68, r69, r70, r71, r72, times, r73, r74, r75, r76, r77, Voltages, r78, r79 :: object
    r80 :: int
    r81, r82, r83 :: object
    r84 :: i32
    r85 :: bit
    r86 :: bool
    r87 :: int
    r88, r89, r90 :: object
    r91 :: i32
    r92 :: bit
    r93 :: bool
    r94 :: object
    r95 :: str
    r96, r97 :: object
    r98 :: object[3]
    r99 :: object_ptr
    r100, r101, r102, r103 :: object
    r104 :: bool
    m, r105 :: object
    r106 :: bool
    b, r107 :: object
    r108 :: bool
    r109, r110 :: object
    r111 :: str
    r112, r113, r114 :: object
    r115 :: int
    r116 :: object
    r117, r118, r119 :: str
    r120 :: object
    r121 :: str
    r122 :: object
    r123 :: object[5]
    r124 :: object_ptr
    r125, r126 :: object
    r127 :: i32
    r128 :: bit
    r129 :: bool
    r130, r131, r132 :: str
    r133 :: object
    r134 :: str
    r135 :: object
    r136 :: object[1]
    r137 :: object_ptr
    r138 :: object
    r139 :: str
    r140 :: object
    r141 :: str
    r142 :: object
    r143 :: object[1]
    r144 :: object_ptr
    r145, r146 :: object
    r147 :: str
    r148 :: object
    r149 :: object[1]
    r150 :: object_ptr
    r151, r152 :: object
L0:
    r0 = PyList_New(0)
    if is_error(r0) goto L84 (error at time_at_thresh:606) else goto L1
L1:
    out = r0
    r1 = numpy :: module
    r2 = 'gradient'
    r3 = CPyObject_GetAttr(r1, r2)
    if is_error(r3) goto L85 (error at time_at_thresh:607) else goto L2
L2:
    r4 = [rawVoltage]
    r5 = load_address r4
    r6 = _PyObject_Vectorcall(r3, r5, 1, 0)
    dec_ref r3
    if is_error(r6) goto L85 (error at time_at_thresh:607) else goto L3
L3:
    grad = r6
    r7 = object 0
    r8 = PyObject_RichCompare(grad, r7, 4)
    if is_error(r8) goto L86 (error at time_at_thresh:608) else goto L4
L4:
    r9 = box(float, 0.1)
    r10 = PyObject_RichCompare(grad, r9, 5)
    dec_ref r9
    if is_error(r10) goto L87 (error at time_at_thresh:608) else goto L5
L5:
    r11 = PyNumber_And(r8, r10)
    dec_ref r8
    dec_ref r10
    if is_error(r11) goto L86 (error at time_at_thresh:608) else goto L6
L6:
    limit = r11
    r12 = PyObject_GetItem(rawtime, limit)
    if is_error(r12) goto L88 (error at time_at_thresh:609) else goto L7
L7:
    dtime = r12
    r13 = PyObject_GetItem(rawVoltage, limit)
    dec_ref limit
    if is_error(r13) goto L89 (error at time_at_thresh:610) else goto L8
L8:
    dtvoltage = r13
    r14 = numpy :: module
    r15 = 'diff'
    r16 = CPyObject_GetAttr(r14, r15)
    if is_error(r16) goto L90 (error at time_at_thresh:611) else goto L9
L9:
    r17 = [dtime]
    r18 = load_address r17
    r19 = _PyObject_Vectorcall(r16, r18, 1, 0)
    dec_ref r16
    if is_error(r19) goto L90 (error at time_at_thresh:611) else goto L10
L10:
    tdiff = r19
    r20 = box(bool, 1)
    inc_ref r20
    first_particle = r20
    r21 = object 0
    r22 = PyObject_RichCompare(grad, r21, 4)
    if is_error(r22) goto L91 (error at time_at_thresh:613) else goto L11
L11:
    r23 = box(float, 0.001)
    r24 = PyObject_RichCompare(grad, r23, 0)
    dec_ref grad
    dec_ref r23
    if is_error(r24) goto L92 (error at time_at_thresh:613) else goto L12
L12:
    r25 = PyNumber_And(r22, r24)
    dec_ref r22
    dec_ref r24
    if is_error(r25) goto L93 (error at time_at_thresh:613) else goto L13
L13:
    condition_0 = r25
    r26 = self.seperation_time
    r27 = box(float, 1000000000000.0)
    r28 = PyNumber_TrueDivide(r26, r27)
    dec_ref r26
    dec_ref r27
    if is_error(r28) goto L94 (error at time_at_thresh:614) else goto L14
L14:
    r29 = object 10
    r30 = PyNumber_TrueDivide(r28, r29)
    dec_ref r28
    if is_error(r30) goto L94 (error at time_at_thresh:614) else goto L15
L15:
    r31 = PyObject_RichCompare(tdiff, r30, 4)
    dec_ref r30
    if is_error(r31) goto L94 (error at time_at_thresh:614) else goto L16
L16:
    condition = r31
    r32 = object 0
    inc_ref r32
    count = r32
    r33 = object 0
    inc_ref r33
    start_index = r33
    r34 = CPyObject_Size(tdiff)
    dec_ref tdiff
    if is_error(r34) goto L95 (error at time_at_thresh:617) else goto L17
L17:
    r35 = box(int, r34)
    r36 = 0
    inc_ref r36 :: int
    r37 = box(int, r36)
    i = r37
L18:
    inc_ref r36 :: int
    r38 = box(int, r36)
    r39 = PyObject_RichCompare(r38, r35, 0)
    dec_ref r38
    if is_error(r39) goto L96 (error at time_at_thresh:617) else goto L19
L19:
    r40 = PyObject_IsTrue(r39)
    dec_ref r39
    r41 = r40 >= 0 :: signed
    if not r41 goto L96 (error at time_at_thresh:617) else goto L20 :: bool
L20:
    r42 = truncate r40: i32 to builtins.bool
    if r42 goto L21 else goto L97 :: bool
L21:
    r43 = object 1
    r44 = PyNumber_Subtract(num, r43)
    if is_error(r44) goto L96 (error at time_at_thresh:618) else goto L22
L22:
    r45 = PyObject_RichCompare(count, r44, 4)
    dec_ref r44
    if is_error(r45) goto L96 (error at time_at_thresh:618) else goto L23
L23:
    r46 = PyObject_IsTrue(r45)
    dec_ref r45
    r47 = r46 >= 0 :: signed
    if not r47 goto L96 (error at time_at_thresh:618) else goto L24 :: bool
L24:
    r48 = truncate r46: i32 to builtins.bool
    if r48 goto L98 else goto L28 :: bool
L25:
    r49 = numpy :: module
    r50 = 'array'
    r51 = CPyObject_GetAttr(r49, r50)
    if is_error(r51) goto L85 (error at time_at_thresh:619) else goto L26
L26:
    r52 = [out]
    r53 = load_address r52
    r54 = _PyObject_Vectorcall(r51, r53, 1, 0)
    dec_ref r51
    if is_error(r54) goto L85 (error at time_at_thresh:619) else goto L27
L27:
    dec_ref out
    return r54
L28:
    r55 = PyObject_GetItem(condition, i)
    if is_error(r55) goto L96 (error at time_at_thresh:620) else goto L29
L29:
    r56 = PyObject_IsTrue(r55)
    dec_ref r55
    r57 = r56 >= 0 :: signed
    if not r57 goto L96 (error at time_at_thresh:620) else goto L30 :: bool
L30:
    r58 = truncate r56: i32 to builtins.bool
    if r58 goto L34 else goto L31 :: bool
L31:
    r59 = PyObject_GetItem(condition_0, i)
    if is_error(r59) goto L96 (error at time_at_thresh:620) else goto L32
L32:
    r60 = PyObject_IsTrue(r59)
    dec_ref r59
    r61 = r60 >= 0 :: signed
    if not r61 goto L96 (error at time_at_thresh:620) else goto L33 :: bool
L33:
    r62 = truncate r60: i32 to builtins.bool
    if r62 goto L34 else goto L99 :: bool
L34:
    r63 = PyObject_IsTrue(first_particle)
    r64 = r63 >= 0 :: signed
    if not r64 goto L96 (error at time_at_thresh:612) else goto L35 :: bool
L35:
    r65 = truncate r63: i32 to builtins.bool
    if r65 goto L100 else goto L37 :: bool
L36:
    r66 = box(bool, 0)
    inc_ref r66
    condition_0 = r66
    r67 = box(bool, 0)
    inc_ref r67
    first_particle = r67
L37:
    r68 = object 1
    r69 = PyNumber_Add(i, r68)
    if is_error(r69) goto L96 (error at time_at_thresh:624) else goto L38
L38:
    r70 = load_address _Py_NoneStruct
    r71 = PySlice_New(start_index, r69, r70)
    dec_ref r69
    if is_error(r71) goto L96 (error at time_at_thresh:624) else goto L39
L39:
    r72 = PyObject_GetItem(dtime, r71)
    dec_ref r71
    if is_error(r72) goto L96 (error at time_at_thresh:624) else goto L40
L40:
    times = r72
    r73 = object 1
    r74 = PyNumber_Add(i, r73)
    if is_error(r74) goto L101 (error at time_at_thresh:625) else goto L41
L41:
    r75 = load_address _Py_NoneStruct
    r76 = PySlice_New(start_index, r74, r75)
    dec_ref start_index
    dec_ref r74
    if is_error(r76) goto L102 (error at time_at_thresh:625) else goto L42
L42:
    r77 = PyObject_GetItem(dtvoltage, r76)
    dec_ref r76
    if is_error(r77) goto L102 (error at time_at_thresh:625) else goto L43
L43:
    Voltages = r77
    r78 = object 1
    r79 = PyNumber_Add(i, r78)
    dec_ref i
    if is_error(r79) goto L103 (error at time_at_thresh:626) else goto L44
L44:
    start_index = r79
    r80 = CPyObject_Size(times)
    if is_error(r80) goto L104 (error at time_at_thresh:627) else goto L45
L45:
    r81 = box(int, r80)
    r82 = object 1
    r83 = PyObject_RichCompare(r81, r82, 0)
    dec_ref r81
    if is_error(r83) goto L104 (error at time_at_thresh:627) else goto L46
L46:
    r84 = PyObject_IsTrue(r83)
    dec_ref r83
    r85 = r84 >= 0 :: signed
    if not r85 goto L104 (error at time_at_thresh:627) else goto L47 :: bool
L47:
    r86 = truncate r84: i32 to builtins.bool
    if r86 goto L105 else goto L48 :: bool
L48:
    r87 = CPyObject_Size(Voltages)
    if is_error(r87) goto L104 (error at time_at_thresh:627) else goto L49
L49:
    r88 = box(int, r87)
    r89 = object 1
    r90 = PyObject_RichCompare(r88, r89, 0)
    dec_ref r88
    if is_error(r90) goto L104 (error at time_at_thresh:627) else goto L50
L50:
    r91 = PyObject_IsTrue(r90)
    dec_ref r90
    r92 = r91 >= 0 :: signed
    if not r92 goto L104 (error at time_at_thresh:627) else goto L51 :: bool
L51:
    r93 = truncate r91: i32 to builtins.bool
    if r93 goto L105 else goto L52 :: bool
L52:
    r94 = numpy :: module
    r95 = 'polyfit'
    r96 = CPyObject_GetAttr(r94, r95)
    if is_error(r96) goto L104 (error at time_at_thresh:629) else goto L53
L53:
    r97 = object 1
    r98 = [times, Voltages, r97]
    r99 = load_address r98
    r100 = ('deg',)
    r101 = _PyObject_Vectorcall(r96, r99, 2, r100)
    dec_ref r96
    if is_error(r101) goto L104 (error at time_at_thresh:629) else goto L54
L54:
    dec_ref times
    dec_ref Voltages
    r102 = PyObject_GetIter(r101)
    dec_ref r101
    if is_error(r102) goto L106 (error at time_at_thresh:629) else goto L55
L55:
    r103 = PyIter_Next(r102)
    if is_error(r103) goto L107 else goto L58
L56:
    r104 = raise ValueError('not enough values to unpack')
    if not r104 goto L84 (error at time_at_thresh:629) else goto L57 :: bool
L57:
    unreachable
L58:
    m = r103
    r105 = PyIter_Next(r102)
    if is_error(r105) goto L108 else goto L61
L59:
    r106 = raise ValueError('not enough values to unpack')
    if not r106 goto L84 (error at time_at_thresh:629) else goto L60 :: bool
L60:
    unreachable
L61:
    b = r105
    r107 = PyIter_Next(r102)
    dec_ref r102
    if is_error(r107) goto L64 else goto L109
L62:
    r108 = raise ValueError('too many values to unpack')
    if not r108 goto L84 (error at time_at_thresh:629) else goto L63 :: bool
L63:
    unreachable
L64:
    r109 = PyNumber_Subtract(thresh, b)
    dec_ref b
    if is_error(r109) goto L110 (error at time_at_thresh:633) else goto L65
L65:
    r110 = PyNumber_TrueDivide(r109, m)
    dec_ref r109
    dec_ref m
    if is_error(r110) goto L106 (error at time_at_thresh:633) else goto L66
L66:
    r111 = 'append'
    r112 = CPyObject_CallMethodObjArgs(out, r111, r110, 0)
    dec_ref r110
    if is_error(r112) goto L106 (error at time_at_thresh:633) else goto L111
L67:
    r113 = object 1
    r114 = PyNumber_InPlaceAdd(count, r113)
    dec_ref count
    if is_error(r114) goto L112 (error at time_at_thresh:634) else goto L68
L68:
    count = r114
L69:
    r115 = CPyTagged_Add(r36, 2)
    dec_ref r36 :: int
    inc_ref r115 :: int
    r36 = r115
    r116 = box(int, r115)
    i = r116
    goto L18
L70:
    r117 = 'Ch'
    r118 = 'counted'
    r119 = 'particles!'
    r120 = builtins :: module
    r121 = 'print'
    r122 = CPyObject_GetAttr(r120, r121)
    if is_error(r122) goto L113 (error at time_at_thresh:636) else goto L71
L71:
    r123 = [r117, ch, r118, count, r119]
    r124 = load_address r123
    r125 = _PyObject_Vectorcall(r122, r124, 5, 0)
    dec_ref r122
    if is_error(r125) goto L113 (error at time_at_thresh:636) else goto L114
L72:
    r126 = PyObject_RichCompare(count, num, 0)
    dec_ref count
    if is_error(r126) goto L85 (error at time_at_thresh:637) else goto L73
L73:
    r127 = PyObject_IsTrue(r126)
    dec_ref r126
    r128 = r127 >= 0 :: signed
    if not r128 goto L85 (error at time_at_thresh:637) else goto L74 :: bool
L74:
    r129 = truncate r127: i32 to builtins.bool
    if r129 goto L75 else goto L81 :: bool
L75:
    r130 = 'Note: Counted less particles than the expected '
    r131 = PyObject_Str(num)
    if is_error(r131) goto L85 (error at time_at_thresh:638) else goto L76
L76:
    r132 = CPyStr_Build(2, r130, r131)
    dec_ref r131
    if is_error(r132) goto L85 (error at time_at_thresh:638) else goto L77
L77:
    r133 = builtins :: module
    r134 = 'print'
    r135 = CPyObject_GetAttr(r133, r134)
    if is_error(r135) goto L115 (error at time_at_thresh:638) else goto L78
L78:
    r136 = [r132]
    r137 = load_address r136
    r138 = _PyObject_Vectorcall(r135, r137, 1, 0)
    dec_ref r135
    if is_error(r138) goto L115 (error at time_at_thresh:638) else goto L116
L79:
    dec_ref r132
    r139 = 'Check LTSpice that all particles were simulated.'
    r140 = builtins :: module
    r141 = 'print'
    r142 = CPyObject_GetAttr(r140, r141)
    if is_error(r142) goto L85 (error at time_at_thresh:639) else goto L80
L80:
    r143 = [r139]
    r144 = load_address r143
    r145 = _PyObject_Vectorcall(r142, r144, 1, 0)
    dec_ref r142
    if is_error(r145) goto L85 (error at time_at_thresh:639) else goto L117
L81:
    r146 = numpy :: module
    r147 = 'array'
    r148 = CPyObject_GetAttr(r146, r147)
    if is_error(r148) goto L85 (error at time_at_thresh:640) else goto L82
L82:
    r149 = [out]
    r150 = load_address r149
    r151 = _PyObject_Vectorcall(r148, r150, 1, 0)
    dec_ref r148
    if is_error(r151) goto L85 (error at time_at_thresh:640) else goto L83
L83:
    dec_ref out
    return r151
L84:
    r152 = <error> :: object
    return r152
L85:
    dec_ref out
    goto L84
L86:
    dec_ref out
    dec_ref grad
    goto L84
L87:
    dec_ref out
    dec_ref grad
    dec_ref r8
    goto L84
L88:
    dec_ref out
    dec_ref grad
    dec_ref limit
    goto L84
L89:
    dec_ref out
    dec_ref grad
    dec_ref dtime
    goto L84
L90:
    dec_ref out
    dec_ref grad
    dec_ref dtime
    dec_ref dtvoltage
    goto L84
L91:
    dec_ref out
    dec_ref grad
    dec_ref dtime
    dec_ref dtvoltage
    dec_ref tdiff
    dec_ref first_particle
    goto L84
L92:
    dec_ref out
    dec_ref dtime
    dec_ref dtvoltage
    dec_ref tdiff
    dec_ref first_particle
    dec_ref r22
    goto L84
L93:
    dec_ref out
    dec_ref dtime
    dec_ref dtvoltage
    dec_ref tdiff
    dec_ref first_particle
    goto L84
L94:
    dec_ref out
    dec_ref dtime
    dec_ref dtvoltage
    dec_ref tdiff
    dec_ref first_particle
    dec_ref condition_0
    goto L84
L95:
    dec_ref out
    dec_ref dtime
    dec_ref dtvoltage
    dec_ref first_particle
    dec_ref condition_0
    dec_ref condition
    dec_ref count
    dec_ref start_index
    goto L84
L96:
    dec_ref out
    dec_ref dtime
    dec_ref dtvoltage
    dec_ref first_particle
    dec_ref condition_0
    dec_ref condition
    dec_ref count
    dec_ref start_index
    dec_ref r35
    dec_ref r36 :: int
    dec_ref i
    goto L84
L97:
    dec_ref dtime
    dec_ref dtvoltage
    dec_ref first_particle
    dec_ref condition_0
    dec_ref condition
    dec_ref start_index
    dec_ref r35
    dec_ref r36 :: int
    dec_ref i
    goto L70
L98:
    dec_ref dtime
    dec_ref dtvoltage
    dec_ref first_particle
    dec_ref condition_0
    dec_ref condition
    dec_ref count
    dec_ref start_index
    dec_ref r35
    dec_ref r36 :: int
    dec_ref i
    goto L25
L99:
    dec_ref i
    goto L69
L100:
    dec_ref first_particle
    dec_ref condition_0
    goto L36
L101:
    dec_ref out
    dec_ref dtime
    dec_ref dtvoltage
    dec_ref first_particle
    dec_ref condition_0
    dec_ref condition
    dec_ref count
    dec_ref start_index
    dec_ref r35
    dec_ref r36 :: int
    dec_ref i
    dec_ref times
    goto L84
L102:
    dec_ref out
    dec_ref dtime
    dec_ref dtvoltage
    dec_ref first_particle
    dec_ref condition_0
    dec_ref condition
    dec_ref count
    dec_ref r35
    dec_ref r36 :: int
    dec_ref i
    dec_ref times
    goto L84
L103:
    dec_ref out
    dec_ref dtime
    dec_ref dtvoltage
    dec_ref first_particle
    dec_ref condition_0
    dec_ref condition
    dec_ref count
    dec_ref r35
    dec_ref r36 :: int
    dec_ref times
    dec_ref Voltages
    goto L84
L104:
    dec_ref out
    dec_ref dtime
    dec_ref dtvoltage
    dec_ref first_particle
    dec_ref condition_0
    dec_ref condition
    dec_ref count
    dec_ref start_index
    dec_ref r35
    dec_ref r36 :: int
    dec_ref times
    dec_ref Voltages
    goto L84
L105:
    dec_ref times
    dec_ref Voltages
    goto L69
L106:
    dec_ref out
    dec_ref dtime
    dec_ref dtvoltage
    dec_ref first_particle
    dec_ref condition_0
    dec_ref condition
    dec_ref count
    dec_ref start_index
    dec_ref r35
    dec_ref r36 :: int
    goto L84
L107:
    dec_ref out
    dec_ref dtime
    dec_ref dtvoltage
    dec_ref first_particle
    dec_ref condition_0
    dec_ref condition
    dec_ref count
    dec_ref start_index
    dec_ref r35
    dec_ref r36 :: int
    dec_ref r102
    goto L56
L108:
    dec_ref out
    dec_ref dtime
    dec_ref dtvoltage
    dec_ref first_particle
    dec_ref condition_0
    dec_ref condition
    dec_ref count
    dec_ref start_index
    dec_ref r35
    dec_ref r36 :: int
    dec_ref r102
    dec_ref m
    goto L59
L109:
    dec_ref out
    dec_ref dtime
    dec_ref dtvoltage
    dec_ref first_particle
    dec_ref condition_0
    dec_ref condition
    dec_ref count
    dec_ref start_index
    dec_ref r35
    dec_ref r36 :: int
    dec_ref m
    dec_ref b
    dec_ref r107
    goto L62
L110:
    dec_ref out
    dec_ref dtime
    dec_ref dtvoltage
    dec_ref first_particle
    dec_ref condition_0
    dec_ref condition
    dec_ref count
    dec_ref start_index
    dec_ref r35
    dec_ref r36 :: int
    dec_ref m
    goto L84
L111:
    dec_ref r112
    goto L67
L112:
    dec_ref out
    dec_ref dtime
    dec_ref dtvoltage
    dec_ref first_particle
    dec_ref condition_0
    dec_ref condition
    dec_ref start_index
    dec_ref r35
    dec_ref r36 :: int
    goto L84
L113:
    dec_ref out
    dec_ref count
    goto L84
L114:
    dec_ref r125
    goto L72
L115:
    dec_ref out
    dec_ref r132
    goto L84
L116:
    dec_ref r138
    goto L79
L117:
    dec_ref r145
    goto L81

def Simulation.ToF_finalize(self, tofch1, tofch4, time_limit):
    self :: modTof.Simulation
    tofch1, tofch4, time_limit, r0 :: object
    r1 :: str
    r2 :: int
    r3, r4 :: object
    r5 :: str
    r6 :: object
    r7 :: object[2]
    r8 :: object_ptr
    r9 :: object
    r10 :: str
    r11 :: int
    r12, r13 :: object
    r14 :: str
    r15 :: object
    r16 :: object[2]
    r17 :: object_ptr
    r18 :: object
    r19 :: list
    out, r20, i, r21, j, r22 :: object
    r23 :: bit
    r24, r25, lim :: object
    r26 :: int
    r27, r28 :: object
    r29 :: i32
    r30 :: bit
    r31 :: bool
    r32 :: int
    r33, r34 :: object
    r35 :: i32
    r36 :: bit
    r37 :: bool
    r38, r39, r40, check, r41, r42 :: object
    r43 :: i32
    r44 :: bit
    r45 :: bool
    r46 :: object
    r47 :: str
    r48, r49, r50, r51, r52, r53, r54 :: object
    r55 :: int
    r56, r57 :: object
    r58 :: i32
    r59 :: bit
    r60 :: bool
    r61, r62 :: object
    r63 :: int
    r64, r65 :: object
    r66 :: i32
    r67 :: bit
    r68 :: bool
    r69, r70 :: object
    r71 :: i32
    r72 :: bit
    r73 :: bool
    r74, r75, r76, r77 :: object
    r78 :: str
    r79 :: int
    r80 :: object
    r81 :: str
    r82 :: object
    r83 :: str
    r84 :: object
    r85 :: object[3]
    r86 :: object_ptr
    r87, r88 :: object
    r89 :: str
    r90 :: object
    r91 :: object[1]
    r92 :: object_ptr
    r93 :: object
    r94 :: bool
    r95, r96 :: object
L0:
    if is_error(time_limit) goto L1 else goto L58
L1:
    r0 = box(float, 1e-08)
    time_limit = r0
L2:
    r1 = 'ch1 length'
    r2 = CPyObject_Size(tofch1)
    if is_error(r2) goto L59 (error at ToF_finalize:643) else goto L3
L3:
    r3 = box(int, r2)
    r4 = builtins :: module
    r5 = 'print'
    r6 = CPyObject_GetAttr(r4, r5)
    if is_error(r6) goto L60 (error at ToF_finalize:643) else goto L4
L4:
    r7 = [r1, r3]
    r8 = load_address r7
    r9 = _PyObject_Vectorcall(r6, r8, 2, 0)
    dec_ref r6
    if is_error(r9) goto L60 (error at ToF_finalize:643) else goto L61
L5:
    dec_ref r3
    r10 = 'ch4 length'
    r11 = CPyObject_Size(tofch4)
    if is_error(r11) goto L59 (error at ToF_finalize:644) else goto L6
L6:
    r12 = box(int, r11)
    r13 = builtins :: module
    r14 = 'print'
    r15 = CPyObject_GetAttr(r13, r14)
    if is_error(r15) goto L62 (error at ToF_finalize:644) else goto L7
L7:
    r16 = [r10, r12]
    r17 = load_address r16
    r18 = _PyObject_Vectorcall(r15, r17, 2, 0)
    dec_ref r15
    if is_error(r18) goto L62 (error at ToF_finalize:644) else goto L63
L8:
    dec_ref r12
    r19 = PyList_New(0)
    if is_error(r19) goto L59 (error at ToF_finalize:645) else goto L9
L9:
    out = r19
    r20 = object 0
    inc_ref r20
    i = r20
    r21 = object 0
    inc_ref r21
    j = r21
    r22 = load_address _Py_NoneStruct
    r23 = time_limit != r22
    if r23 goto L10 else goto L64 :: bool
L10:
    r24 = time_limit
    goto L12
L11:
    r25 = box(float, 1e-08)
    r24 = r25
L12:
    lim = r24
L13:
    r26 = CPyObject_Size(tofch1)
    if is_error(r26) goto L65 (error at ToF_finalize:648) else goto L14
L14:
    r27 = box(int, r26)
    r28 = PyObject_RichCompare(i, r27, 0)
    dec_ref r27
    if is_error(r28) goto L65 (error at ToF_finalize:648) else goto L15
L15:
    r29 = PyObject_IsTrue(r28)
    dec_ref r28
    r30 = r29 >= 0 :: signed
    if not r30 goto L65 (error at ToF_finalize:648) else goto L16 :: bool
L16:
    r31 = truncate r29: i32 to builtins.bool
    if r31 goto L17 else goto L66 :: bool
L17:
    r32 = CPyObject_Size(tofch4)
    if is_error(r32) goto L65 (error at ToF_finalize:648) else goto L18
L18:
    r33 = box(int, r32)
    r34 = PyObject_RichCompare(j, r33, 0)
    dec_ref r33
    if is_error(r34) goto L65 (error at ToF_finalize:648) else goto L19
L19:
    r35 = PyObject_IsTrue(r34)
    dec_ref r34
    r36 = r35 >= 0 :: signed
    if not r36 goto L65 (error at ToF_finalize:648) else goto L20 :: bool
L20:
    r37 = truncate r35: i32 to builtins.bool
    if r37 goto L21 else goto L66 :: bool
L21:
    r38 = PyObject_GetItem(tofch4, j)
    if is_error(r38) goto L65 (error at ToF_finalize:649) else goto L22
L22:
    r39 = PyObject_GetItem(tofch1, i)
    if is_error(r39) goto L67 (error at ToF_finalize:649) else goto L23
L23:
    r40 = PyNumber_Subtract(r38, r39)
    dec_ref r38
    dec_ref r39
    if is_error(r40) goto L65 (error at ToF_finalize:649) else goto L24
L24:
    check = r40
    r41 = PyNumber_Absolute(check)
    if is_error(r41) goto L68 (error at ToF_finalize:650) else goto L25
L25:
    r42 = PyObject_RichCompare(r41, lim, 0)
    dec_ref r41
    if is_error(r42) goto L68 (error at ToF_finalize:650) else goto L26
L26:
    r43 = PyObject_IsTrue(r42)
    dec_ref r42
    r44 = r43 >= 0 :: signed
    if not r44 goto L68 (error at ToF_finalize:650) else goto L27 :: bool
L27:
    r45 = truncate r43: i32 to builtins.bool
    if r45 goto L28 else goto L33 :: bool
L28:
    r46 = PyNumber_Absolute(check)
    dec_ref check
    if is_error(r46) goto L65 (error at ToF_finalize:651) else goto L29
L29:
    r47 = 'append'
    r48 = CPyObject_CallMethodObjArgs(out, r47, r46, 0)
    dec_ref r46
    if is_error(r48) goto L65 (error at ToF_finalize:651) else goto L69
L30:
    r49 = object 1
    r50 = PyNumber_InPlaceAdd(i, r49)
    dec_ref i
    if is_error(r50) goto L70 (error at ToF_finalize:652) else goto L31
L31:
    i = r50
    r51 = object 1
    r52 = PyNumber_InPlaceAdd(j, r51)
    dec_ref j
    if is_error(r52) goto L71 (error at ToF_finalize:653) else goto L32
L32:
    j = r52
    goto L13
L33:
    r53 = object 1
    r54 = PyNumber_Add(i, r53)
    if is_error(r54) goto L68 (error at ToF_finalize:654) else goto L34
L34:
    r55 = CPyObject_Size(tofch1)
    if is_error(r55) goto L72 (error at ToF_finalize:654) else goto L35
L35:
    r56 = box(int, r55)
    r57 = PyObject_RichCompare(r54, r56, 0)
    dec_ref r54
    dec_ref r56
    if is_error(r57) goto L68 (error at ToF_finalize:654) else goto L36
L36:
    r58 = PyObject_IsTrue(r57)
    dec_ref r57
    r59 = r58 >= 0 :: signed
    if not r59 goto L68 (error at ToF_finalize:654) else goto L37 :: bool
L37:
    r60 = truncate r58: i32 to builtins.bool
    if r60 goto L38 else goto L73 :: bool
L38:
    r61 = object 1
    r62 = PyNumber_Add(j, r61)
    if is_error(r62) goto L68 (error at ToF_finalize:654) else goto L39
L39:
    r63 = CPyObject_Size(tofch4)
    if is_error(r63) goto L74 (error at ToF_finalize:654) else goto L40
L40:
    r64 = box(int, r63)
    r65 = PyObject_RichCompare(r62, r64, 0)
    dec_ref r62
    dec_ref r64
    if is_error(r65) goto L68 (error at ToF_finalize:654) else goto L41
L41:
    r66 = PyObject_IsTrue(r65)
    dec_ref r65
    r67 = r66 >= 0 :: signed
    if not r67 goto L68 (error at ToF_finalize:654) else goto L42 :: bool
L42:
    r68 = truncate r66: i32 to builtins.bool
    if r68 goto L43 else goto L73 :: bool
L43:
    r69 = object 0
    r70 = PyObject_RichCompare(check, r69, 0)
    dec_ref check
    if is_error(r70) goto L65 (error at ToF_finalize:654) else goto L44
L44:
    r71 = PyObject_IsTrue(r70)
    dec_ref r70
    r72 = r71 >= 0 :: signed
    if not r72 goto L65 (error at ToF_finalize:654) else goto L45 :: bool
L45:
    r73 = truncate r71: i32 to builtins.bool
    if r73 goto L46 else goto L48 :: bool
L46:
    r74 = object 1
    r75 = PyNumber_InPlaceAdd(j, r74)
    dec_ref j
    if is_error(r75) goto L71 (error at ToF_finalize:655) else goto L47
L47:
    j = r75
    goto L13
L48:
    r76 = object 1
    r77 = PyNumber_InPlaceAdd(i, r76)
    dec_ref i
    if is_error(r77) goto L70 (error at ToF_finalize:657) else goto L49
L49:
    i = r77
    goto L13
L50:
    r78 = 'finished calculating,'
    r79 = CPyObject_Size(out)
    if is_error(r79) goto L75 (error at ToF_finalize:658) else goto L51
L51:
    r80 = box(int, r79)
    r81 = 'particles'
    r82 = builtins :: module
    r83 = 'print'
    r84 = CPyObject_GetAttr(r82, r83)
    if is_error(r84) goto L76 (error at ToF_finalize:658) else goto L52
L52:
    r85 = [r78, r80, r81]
    r86 = load_address r85
    r87 = _PyObject_Vectorcall(r84, r86, 3, 0)
    dec_ref r84
    if is_error(r87) goto L76 (error at ToF_finalize:658) else goto L77
L53:
    dec_ref r80
    r88 = numpy :: module
    r89 = 'array'
    r90 = CPyObject_GetAttr(r88, r89)
    if is_error(r90) goto L75 (error at ToF_finalize:659) else goto L54
L54:
    r91 = [out]
    r92 = load_address r91
    r93 = _PyObject_Vectorcall(r90, r92, 1, 0)
    dec_ref r90
    if is_error(r93) goto L75 (error at ToF_finalize:659) else goto L55
L55:
    dec_ref out
    self.FinalToF = r93; r94 = is_error
    if not r94 goto L57 (error at ToF_finalize:659) else goto L56 :: bool
L56:
    r95 = box(None, 1)
    inc_ref r95
    return r95
L57:
    r96 = <error> :: object
    return r96
L58:
    inc_ref time_limit
    goto L2
L59:
    dec_ref time_limit
    goto L57
L60:
    dec_ref time_limit
    dec_ref r3
    goto L57
L61:
    dec_ref r9
    goto L5
L62:
    dec_ref time_limit
    dec_ref r12
    goto L57
L63:
    dec_ref r18
    goto L8
L64:
    dec_ref time_limit
    goto L11
L65:
    dec_ref out
    dec_ref i
    dec_ref j
    dec_ref lim
    goto L57
L66:
    dec_ref i
    dec_ref j
    dec_ref lim
    goto L50
L67:
    dec_ref out
    dec_ref i
    dec_ref j
    dec_ref lim
    dec_ref r38
    goto L57
L68:
    dec_ref out
    dec_ref i
    dec_ref j
    dec_ref lim
    dec_ref check
    goto L57
L69:
    dec_ref r48
    goto L30
L70:
    dec_ref out
    dec_ref j
    dec_ref lim
    goto L57
L71:
    dec_ref out
    dec_ref i
    dec_ref lim
    goto L57
L72:
    dec_ref out
    dec_ref i
    dec_ref j
    dec_ref lim
    dec_ref check
    dec_ref r54
    goto L57
L73:
    dec_ref check
    goto L48
L74:
    dec_ref out
    dec_ref i
    dec_ref j
    dec_ref lim
    dec_ref check
    dec_ref r62
    goto L57
L75:
    dec_ref out
    goto L57
L76:
    dec_ref out
    dec_ref r80
    goto L57
L77:
    dec_ref r87
    goto L53

def Simulation.calc_ToF(self, filedate, filenum):
    self :: modTof.Simulation
    filedate, filenum, r0, r1 :: object
    r2 :: dict
    r3, r4 :: object
    r5 :: bit
    r6 :: str
    r7 :: object
    r8 :: str
    r9 :: dict
    r10 :: str
    r11 :: object
    r12 :: i32
    r13 :: bit
    r14 :: dict
    r15 :: str
    r16 :: object
    r17 :: str
    r18 :: object
    r19, r20 :: str
    r21, date, r22, num_part, r23 :: object
    r24 :: bit
    r25 :: object
    r26 :: bit
    r27 :: object
    r28 :: object[1]
    r29 :: object_ptr
    r30 :: object
    r31, r32, r33, r34, r35, r36, r37, r38, r39 :: str
    r40 :: object
    r41 :: str
    r42 :: object
    r43 :: str
    r44 :: object
    r45 :: object[1]
    r46 :: object_ptr
    r47, filename_ch1 :: object
    r48, r49, r50, r51, r52, r53, r54, r55, r56 :: str
    r57 :: object
    r58 :: str
    r59 :: object
    r60 :: str
    r61 :: object
    r62 :: object[1]
    r63 :: object_ptr
    r64, filename_ch4 :: object
    r65, r66 :: str
    r67 :: list
    r68, r69, r70 :: ptr
    r71 :: str
    r72 :: object
    r73 :: str
    r74 :: object
    r75 :: object[3]
    r76 :: object_ptr
    r77, r78, ch1 :: object
    r79, r80 :: str
    r81 :: list
    r82, r83, r84 :: ptr
    r85 :: str
    r86 :: object
    r87 :: str
    r88 :: object
    r89 :: object[3]
    r90 :: object_ptr
    r91, r92, ch4 :: object
    r93 :: str
    r94 :: object
    r95 :: str
    r96, r97, r98, r99, ch1ToF :: object
    r100 :: str
    r101 :: object
    r102 :: str
    r103, r104, r105, r106, ch4ToF, r107, r108, r109, r110 :: object
    r111 :: str
    r112 :: object
    r113 :: object[1]
    r114 :: object_ptr
    r115 :: object
    r116 :: str
    r117, r118 :: object
    r119 :: str
    r120 :: object
    r121 :: object[1]
    r122 :: object_ptr
    r123, r124, r125 :: object
L0:
    if is_error(filedate) goto L1 else goto L56
L1:
    r0 = box(None, 1)
    inc_ref r0
    filedate = r0
L2:
    if is_error(filenum) goto L3 else goto L57
L3:
    r1 = box(None, 1)
    inc_ref r1
    filenum = r1
L4:
    r2 = modTof.globals :: static
    r3 = os :: module
    r4 = load_address _Py_NoneStruct
    r5 = r3 != r4
    if r5 goto L7 else goto L5 :: bool
L5:
    r6 = 'os'
    r7 = PyImport_Import(r6)
    if is_error(r7) goto L58 (error at calc_ToF:718) else goto L6
L6:
    os = r7 :: module
    dec_ref r7
L7:
    r8 = 'os'
    r9 = PyImport_GetModuleDict()
    r10 = 'os'
    r11 = CPyDict_GetItem(r9, r10)
    if is_error(r11) goto L58 (error at calc_ToF:718) else goto L8
L8:
    r12 = CPyDict_SetItem(r2, r8, r11)
    dec_ref r11
    r13 = r12 >= 0 :: signed
    if not r13 goto L58 (error at calc_ToF:718) else goto L9 :: bool
L9:
    r14 = modTof.globals :: static
    r15 = 'datetime'
    r16 = CPyDict_GetItem(r14, r15)
    if is_error(r16) goto L58 (error at calc_ToF:720) else goto L10
L10:
    r17 = 'now'
    r18 = CPyObject_CallMethodObjArgs(r16, r17, 0)
    dec_ref r16
    if is_error(r18) goto L58 (error at calc_ToF:720) else goto L11
L11:
    r19 = '%m_%d_%Y'
    r20 = 'strftime'
    r21 = CPyObject_CallMethodObjArgs(r18, r20, r19, 0)
    dec_ref r18
    if is_error(r21) goto L58 (error at calc_ToF:720) else goto L12
L12:
    date = r21
    r22 = self.num_particles
    num_part = r22
    r23 = load_address _Py_NoneStruct
    r24 = filedate != r23
    if r24 goto L59 else goto L60 :: bool
L13:
    date = filedate
L14:
    r25 = load_address _Py_NoneStruct
    r26 = filenum != r25
    if r26 goto L61 else goto L62 :: bool
L15:
    r27 = load_address PyLong_Type
    r28 = [filenum]
    r29 = load_address r28
    r30 = _PyObject_Vectorcall(r27, r29, 1, 0)
    if is_error(r30) goto L63 (error at calc_ToF:725) else goto L16
L16:
    dec_ref filenum
    num_part = r30
L17:
    r31 = 'output'
    r32 = PyObject_Str(num_part)
    if is_error(r32) goto L64 (error at calc_ToF:726) else goto L18
L18:
    r33 = PyUnicode_Concat(r31, r32)
    dec_ref r32
    if is_error(r33) goto L64 (error at calc_ToF:726) else goto L19
L19:
    r34 = 'ch1_'
    r35 = PyUnicode_Concat(r33, r34)
    dec_ref r33
    if is_error(r35) goto L64 (error at calc_ToF:726) else goto L20
L20:
    r36 = PyObject_Str(date)
    if is_error(r36) goto L65 (error at calc_ToF:726) else goto L21
L21:
    r37 = PyUnicode_Concat(r35, r36)
    dec_ref r35
    dec_ref r36
    if is_error(r37) goto L64 (error at calc_ToF:726) else goto L22
L22:
    r38 = '.txt'
    r39 = PyUnicode_Concat(r37, r38)
    dec_ref r37
    if is_error(r39) goto L64 (error at calc_ToF:726) else goto L23
L23:
    r40 = os :: module
    r41 = 'path'
    r42 = CPyObject_GetAttr(r40, r41)
    if is_error(r42) goto L66 (error at calc_ToF:726) else goto L24
L24:
    r43 = 'abspath'
    r44 = CPyObject_GetAttr(r42, r43)
    dec_ref r42
    if is_error(r44) goto L66 (error at calc_ToF:726) else goto L25
L25:
    r45 = [r39]
    r46 = load_address r45
    r47 = _PyObject_Vectorcall(r44, r46, 1, 0)
    dec_ref r44
    if is_error(r47) goto L66 (error at calc_ToF:726) else goto L26
L26:
    dec_ref r39
    filename_ch1 = r47
    r48 = 'output'
    r49 = PyObject_Str(num_part)
    if is_error(r49) goto L67 (error at calc_ToF:727) else goto L27
L27:
    r50 = PyUnicode_Concat(r48, r49)
    dec_ref r49
    if is_error(r50) goto L67 (error at calc_ToF:727) else goto L28
L28:
    r51 = 'ch4_'
    r52 = PyUnicode_Concat(r50, r51)
    dec_ref r50
    if is_error(r52) goto L67 (error at calc_ToF:727) else goto L29
L29:
    r53 = PyObject_Str(date)
    dec_ref date
    if is_error(r53) goto L68 (error at calc_ToF:727) else goto L30
L30:
    r54 = PyUnicode_Concat(r52, r53)
    dec_ref r52
    dec_ref r53
    if is_error(r54) goto L69 (error at calc_ToF:727) else goto L31
L31:
    r55 = '.txt'
    r56 = PyUnicode_Concat(r54, r55)
    dec_ref r54
    if is_error(r56) goto L69 (error at calc_ToF:727) else goto L32
L32:
    r57 = os :: module
    r58 = 'path'
    r59 = CPyObject_GetAttr(r57, r58)
    if is_error(r59) goto L70 (error at calc_ToF:727) else goto L33
L33:
    r60 = 'abspath'
    r61 = CPyObject_GetAttr(r59, r60)
    dec_ref r59
    if is_error(r61) goto L70 (error at calc_ToF:727) else goto L34
L34:
    r62 = [r56]
    r63 = load_address r62
    r64 = _PyObject_Vectorcall(r61, r63, 1, 0)
    dec_ref r61
    if is_error(r64) goto L70 (error at calc_ToF:727) else goto L35
L35:
    dec_ref r56
    filename_ch4 = r64
    r65 = 't'
    r66 = 'V'
    r67 = PyList_New(2)
    if is_error(r67) goto L71 (error at calc_ToF:728) else goto L36
L36:
    r68 = get_element_ptr r67 ob_item :: PyListObject
    r69 = load_mem r68 :: ptr*
    inc_ref r65
    set_mem r69, r65 :: builtins.object*
    r70 = r69 + 8
    inc_ref r66
    set_mem r70, r66 :: builtins.object*
    r71 = ','
    r72 = pandas :: module
    r73 = 'read_csv'
    r74 = CPyObject_GetAttr(r72, r73)
    if is_error(r74) goto L72 (error at calc_ToF:728) else goto L37
L37:
    r75 = [filename_ch1, r67, r71]
    r76 = load_address r75
    r77 = ('names', 'sep')
    r78 = _PyObject_Vectorcall(r74, r76, 1, r77)
    dec_ref r74
    if is_error(r78) goto L72 (error at calc_ToF:728) else goto L38
L38:
    dec_ref filename_ch1
    dec_ref r67
    ch1 = r78
    r79 = 't'
    r80 = 'V'
    r81 = PyList_New(2)
    if is_error(r81) goto L73 (error at calc_ToF:729) else goto L39
L39:
    r82 = get_element_ptr r81 ob_item :: PyListObject
    r83 = load_mem r82 :: ptr*
    inc_ref r79
    set_mem r83, r79 :: builtins.object*
    r84 = r83 + 8
    inc_ref r80
    set_mem r84, r80 :: builtins.object*
    r85 = ','
    r86 = pandas :: module
    r87 = 'read_csv'
    r88 = CPyObject_GetAttr(r86, r87)
    if is_error(r88) goto L74 (error at calc_ToF:729) else goto L40
L40:
    r89 = [filename_ch4, r81, r85]
    r90 = load_address r89
    r91 = ('names', 'sep')
    r92 = _PyObject_Vectorcall(r88, r90, 1, r91)
    dec_ref r88
    if is_error(r92) goto L74 (error at calc_ToF:729) else goto L41
L41:
    dec_ref filename_ch4
    dec_ref r81
    ch4 = r92
    r93 = 't'
    r94 = PyObject_GetItem(ch1, r93)
    if is_error(r94) goto L75 (error at calc_ToF:730) else goto L42
L42:
    r95 = 'V'
    r96 = PyObject_GetItem(ch1, r95)
    dec_ref ch1
    if is_error(r96) goto L76 (error at calc_ToF:730) else goto L43
L43:
    r97 = self.CMOS_thresh
    r98 = object 1
    r99 = self.time_at_thresh(r94, r96, num_part, r97, r98)
    dec_ref r94
    dec_ref r96
    dec_ref r97
    if is_error(r99) goto L77 (error at calc_ToF:730) else goto L44
L44:
    ch1ToF = r99
    r100 = 't'
    r101 = PyObject_GetItem(ch4, r100)
    if is_error(r101) goto L78 (error at calc_ToF:731) else goto L45
L45:
    r102 = 'V'
    r103 = PyObject_GetItem(ch4, r102)
    dec_ref ch4
    if is_error(r103) goto L79 (error at calc_ToF:731) else goto L46
L46:
    r104 = self.CMOS_thresh
    r105 = object 4
    r106 = self.time_at_thresh(r101, r103, num_part, r104, r105)
    dec_ref r101
    dec_ref r103
    dec_ref num_part
    dec_ref r104
    if is_error(r106) goto L80 (error at calc_ToF:731) else goto L47
L47:
    ch4ToF = r106
    r107 = <error> :: object
    r108 = self.ToF_finalize(ch1ToF, ch4ToF, r107)
    dec_ref ch1ToF
    dec_ref ch4ToF
    if is_error(r108) goto L55 (error at calc_ToF:732) else goto L81
L48:
    r109 = self.FinalToF
    if is_error(r109) goto L55 (error at calc_ToF:733) else goto L49
L49:
    r110 = pandas :: module
    r111 = 'DataFrame'
    r112 = CPyObject_GetAttr(r110, r111)
    if is_error(r112) goto L82 (error at calc_ToF:733) else goto L50
L50:
    r113 = [r109]
    r114 = load_address r113
    r115 = _PyObject_Vectorcall(r112, r114, 1, 0)
    dec_ref r112
    if is_error(r115) goto L82 (error at calc_ToF:733) else goto L51
L51:
    dec_ref r109
    r116 = 'describe'
    r117 = CPyObject_CallMethodObjArgs(r115, r116, 0)
    dec_ref r115
    if is_error(r117) goto L55 (error at calc_ToF:733) else goto L52
L52:
    r118 = builtins :: module
    r119 = 'print'
    r120 = CPyObject_GetAttr(r118, r119)
    if is_error(r120) goto L83 (error at calc_ToF:733) else goto L53
L53:
    r121 = [r117]
    r122 = load_address r121
    r123 = _PyObject_Vectorcall(r120, r122, 1, 0)
    dec_ref r120
    if is_error(r123) goto L83 (error at calc_ToF:733) else goto L84
L54:
    dec_ref r117
    r124 = box(None, 1)
    inc_ref r124
    return r124
L55:
    r125 = <error> :: object
    return r125
L56:
    inc_ref filedate
    goto L2
L57:
    inc_ref filenum
    goto L4
L58:
    dec_ref filedate
    dec_ref filenum
    goto L55
L59:
    dec_ref date
    goto L13
L60:
    dec_ref filedate
    goto L14
L61:
    dec_ref num_part
    goto L15
L62:
    dec_ref filenum
    goto L17
L63:
    dec_ref filenum
    dec_ref date
    goto L55
L64:
    dec_ref date
    dec_ref num_part
    goto L55
L65:
    dec_ref date
    dec_ref num_part
    dec_ref r35
    goto L55
L66:
    dec_ref date
    dec_ref num_part
    dec_ref r39
    goto L55
L67:
    dec_ref date
    dec_ref num_part
    dec_ref filename_ch1
    goto L55
L68:
    dec_ref num_part
    dec_ref filename_ch1
    dec_ref r52
    goto L55
L69:
    dec_ref num_part
    dec_ref filename_ch1
    goto L55
L70:
    dec_ref num_part
    dec_ref filename_ch1
    dec_ref r56
    goto L55
L71:
    dec_ref num_part
    dec_ref filename_ch1
    dec_ref filename_ch4
    goto L55
L72:
    dec_ref num_part
    dec_ref filename_ch1
    dec_ref filename_ch4
    dec_ref r67
    goto L55
L73:
    dec_ref num_part
    dec_ref filename_ch4
    dec_ref ch1
    goto L55
L74:
    dec_ref num_part
    dec_ref filename_ch4
    dec_ref ch1
    dec_ref r81
    goto L55
L75:
    dec_ref num_part
    dec_ref ch1
    dec_ref ch4
    goto L55
L76:
    dec_ref num_part
    dec_ref ch4
    dec_ref r94
    goto L55
L77:
    dec_ref num_part
    dec_ref ch4
    goto L55
L78:
    dec_ref num_part
    dec_ref ch4
    dec_ref ch1ToF
    goto L55
L79:
    dec_ref num_part
    dec_ref ch1ToF
    dec_ref r101
    goto L55
L80:
    dec_ref ch1ToF
    goto L55
L81:
    dec_ref r108
    goto L48
L82:
    dec_ref r109
    goto L55
L83:
    dec_ref r117
    goto L55
L84:
    dec_ref r123
    goto L54

def Simulation.save_ToF(self, filename):
    self :: modTof.Simulation
    filename, r0 :: object
    r1 :: dict
    r2 :: str
    r3 :: object
    r4 :: str
    r5 :: object
    r6, r7 :: str
    r8, date, r9, num_total, r10 :: object
    r11 :: int
    r12, counted :: object
    r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25 :: str
    file, r26 :: object
    r27 :: bit
    r28 :: str
    r29 :: object
    r30 :: dict
    r31 :: object
    r32 :: str
    r33 :: object
    r34 :: object[1]
    r35 :: object_ptr
    r36 :: object
    r37 :: str
    r38, r39 :: object
    r40 :: object[2]
    r41 :: object_ptr
    r42, r43, r44, r45 :: object
L0:
    if is_error(filename) goto L1 else goto L26
L1:
    r0 = box(None, 1)
    inc_ref r0
    filename = r0
L2:
    r1 = modTof.globals :: static
    r2 = 'datetime'
    r3 = CPyDict_GetItem(r1, r2)
    if is_error(r3) goto L27 (error at save_ToF:738) else goto L3
L3:
    r4 = 'now'
    r5 = CPyObject_CallMethodObjArgs(r3, r4, 0)
    dec_ref r3
    if is_error(r5) goto L27 (error at save_ToF:738) else goto L4
L4:
    r6 = '%m_%d_%Y'
    r7 = 'strftime'
    r8 = CPyObject_CallMethodObjArgs(r5, r7, r6, 0)
    dec_ref r5
    if is_error(r8) goto L27 (error at save_ToF:738) else goto L5
L5:
    date = r8
    r9 = self.num_particles
    num_total = r9
    r10 = self.FinalToF
    if is_error(r10) goto L28 (error at save_ToF:740) else goto L6
L6:
    r11 = CPyObject_Size(r10)
    dec_ref r10
    if is_error(r11) goto L28 (error at save_ToF:740) else goto L7
L7:
    r12 = box(int, r11)
    counted = r12
    r13 = 'result_'
    r14 = PyObject_Str(counted)
    dec_ref counted
    if is_error(r14) goto L28 (error at save_ToF:741) else goto L8
L8:
    r15 = PyUnicode_Concat(r13, r14)
    dec_ref r14
    if is_error(r15) goto L28 (error at save_ToF:741) else goto L9
L9:
    r16 = '_of_'
    r17 = PyUnicode_Concat(r15, r16)
    dec_ref r15
    if is_error(r17) goto L28 (error at save_ToF:741) else goto L10
L10:
    r18 = PyObject_Str(num_total)
    dec_ref num_total
    if is_error(r18) goto L29 (error at save_ToF:741) else goto L11
L11:
    r19 = PyUnicode_Concat(r17, r18)
    dec_ref r17
    dec_ref r18
    if is_error(r19) goto L30 (error at save_ToF:741) else goto L12
L12:
    r20 = '_'
    r21 = PyUnicode_Concat(r19, r20)
    dec_ref r19
    if is_error(r21) goto L30 (error at save_ToF:741) else goto L13
L13:
    r22 = PyObject_Str(date)
    dec_ref date
    if is_error(r22) goto L31 (error at save_ToF:741) else goto L14
L14:
    r23 = PyUnicode_Concat(r21, r22)
    dec_ref r21
    dec_ref r22
    if is_error(r23) goto L27 (error at save_ToF:741) else goto L15
L15:
    r24 = '.txt'
    r25 = PyUnicode_Concat(r23, r24)
    dec_ref r23
    if is_error(r25) goto L27 (error at save_ToF:741) else goto L16
L16:
    file = r25
    r26 = load_address _Py_NoneStruct
    r27 = filename != r26
    if r27 goto L32 else goto L33 :: bool
L17:
    file = filename
L18:
    r28 = 'Time-of-Flight [s]'
    r29 = self.FinalToF
    if is_error(r29) goto L34 (error at save_ToF:745) else goto L19
L19:
    r30 = CPyDict_Build(1, r28, r29)
    dec_ref r29
    if is_error(r30) goto L34 (error at save_ToF:745) else goto L20
L20:
    r31 = pandas :: module
    r32 = 'DataFrame'
    r33 = CPyObject_GetAttr(r31, r32)
    if is_error(r33) goto L35 (error at save_ToF:745) else goto L21
L21:
    r34 = [r30]
    r35 = load_address r34
    r36 = _PyObject_Vectorcall(r33, r35, 1, 0)
    dec_ref r33
    if is_error(r36) goto L35 (error at save_ToF:745) else goto L22
L22:
    dec_ref r30
    r37 = 'to_csv'
    r38 = CPyObject_GetAttr(r36, r37)
    dec_ref r36
    if is_error(r38) goto L34 (error at save_ToF:745) else goto L23
L23:
    r39 = box(bool, 0)
    r40 = [file, r39]
    r41 = load_address r40
    r42 = ('index',)
    r43 = _PyObject_Vectorcall(r38, r41, 1, r42)
    dec_ref r38
    if is_error(r43) goto L34 (error at save_ToF:745) else goto L36
L24:
    dec_ref file
    r44 = box(None, 1)
    inc_ref r44
    return r44
L25:
    r45 = <error> :: object
    return r45
L26:
    inc_ref filename
    goto L2
L27:
    dec_ref filename
    goto L25
L28:
    dec_ref filename
    dec_ref date
    dec_ref num_total
    goto L25
L29:
    dec_ref filename
    dec_ref date
    dec_ref r17
    goto L25
L30:
    dec_ref filename
    dec_ref date
    goto L25
L31:
    dec_ref filename
    dec_ref r21
    goto L25
L32:
    dec_ref file
    goto L17
L33:
    dec_ref filename
    goto L18
L34:
    dec_ref file
    goto L25
L35:
    dec_ref file
    dec_ref r30
    goto L25
L36:
    dec_ref r43
    goto L24

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4 :: object
    r5, r6 :: object_ptr
    r7 :: object_ptr[2]
    r8 :: c_ptr
    r9 :: native_int[2]
    r10 :: c_ptr
    r11 :: object
    r12 :: dict
    r13, r14 :: str
    r15 :: bit
    r16 :: object
    r17 :: str
    r18 :: dict
    r19 :: object
    r20 :: object_ptr
    r21 :: object_ptr[1]
    r22 :: c_ptr
    r23 :: native_int[1]
    r24 :: c_ptr
    r25 :: object
    r26 :: dict
    r27, r28 :: str
    r29 :: bit
    r30 :: object
    r31 :: str
    r32 :: dict
    r33, r34 :: object
    r35 :: str
    r36 :: dict
    r37, r38 :: object
    r39 :: str
    r40 :: dict
    r41, r42 :: object
    r43 :: str
    r44, r45 :: object
    r46 :: bool
    r47, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84, r85, r86, r87, r88, r89, r90, r91, r92, r93, r94, r95, r96, r97, r98, r99, r100, r101, r102, r103, r104, r105, r106, r107, r108, r109, r110, r111 :: str
    r112 :: tuple
    r113 :: i32
    r114 :: bit
    r115 :: dict
    r116 :: str
    r117 :: i32
    r118 :: bit
    r119 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L15 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = load_address numpy :: module
    r6 = load_address pandas :: module
    r7 = [r5, r6]
    r8 = load_address r7
    r9 = [15, 16]
    r10 = load_address r9
    r11 = (('numpy', 'numpy', 'np'), ('pandas', 'pandas', 'pd'))
    r12 = modTof.globals :: static
    r13 = 'modTof.py'
    r14 = '<module>'
    r15 = CPyImport_ImportMany(r11, r8, r12, r13, r14, r10)
    if not r15 goto L15 else goto L4 :: bool
L4:
    r16 = ('tqdm',)
    r17 = 'tqdm'
    r18 = modTof.globals :: static
    r19 = CPyImport_ImportFromMany(r17, r16, r16, r18)
    if is_error(r19) goto L15 (error at <module>:17) else goto L5
L5:
    tqdm = r19 :: module
    dec_ref r19
    r20 = load_address random :: module
    r21 = [r20]
    r22 = load_address r21
    r23 = [19]
    r24 = load_address r23
    r25 = (('random', 'random', 'random'),)
    r26 = modTof.globals :: static
    r27 = 'modTof.py'
    r28 = '<module>'
    r29 = CPyImport_ImportMany(r25, r22, r26, r27, r28, r24)
    if not r29 goto L15 else goto L6 :: bool
L6:
    r30 = ('perf_counter', 'perf_counter_ns')
    r31 = 'time'
    r32 = modTof.globals :: static
    r33 = CPyImport_ImportFromMany(r31, r30, r30, r32)
    if is_error(r33) goto L15 (error at <module>:20) else goto L7
L7:
    time = r33 :: module
    dec_ref r33
    r34 = ('timedelta', 'datetime')
    r35 = 'datetime'
    r36 = modTof.globals :: static
    r37 = CPyImport_ImportFromMany(r35, r34, r34, r36)
    if is_error(r37) goto L15 (error at <module>:21) else goto L8
L8:
    datetime = r37 :: module
    dec_ref r37
    r38 = ('Pool', 'cpu_count', 'freeze_support')
    r39 = 'multiprocessing'
    r40 = modTof.globals :: static
    r41 = CPyImport_ImportFromMany(r39, r38, r38, r40)
    if is_error(r41) goto L15 (error at <module>:25) else goto L9
L9:
    multiprocessing = r41 :: module
    dec_ref r41
    r42 = <error> :: object
    r43 = 'modTof'
    r44 = modTof.Simulation_template :: type
    r45 = CPyType_FromTemplate(r44, r42, r43)
    if is_error(r45) goto L15 (error at <module>:27) else goto L10
L10:
    r46 = Simulation_trait_vtable_setup()
    if is_error(r46) goto L16 (error at <module>:-1) else goto L11
L11:
    r47 = '__mypyc_attrs__'
    r48 = 'c'
    r49 = 'q'
    r50 = 'n_1'
    r51 = 'n_2'
    r52 = 'T3z'
    r53 = 'T1z'
    r54 = 'T4z'
    r55 = 'T1_radius'
    r56 = 'T4_radius'
    r57 = 'T1_width'
    r58 = 'T4_width'
    r59 = 'T1top'
    r60 = 'T4top'
    r61 = 'T1_corner_radius'
    r62 = 'T4_corner_radius'
    r63 = 'T1_corner_center'
    r64 = 'T4_corner_center'
    r65 = 'PMT1_center'
    r66 = 'PMT4_center'
    r67 = 'xPMT4'
    r68 = 'yPMT4'
    r69 = 'xPMT1'
    r70 = 'yPMT1'
    r71 = 'PMT1_radius'
    r72 = 'PMT4_radius'
    r73 = 'n_dynodes'
    r74 = 'V'
    r75 = 'E_per_electron'
    r76 = 'QE'
    r77 = 'sigma_smoothing'
    r78 = 't_initial'
    r79 = 'particle_init_angle_range'
    r80 = 'particle_gen_area'
    r81 = 'particle_gen_z'
    r82 = 'mean_free_path_scints'
    r83 = 'photons_produced_per_MeV'
    r84 = 'pr_of_scintillation'
    r85 = 'max_simulated_reflections'
    r86 = 'pmt_electron_travel_time'
    r87 = 'artificial_gain'
    r88 = 'max_pmt_current_output'
    r89 = 'pr_absorption'
    r90 = 'seperation_time'
    r91 = 'output_bin_width'
    r92 = 'num_particles'
    r93 = 'CMOS_thresh'
    r94 = 'reemission_angle_factor'
    r95 = 'T1_prop_dist'
    r96 = 'T4_prop_dist'
    r97 = 'T1_endpoint_dist'
    r98 = 'T4_endpoint_dist'
    r99 = 'T1_prop_times'
    r100 = 'T4_prop_times'
    r101 = 'T1_interactions'
    r102 = 'T4_interactions'
    r103 = 'T1_part_ids'
    r104 = 'T4_part_ids'
    r105 = 'signals'
    r106 = 'output_times'
    r107 = 'signals_channelT1'
    r108 = 'signals_channelT4'
    r109 = 'output_times_channelT1'
    r110 = 'output_times_channelT4'
    r111 = 'FinalToF'
    r112 = PyTuple_Pack(64, r48, r49, r50, r51, r52, r53, r54, r55, r56, r57, r58, r59, r60, r61, r62, r63, r64, r65, r66, r67, r68, r69, r70, r71, r72, r73, r74, r75, r76, r77, r78, r79, r80, r81, r82, r83, r84, r85, r86, r87, r88, r89, r90, r91, r92, r93, r94, r95, r96, r97, r98, r99, r100, r101, r102, r103, r104, r105, r106, r107, r108, r109, r110, r111)
    if is_error(r112) goto L16 (error at <module>:27) else goto L12
L12:
    r113 = PyObject_SetAttr(r45, r47, r112)
    dec_ref r112
    r114 = r113 >= 0 :: signed
    if not r114 goto L16 (error at <module>:27) else goto L13 :: bool
L13:
    modTof.Simulation = r45 :: type
    r115 = modTof.globals :: static
    r116 = 'Simulation'
    r117 = CPyDict_SetItem(r115, r116, r45)
    dec_ref r45
    r118 = r117 >= 0 :: signed
    if not r118 goto L15 (error at <module>:27) else goto L14 :: bool
L14:
    return 1
L15:
    r119 = <error> :: None
    return r119
L16:
    dec_ref r45
    goto L15
